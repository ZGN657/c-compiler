106
primary_expression IDENTIFIER action1
primary_expression CONSTANT action2
primary_expression ( expression ) action4
postfix_expression primary_expression action5
postfix_expression IDENTIFIER [ expression ] action6
postfix_expression postfix_expression ( ) action7
postfix_expression postfix_expression ( argument_expression_list ) action8
postfix_expression IDENTIFIER . IDENTIFIER action9
postfix_expression postfix_expression INC_OP action10
postfix_expression postfix_expression DEC_OP action11
unary_expression postfix_expression action12
unary_expression INC_OP unary_expression action13
unary_expression DEC_OP unary_expression action14
unary_expression unary_operator cast_expression action15
unary_expression SIZEOF unary_expression action16
unary_expression SIZEOF ( type_name ) action17
unary_operator & action18
unary_operator * action19
unary_operator + action20
unary_operator - action21
unary_operator ~ action22
unary_operator ! action23
cast_expression unary_expression action24
cast_expression ( type_name ) cast_expression action25
argument_expression_list assignment_expression action26
argument_expression_list argument_expression_list , assignment_expression action27
argumented_translation_unit action113 translation_unit
compound_statement { action101 }
compound_statement { action102 statement_list } action114
compound_statement { action103 declaration_list } action115
compound_statement { action104 declaration_list statement_list } action116
translation_unit action109 external_declaration
translation_unit action110 translation_unit external_declaration
external_declaration action111 function_definition
external_declaration action112 declaration
type_specifier VOID action201
type_specifier INT action203
type_specifier struct_or_union_specifier action204
direct_declarator IDENTIFIER action211
direct_declarator IDENTIFIER [ assignment_expression ] action212
direct_declarator ( direct_declarator ) action213
declarator action214 direct_declarator action215
init_declarator action216 declarator action217
declaration type_specifier action218 init_declarator_list ;
init_declarator_list action219 init_declarator
init_declarator_list action220 init_declarator_list , action221 init_declarator
type_name type_specifier action222
init_declarator action223 declarator = initializer action224
initializer assignment_expression action225
initializer { initializer_list } action226
initializer { initializer_list , } action227
initializer_list assignment_expression action228
initializer_list initializer_list , assignment_expression action229
struct_or_union_specifier STRUCT IDENTIFIER { action231 struct_declaration_list action230 }
statement_list action301 statement
statement_list action302 statement_list action303 statement
statement action304 jump_statement
statement action305 compound_statement
statement selection_statement
statement expression_statement
statement iteration_statement
multiplicative_expression cast_expression action401
multiplicative_expression multiplicative_expression * cast_expression action402
multiplicative_expression multiplicative_expression / cast_expression action403
multiplicative_expression multiplicative_expression % cast_expression action404
additive_expression multiplicative_expression action405
additive_expression additive_expression + multiplicative_expression action406
additive_expression additive_expression - multiplicative_expression action407
shift_expression additive_expression action408
relational_expression shift_expression action409
relational_expression relational_expression < shift_expression action410
relational_expression relational_expression > shift_expression action411
relational_expression relational_expression LE_OP shift_expression action412
relational_expression relational_expression GE_OP shift_expression action413
equality_expression relational_expression action414
equality_expression equality_expression EQ_OP relational_expression action415
equality_expression equality_expression NE_OP relational_expression action416
exclusive_or_expression equality_expression action417
exclusive_or_expression exclusive_or_expression ^ equality_expression action418
logical_and_expression exclusive_or_expression action419
logical_and_expression logical_and_expression AND_OP exclusive_or_expression action420
logical_or_expression logical_and_expression action421
logical_or_expression logical_or_expression OR_OP logical_and_expression action422
assignment_expression logical_or_expression action423
assignment_expression unary_expression = assignment_expression action424
expression assignment_expression action425
expression expression , assignment_expression action426
expression_statement expression ; action427
iteration_statement WHILE ( action501 expression action502 ) action503 statement action504
iteration_statement FOR ( expression_statement action505 expression_statement action506 ) action507 statement action508
iteration_statement FOR ( expression_statement action509 expression_statement action510 expression action511 ) action512 statement action513
selection_statement IF ( expression action514 ) action515 statement action516
selection_statement IF ( expression action517 ) action518 statement action519 ELSE action520 statement action521
jump_statement CONTINUE ; action522
jump_statement BREAK ; action523
direct_declarator action601 direct_declarator action602 ( parameter_list )
direct_declarator action603 direct_declarator ( ) action604
parameter_list parameter_declaration action605
parameter_list parameter_list , parameter_declaration action606
parameter_declaration type_specifier declarator action607
parameter_declaration type_specifier action608
function_compound_statement { } action609
function_compound_statement { action610 statement_list action611 }
function_compound_statement { action612 declaration_list action613 }
function_compound_statement { action614 declaration_list statement_list action615 }
function_definition type_specifier action616 direct_declarator action617 function_compound_statement