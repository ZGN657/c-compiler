״̬��0
****size: 24 ****
argumented_translation_unit->@translation_unit , $ 
translation_unit->@external_declaration , $ STRUCT VOID INT IDENTIFIER ( 
translation_unit->@translation_unit external_declaration , $ STRUCT VOID INT IDENTIFIER ( 
external_declaration->@function_definition , $ STRUCT VOID INT IDENTIFIER ( 
external_declaration->@declaration , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@type_specifier declarator declaration_list compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@type_specifier declarator compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@declarator declaration_list compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@declarator compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier ; , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier init_declarator_list ; , $ STRUCT VOID INT IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( ; 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ; 
type_specifier->@INT , IDENTIFIER ( ; 
declarator->@direct_declarator , STRUCT VOID INT { 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ; 
direct_declarator->@direct_declarator ( identifier_list ) , STRUCT VOID INT { ( 
direct_declarator->@IDENTIFIER , STRUCT VOID INT { ( 
direct_declarator->@( direct_declarator ) , STRUCT VOID INT { ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , STRUCT VOID INT { ( 
direct_declarator->@direct_declarator ( parameter_list ) , STRUCT VOID INT { ( 
direct_declarator->@direct_declarator ( ) , STRUCT VOID INT { ( 
****************

״̬��1
****size: 2 ****
direct_declarator->IDENTIFIER @, STRUCT VOID INT { ( 
direct_declarator->IDENTIFIER @@[ assignment_expression ] , STRUCT VOID INT { ( 
****************

״̬��2
****size: 1 ****
type_specifier->INT @, IDENTIFIER ( ; 
****************

״̬��3
****size: 7 ****
direct_declarator->( @@direct_declarator ) , STRUCT VOID INT { ( 
direct_declarator->@direct_declarator ( identifier_list ) , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
direct_declarator->@direct_declarator ( ) , ) ( 
****************

״̬��4
****size: 1 ****
type_specifier->VOID @, IDENTIFIER ( ; 
****************

״̬��5
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->STRUCT @@IDENTIFIER , IDENTIFIER ( ; 
****************

״̬��6
****size: 23 ****
argumented_translation_unit->translation_unit @, $ 
translation_unit->translation_unit @@external_declaration , $ STRUCT VOID INT IDENTIFIER ( 
external_declaration->@function_definition , $ STRUCT VOID INT IDENTIFIER ( 
external_declaration->@declaration , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@type_specifier declarator declaration_list compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@type_specifier declarator compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@declarator declaration_list compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->@declarator compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier ; , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier init_declarator_list ; , $ STRUCT VOID INT IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( ; 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ; 
type_specifier->@INT , IDENTIFIER ( ; 
declarator->@direct_declarator , STRUCT VOID INT { 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ; 
direct_declarator->@direct_declarator ( identifier_list ) , STRUCT VOID INT { ( 
direct_declarator->@IDENTIFIER , STRUCT VOID INT { ( 
direct_declarator->@( direct_declarator ) , STRUCT VOID INT { ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , STRUCT VOID INT { ( 
direct_declarator->@direct_declarator ( parameter_list ) , STRUCT VOID INT { ( 
direct_declarator->@direct_declarator ( ) , STRUCT VOID INT { ( 
****************

״̬��7
****size: 4 ****
declarator->direct_declarator @, STRUCT VOID INT { 
direct_declarator->direct_declarator @@( identifier_list ) , STRUCT VOID INT { ( 
direct_declarator->direct_declarator @@( parameter_list ) , STRUCT VOID INT { ( 
direct_declarator->direct_declarator @@( ) , STRUCT VOID INT { ( 
****************

״̬��8
****size: 1 ****
external_declaration->declaration @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��9
****size: 1 ****
external_declaration->function_definition @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��10
****size: 15 ****
function_definition->type_specifier @@declarator declaration_list compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->type_specifier @@declarator compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
declaration->type_specifier @@; , $ STRUCT VOID INT IDENTIFIER ( 
declaration->type_specifier @@init_declarator_list ; , $ STRUCT VOID INT IDENTIFIER ( 
declarator->@direct_declarator , STRUCT VOID INT { = ; , 
init_declarator_list->@init_declarator , ; , 
init_declarator_list->@init_declarator_list , init_declarator , ; , 
direct_declarator->@direct_declarator ( identifier_list ) , STRUCT VOID INT { ( = ; , 
direct_declarator->@IDENTIFIER , STRUCT VOID INT { ( = ; , 
direct_declarator->@( direct_declarator ) , STRUCT VOID INT { ( = ; , 
direct_declarator->@IDENTIFIER [ assignment_expression ] , STRUCT VOID INT { ( = ; , 
direct_declarator->@direct_declarator ( parameter_list ) , STRUCT VOID INT { ( = ; , 
direct_declarator->@direct_declarator ( ) , STRUCT VOID INT { ( = ; , 
init_declarator->@declarator = initializer , ; , 
init_declarator->@declarator , ; , 
****************

״̬��11
****size: 16 ****
function_definition->declarator @@declaration_list compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->declarator @@compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
declaration_list->@declaration , { STRUCT VOID INT 
declaration_list->@declaration_list declaration , { STRUCT VOID INT 
compound_statement->@{ } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier ; , { STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , { STRUCT VOID INT 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
****************

״̬��12
****size: 1 ****
type_specifier->struct_or_union_specifier @, IDENTIFIER ( ; 
****************

״̬��13
****size: 1 ****
translation_unit->external_declaration @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��14
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , STRUCT VOID INT { ( 
assignment_expression->@unary_expression = assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��15
****size: 2 ****
direct_declarator->IDENTIFIER @, ) ( 
direct_declarator->IDENTIFIER @@[ assignment_expression ] , ) ( 
****************

״̬��16
****size: 7 ****
direct_declarator->( @@direct_declarator ) , ) ( 
direct_declarator->@direct_declarator ( identifier_list ) , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
direct_declarator->@direct_declarator ( ) , ) ( 
****************

״̬��17
****size: 4 ****
direct_declarator->( direct_declarator @@) , STRUCT VOID INT { ( 
direct_declarator->direct_declarator @@( identifier_list ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
direct_declarator->direct_declarator @@( ) , ) ( 
****************

״̬��18
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->STRUCT IDENTIFIER @, IDENTIFIER ( ; 
****************

״̬��19
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , IDENTIFIER ( ; 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��20
****size: 1 ****
translation_unit->translation_unit external_declaration @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��21
****size: 15 ****
direct_declarator->direct_declarator ( @@identifier_list ) , STRUCT VOID INT { ( 
direct_declarator->direct_declarator ( @@parameter_list ) , STRUCT VOID INT { ( 
direct_declarator->direct_declarator ( @@) , STRUCT VOID INT { ( 
identifier_list->@IDENTIFIER , ) , 
identifier_list->@identifier_list , IDENTIFIER , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��22
****size: 2 ****
direct_declarator->IDENTIFIER @, STRUCT VOID INT { ( = ; , 
direct_declarator->IDENTIFIER @@[ assignment_expression ] , STRUCT VOID INT { ( = ; , 
****************

״̬��23
****size: 7 ****
direct_declarator->( @@direct_declarator ) , STRUCT VOID INT { ( = ; , 
direct_declarator->@direct_declarator ( identifier_list ) , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
direct_declarator->@direct_declarator ( ) , ) ( 
****************

״̬��24
****size: 1 ****
declaration->type_specifier ; @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��25
****size: 4 ****
declarator->direct_declarator @, STRUCT VOID INT { = ; , 
direct_declarator->direct_declarator @@( identifier_list ) , STRUCT VOID INT { ( = ; , 
direct_declarator->direct_declarator @@( parameter_list ) , STRUCT VOID INT { ( = ; , 
direct_declarator->direct_declarator @@( ) , STRUCT VOID INT { ( = ; , 
****************

״̬��26
****size: 1 ****
init_declarator_list->init_declarator @, ; , 
****************

״̬��27
****size: 2 ****
declaration->type_specifier init_declarator_list @@; , $ STRUCT VOID INT IDENTIFIER ( 
init_declarator_list->init_declarator_list @@, init_declarator , ; , 
****************

״̬��28
****size: 18 ****
function_definition->type_specifier declarator @@declaration_list compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
function_definition->type_specifier declarator @@compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
init_declarator->declarator @@= initializer , ; , 
init_declarator->declarator @, ; , 
declaration_list->@declaration , { STRUCT VOID INT 
declaration_list->@declaration_list declaration , { STRUCT VOID INT 
compound_statement->@{ } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier ; , { STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , { STRUCT VOID INT 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
****************

״̬��29
****size: 92 ****
compound_statement->{ @@} , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->{ @@statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->{ @@declaration_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->{ @@declaration_list statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
statement_list->@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->@statement_list statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration_list->@declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration_list->@declaration_list declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration->@type_specifier ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��30
****size: 1 ****
function_definition->declarator compound_statement @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��31
****size: 1 ****
declaration_list->declaration @, { STRUCT VOID INT 
****************

״̬��32
****size: 13 ****
declaration->type_specifier @@; , { STRUCT VOID INT 
declaration->type_specifier @@init_declarator_list ; , { STRUCT VOID INT 
init_declarator_list->@init_declarator , ; , 
init_declarator_list->@init_declarator_list , init_declarator , ; , 
init_declarator->@declarator = initializer , ; , 
init_declarator->@declarator , ; , 
declarator->@direct_declarator , = ; , 
direct_declarator->@direct_declarator ( identifier_list ) , = ; ( , 
direct_declarator->@IDENTIFIER , = ; ( , 
direct_declarator->@( direct_declarator ) , = ; ( , 
direct_declarator->@IDENTIFIER [ assignment_expression ] , = ; ( , 
direct_declarator->@direct_declarator ( parameter_list ) , = ; ( , 
direct_declarator->@direct_declarator ( ) , = ; ( , 
****************

״̬��33
****size: 14 ****
function_definition->declarator declaration_list @@compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
declaration_list->declaration_list @@declaration , { STRUCT VOID INT 
compound_statement->@{ } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier ; , { STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , { STRUCT VOID INT 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
****************

״̬��34
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��35
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��36
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��37
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��38
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->( @@type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��39
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��40
****size: 1 ****
unary_operator->& @, ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
****************

״̬��41
****size: 1 ****
unary_operator->* @, ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
****************

״̬��42
****size: 1 ****
unary_operator->+ @, ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
****************

״̬��43
****size: 1 ****
unary_operator->- @, ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
****************

״̬��44
****size: 1 ****
unary_operator->~ @, ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
****************

״̬��45
****size: 1 ****
unary_operator->! @, ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
****************

״̬��46
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��47
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ] 
cast_expression->unary_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��48
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , STRUCT VOID INT { ( 
****************

״̬��49
****size: 5 ****
unary_expression->postfix_expression @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��50
****size: 1 ****
multiplicative_expression->cast_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��51
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��52
****size: 4 ****
additive_expression->multiplicative_expression @, ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��53
****size: 3 ****
shift_expression->additive_expression @, ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@+ multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@- multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��54
****size: 1 ****
relational_expression->shift_expression @, ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��55
****size: 5 ****
equality_expression->relational_expression @, ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@> shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��56
****size: 3 ****
exclusive_or_expression->equality_expression @, ] ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��57
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ] AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] ^ AND_OP OR_OP 
****************

״̬��58
****size: 2 ****
logical_or_expression->logical_and_expression @, ] OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] AND_OP OR_OP 
****************

״̬��59
****size: 2 ****
assignment_expression->logical_or_expression @, ] 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ] OR_OP 
****************

״̬��60
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , ) ( 
assignment_expression->@unary_expression = assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��61
****size: 4 ****
direct_declarator->( direct_declarator @@) , ) ( 
direct_declarator->direct_declarator @@( identifier_list ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
direct_declarator->direct_declarator @@( ) , ) ( 
****************

״̬��62
****size: 15 ****
direct_declarator->direct_declarator ( @@identifier_list ) , ) ( 
direct_declarator->direct_declarator ( @@parameter_list ) , ) ( 
direct_declarator->direct_declarator ( @@) , ) ( 
identifier_list->@IDENTIFIER , ) , 
identifier_list->@identifier_list , IDENTIFIER , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��63
****size: 1 ****
direct_declarator->( direct_declarator ) @, STRUCT VOID INT { ( 
****************

״̬��64
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , IDENTIFIER ( ; 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��65
****size: 1 ****
type_specifier->INT @, IDENTIFIER ( 
****************

״̬��66
****size: 1 ****
type_specifier->VOID @, IDENTIFIER ( 
****************

״̬��67
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->STRUCT @@IDENTIFIER , IDENTIFIER ( 
****************

״̬��68
****size: 1 ****
struct_declaration_list->struct_declaration @, } STRUCT VOID INT 
****************

״̬��69
****size: 10 ****
struct_declaration->type_specifier @@struct_declarator_list ; , } STRUCT VOID INT 
struct_declarator_list->@declarator , ; , 
struct_declarator_list->@struct_declarator_list , declarator , ; , 
declarator->@direct_declarator , ; , 
direct_declarator->@direct_declarator ( identifier_list ) , ; ( , 
direct_declarator->@IDENTIFIER , ; ( , 
direct_declarator->@( direct_declarator ) , ; ( , 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ; ( , 
direct_declarator->@direct_declarator ( parameter_list ) , ; ( , 
direct_declarator->@direct_declarator ( ) , ; ( , 
****************

״̬��70
****size: 1 ****
type_specifier->struct_or_union_specifier @, IDENTIFIER ( 
****************

״̬��71
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , IDENTIFIER ( ; 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��72
****size: 1 ****
identifier_list->IDENTIFIER @, ) , 
****************

״̬��73
****size: 1 ****
type_specifier->INT @, IDENTIFIER ( ) , 
****************

״̬��74
****size: 1 ****
direct_declarator->direct_declarator ( ) @, STRUCT VOID INT { ( 
****************

״̬��75
****size: 1 ****
type_specifier->VOID @, IDENTIFIER ( ) , 
****************

״̬��76
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->STRUCT @@IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��77
****size: 9 ****
parameter_declaration->type_specifier @@declarator , ) , 
parameter_declaration->type_specifier @, ) , 
declarator->@direct_declarator , ) , 
direct_declarator->@direct_declarator ( identifier_list ) , ) , ( 
direct_declarator->@IDENTIFIER , ) , ( 
direct_declarator->@( direct_declarator ) , ) , ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) , ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) , ( 
direct_declarator->@direct_declarator ( ) , ) , ( 
****************

״̬��78
****size: 2 ****
direct_declarator->direct_declarator ( identifier_list @@) , STRUCT VOID INT { ( 
identifier_list->identifier_list @@, IDENTIFIER , ) , 
****************

״̬��79
****size: 1 ****
type_specifier->struct_or_union_specifier @, IDENTIFIER ( ) , 
****************

״̬��80
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , STRUCT VOID INT { ( 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��81
****size: 1 ****
parameter_list->parameter_declaration @, ) , 
****************

״̬��82
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , STRUCT VOID INT { ( = ; , 
assignment_expression->@unary_expression = assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��83
****size: 4 ****
direct_declarator->( direct_declarator @@) , STRUCT VOID INT { ( = ; , 
direct_declarator->direct_declarator @@( identifier_list ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
direct_declarator->direct_declarator @@( ) , ) ( 
****************

״̬��84
****size: 15 ****
direct_declarator->direct_declarator ( @@identifier_list ) , STRUCT VOID INT { ( = ; , 
direct_declarator->direct_declarator ( @@parameter_list ) , STRUCT VOID INT { ( = ; , 
direct_declarator->direct_declarator ( @@) , STRUCT VOID INT { ( = ; , 
identifier_list->@IDENTIFIER , ) , 
identifier_list->@identifier_list , IDENTIFIER , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��85
****size: 10 ****
init_declarator_list->init_declarator_list , @@init_declarator , ; , 
init_declarator->@declarator = initializer , ; , 
init_declarator->@declarator , ; , 
declarator->@direct_declarator , = ; , 
direct_declarator->@direct_declarator ( identifier_list ) , = ; , ( 
direct_declarator->@IDENTIFIER , = ; , ( 
direct_declarator->@( direct_declarator ) , = ; , ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , = ; , ( 
direct_declarator->@direct_declarator ( parameter_list ) , = ; , ( 
direct_declarator->@direct_declarator ( ) , = ; , ( 
****************

״̬��86
****size: 1 ****
declaration->type_specifier init_declarator_list ; @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��87
****size: 52 ****
init_declarator->declarator = @@initializer , ; , 
initializer->@assignment_expression , ; , 
initializer->@{ initializer_list } , ; , 
initializer->@{ initializer_list , } , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��88
****size: 1 ****
function_definition->type_specifier declarator compound_statement @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��89
****size: 14 ****
function_definition->type_specifier declarator declaration_list @@compound_statement , $ STRUCT VOID INT IDENTIFIER ( 
declaration_list->declaration_list @@declaration , { STRUCT VOID INT 
compound_statement->@{ } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list } , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->@{ declaration_list statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
declaration->@type_specifier ; , { STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , { STRUCT VOID INT 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
****************

״̬��90
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��91
****size: 4 ****
labeled_statement->IDENTIFIER @@: statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��92
****size: 1 ****
labeled_statement->DEFAULT @@: statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��93
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��94
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��95
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->( @@type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��96
****size: 1 ****
jump_statement->CONTINUE @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��97
****size: 1 ****
selection_statement->SWITCH @@( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��98
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��99
****size: 1 ****
jump_statement->BREAK @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��100
****size: 2 ****
iteration_statement->FOR @@( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->FOR @@( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��101
****size: 1 ****
compound_statement->{ } @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��102
****size: 1 ****
expression_statement->; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��103
****size: 92 ****
compound_statement->{ @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->{ @@statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->{ @@declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->{ @@declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->@statement_list statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration_list->@declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration_list->@declaration_list declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration->@type_specifier ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��104
****size: 52 ****
jump_statement->RETURN @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->RETURN @@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��105
****size: 49 ****
labeled_statement->CASE @@assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
assignment_expression->@unary_expression = assignment_expression , : 
assignment_expression->@logical_or_expression , : 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , : OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , : OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , : AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , : AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , : ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , : ^ AND_OP OR_OP 
equality_expression->@relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��106
****size: 2 ****
selection_statement->IF @@( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->IF @@( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��107
****size: 1 ****
iteration_statement->WHILE @@( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��108
****size: 1 ****
jump_statement->GOTO @@IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��109
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��110
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ; , 
cast_expression->unary_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��111
****size: 1 ****
expression->assignment_expression @, ; , 
****************

״̬��112
****size: 2 ****
expression_statement->expression @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->expression @@, assignment_expression , ; , 
****************

״̬��113
****size: 5 ****
unary_expression->postfix_expression @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��114
****size: 1 ****
statement->expression_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��115
****size: 1 ****
multiplicative_expression->cast_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��116
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��117
****size: 4 ****
additive_expression->multiplicative_expression @, ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@* cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��118
****size: 1 ****
statement_list->statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��119
****size: 3 ****
shift_expression->additive_expression @, ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@+ multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@- multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��120
****size: 1 ****
relational_expression->shift_expression @, ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��121
****size: 1 ****
statement->compound_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��122
****size: 5 ****
equality_expression->relational_expression @, ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@> shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��123
****size: 3 ****
exclusive_or_expression->equality_expression @, ; , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��124
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ; , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ; , ^ AND_OP OR_OP 
****************

״̬��125
****size: 2 ****
logical_or_expression->logical_and_expression @, ; , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
****************

״̬��126
****size: 2 ****
assignment_expression->logical_or_expression @, ; , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ; , OR_OP 
****************

״̬��127
****size: 1 ****
declaration_list->declaration @, } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
****************

״̬��128
****size: 78 ****
compound_statement->{ statement_list @@} , $ STRUCT VOID INT IDENTIFIER ( 
statement_list->statement_list @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��129
****size: 13 ****
declaration->type_specifier @@; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration->type_specifier @@init_declarator_list ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
init_declarator_list->@init_declarator , ; , 
init_declarator_list->@init_declarator_list , init_declarator , ; , 
init_declarator->@declarator = initializer , ; , 
init_declarator->@declarator , ; , 
declarator->@direct_declarator , = ; , 
direct_declarator->@direct_declarator ( identifier_list ) , = ; ( , 
direct_declarator->@IDENTIFIER , = ; ( , 
direct_declarator->@( direct_declarator ) , = ; ( , 
direct_declarator->@IDENTIFIER [ assignment_expression ] , = ; ( , 
direct_declarator->@direct_declarator ( parameter_list ) , = ; ( , 
direct_declarator->@direct_declarator ( ) , = ; ( , 
****************

״̬��130
****size: 89 ****
compound_statement->{ declaration_list @@} , $ STRUCT VOID INT IDENTIFIER ( 
compound_statement->{ declaration_list @@statement_list } , $ STRUCT VOID INT IDENTIFIER ( 
declaration_list->declaration_list @@declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement_list->@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->@statement_list statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration->@type_specifier ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��131
****size: 1 ****
statement->jump_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��132
****size: 1 ****
statement->labeled_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��133
****size: 1 ****
statement->selection_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��134
****size: 1 ****
statement->iteration_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��135
****size: 2 ****
direct_declarator->IDENTIFIER @, = ; ( , 
direct_declarator->IDENTIFIER @@[ assignment_expression ] , = ; ( , 
****************

״̬��136
****size: 7 ****
direct_declarator->( @@direct_declarator ) , = ; ( , 
direct_declarator->@direct_declarator ( identifier_list ) , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
direct_declarator->@direct_declarator ( ) , ) ( 
****************

״̬��137
****size: 1 ****
declaration->type_specifier ; @, { STRUCT VOID INT 
****************

״̬��138
****size: 4 ****
declarator->direct_declarator @, = ; , 
direct_declarator->direct_declarator @@( identifier_list ) , = ; ( , 
direct_declarator->direct_declarator @@( parameter_list ) , = ; ( , 
direct_declarator->direct_declarator @@( ) , = ; ( , 
****************

״̬��139
****size: 2 ****
declaration->type_specifier init_declarator_list @@; , { STRUCT VOID INT 
init_declarator_list->init_declarator_list @@, init_declarator , ; , 
****************

״̬��140
****size: 2 ****
init_declarator->declarator @@= initializer , ; , 
init_declarator->declarator @, ; , 
****************

״̬��141
****size: 1 ****
function_definition->declarator declaration_list compound_statement @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��142
****size: 1 ****
declaration_list->declaration_list declaration @, { STRUCT VOID INT 
****************

״̬��143
****size: 51 ****
primary_expression->( @@expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��144
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��145
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��146
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��147
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��148
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��149
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��150
****size: 1 ****
type_specifier->INT @, ) 
****************

״̬��151
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��152
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��153
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->( @@type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��154
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��155
****size: 1 ****
type_specifier->VOID @, ) 
****************

״̬��156
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , ) 
struct_or_union_specifier->STRUCT @@IDENTIFIER , ) 
****************

״̬��157
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��158
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ) , 
cast_expression->unary_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��159
****size: 1 ****
expression->assignment_expression @, ) , 
****************

״̬��160
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��161
****size: 5 ****
unary_expression->postfix_expression @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��162
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��163
****size: 1 ****
multiplicative_expression->cast_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��164
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��165
****size: 4 ****
additive_expression->multiplicative_expression @, ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@* cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��166
****size: 3 ****
shift_expression->additive_expression @, ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@+ multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@- multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��167
****size: 1 ****
relational_expression->shift_expression @, ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��168
****size: 5 ****
equality_expression->relational_expression @, ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@> shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��169
****size: 3 ****
exclusive_or_expression->equality_expression @, ) , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��170
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ) , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ) , ^ AND_OP OR_OP 
****************

״̬��171
****size: 2 ****
logical_or_expression->logical_and_expression @, ) , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
****************

״̬��172
****size: 2 ****
assignment_expression->logical_or_expression @, ) , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ) , OR_OP 
****************

״̬��173
****size: 1 ****
type_name->type_specifier @, ) 
****************

״̬��174
****size: 1 ****
type_specifier->struct_or_union_specifier @, ) 
****************

״̬��175
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��176
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��177
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ] 
assignment_expression->@unary_expression = assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��178
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, STRUCT VOID INT { ( 
****************

״̬��179
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��180
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��181
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��182
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��183
****size: 1 ****
cast_expression->unary_expression @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��184
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��185
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��186
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��187
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��188
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��189
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��190
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��191
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��192
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��193
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��194
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��195
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ] ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��196
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ AND_OP OR_OP EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ] ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ] ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ] ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ] ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ] ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ] ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��197
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ] AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] AND_OP OR_OP ^ 
exclusive_or_expression->@equality_expression , ] AND_OP OR_OP ^ 
equality_expression->@relational_expression , ] AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] AND_OP OR_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ] AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ] AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ] AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ] AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ] AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ] AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ] AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��198
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ] OR_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP ^ AND_OP 
exclusive_or_expression->@equality_expression , ] OR_OP ^ AND_OP 
equality_expression->@relational_expression , ] OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP ^ EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression < shift_expression , ] OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@shift_expression , ] OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression > shift_expression , ] OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
shift_expression->@additive_expression , ] OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@multiplicative_expression , ] OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@cast_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@unary_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@( type_name ) cast_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@postfix_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@INC_OP unary_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@DEC_OP unary_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@unary_operator cast_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF unary_expression , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@primary_expression , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@( expression ) , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@CONSTANT , ] OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
****************

״̬��199
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , ) ( 
****************

״̬��200
****size: 1 ****
direct_declarator->( direct_declarator ) @, ) ( 
****************

״̬��201
****size: 1 ****
direct_declarator->direct_declarator ( ) @, ) ( 
****************

״̬��202
****size: 2 ****
direct_declarator->direct_declarator ( identifier_list @@) , ) ( 
identifier_list->identifier_list @@, IDENTIFIER , ) , 
****************

״̬��203
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , ) ( 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��204
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , IDENTIFIER ( ; 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��205
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->STRUCT IDENTIFIER @, IDENTIFIER ( 
****************

״̬��206
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , IDENTIFIER ( 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��207
****size: 2 ****
direct_declarator->IDENTIFIER @, ; ( , 
direct_declarator->IDENTIFIER @@[ assignment_expression ] , ; ( , 
****************

״̬��208
****size: 7 ****
direct_declarator->( @@direct_declarator ) , ; ( , 
direct_declarator->@direct_declarator ( identifier_list ) , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
direct_declarator->@direct_declarator ( ) , ) ( 
****************

״̬��209
****size: 4 ****
declarator->direct_declarator @, ; , 
direct_declarator->direct_declarator @@( identifier_list ) , ; ( , 
direct_declarator->direct_declarator @@( parameter_list ) , ; ( , 
direct_declarator->direct_declarator @@( ) , ; ( , 
****************

״̬��210
****size: 2 ****
struct_declaration->type_specifier struct_declarator_list @@; , } STRUCT VOID INT 
struct_declarator_list->struct_declarator_list @@, declarator , ; , 
****************

״̬��211
****size: 1 ****
struct_declarator_list->declarator @, ; , 
****************

״̬��212
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, IDENTIFIER ( ; 
****************

״̬��213
****size: 1 ****
struct_declaration_list->struct_declaration_list struct_declaration @, } STRUCT VOID INT 
****************

״̬��214
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->STRUCT IDENTIFIER @, IDENTIFIER ( ) , 
****************

״̬��215
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , IDENTIFIER ( ) , 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��216
****size: 2 ****
direct_declarator->IDENTIFIER @, ) , ( 
direct_declarator->IDENTIFIER @@[ assignment_expression ] , ) , ( 
****************

״̬��217
****size: 7 ****
direct_declarator->( @@direct_declarator ) , ) , ( 
direct_declarator->@direct_declarator ( identifier_list ) , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
direct_declarator->@direct_declarator ( ) , ) ( 
****************

״̬��218
****size: 4 ****
declarator->direct_declarator @, ) , 
direct_declarator->direct_declarator @@( identifier_list ) , ) , ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) , ( 
direct_declarator->direct_declarator @@( ) , ) , ( 
****************

״̬��219
****size: 1 ****
parameter_declaration->type_specifier declarator @, ) , 
****************

״̬��220
****size: 1 ****
direct_declarator->direct_declarator ( identifier_list ) @, STRUCT VOID INT { ( 
****************

״̬��221
****size: 1 ****
identifier_list->identifier_list , @@IDENTIFIER , ) , 
****************

״̬��222
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, STRUCT VOID INT { ( 
****************

״̬��223
****size: 9 ****
parameter_list->parameter_list , @@parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��224
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , STRUCT VOID INT { ( = ; , 
****************

״̬��225
****size: 1 ****
direct_declarator->( direct_declarator ) @, STRUCT VOID INT { ( = ; , 
****************

״̬��226
****size: 1 ****
direct_declarator->direct_declarator ( ) @, STRUCT VOID INT { ( = ; , 
****************

״̬��227
****size: 2 ****
direct_declarator->direct_declarator ( identifier_list @@) , STRUCT VOID INT { ( = ; , 
identifier_list->identifier_list @@, IDENTIFIER , ) , 
****************

״̬��228
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , STRUCT VOID INT { ( = ; , 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��229
****size: 1 ****
init_declarator_list->init_declarator_list , init_declarator @, ; , 
****************

״̬��230
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��231
****size: 55 ****
initializer->{ @@initializer_list } , ; , 
initializer->{ @@initializer_list , } , ; , 
initializer_list->@initializer , } , 
initializer_list->@initializer_list , initializer , } , 
initializer->@assignment_expression , } , 
initializer->@{ initializer_list } , } , 
initializer->@{ initializer_list , } , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , } , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , } , ^ AND_OP OR_OP 
equality_expression->@relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��232
****size: 1 ****
initializer->assignment_expression @, ; , 
****************

״̬��233
****size: 1 ****
init_declarator->declarator = initializer @, ; , 
****************

״̬��234
****size: 1 ****
function_definition->type_specifier declarator declaration_list compound_statement @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��235
****size: 51 ****
primary_expression->( @@expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��236
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��237
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��238
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��239
****size: 77 ****
labeled_statement->IDENTIFIER : @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��240
****size: 77 ****
labeled_statement->DEFAULT : @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��241
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��242
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��243
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��244
****size: 1 ****
jump_statement->CONTINUE ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��245
****size: 51 ****
selection_statement->SWITCH ( @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��246
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��247
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��248
****size: 1 ****
jump_statement->BREAK ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��249
****size: 54 ****
iteration_statement->FOR ( @@expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->FOR ( @@expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , IDENTIFIER ! ( SIZEOF INC_OP & CONSTANT DEC_OP ; + * ~ - 
expression_statement->@; , IDENTIFIER ! ( SIZEOF INC_OP & CONSTANT DEC_OP ; + * ~ - 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��250
****size: 1 ****
compound_statement->{ } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��251
****size: 78 ****
compound_statement->{ statement_list @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->statement_list @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��252
****size: 89 ****
compound_statement->{ declaration_list @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->{ declaration_list @@statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration_list->declaration_list @@declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement_list->@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->@statement_list statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration->@type_specifier ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��253
****size: 1 ****
jump_statement->RETURN ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��254
****size: 2 ****
jump_statement->RETURN expression @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->expression @@, assignment_expression , ; , 
****************

״̬��255
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��256
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��257
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��258
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��259
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->( @@type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��260
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��261
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��262
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , : 
cast_expression->unary_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��263
****size: 1 ****
labeled_statement->CASE assignment_expression @@: statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��264
****size: 5 ****
unary_expression->postfix_expression @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��265
****size: 1 ****
multiplicative_expression->cast_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��266
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��267
****size: 4 ****
additive_expression->multiplicative_expression @, : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@/ cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@* cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��268
****size: 3 ****
shift_expression->additive_expression @, : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@+ multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@- multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��269
****size: 1 ****
relational_expression->shift_expression @, : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��270
****size: 5 ****
equality_expression->relational_expression @, : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@> shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@LE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@GE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��271
****size: 3 ****
exclusive_or_expression->equality_expression @, : ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->equality_expression @@NE_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��272
****size: 2 ****
logical_and_expression->exclusive_or_expression @, : AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , : ^ AND_OP OR_OP 
****************

״̬��273
****size: 2 ****
logical_or_expression->logical_and_expression @, : OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , : AND_OP OR_OP 
****************

״̬��274
****size: 2 ****
assignment_expression->logical_or_expression @, : 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , : OR_OP 
****************

״̬��275
****size: 52 ****
selection_statement->IF ( @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->IF ( @@expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��276
****size: 51 ****
iteration_statement->WHILE ( @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��277
****size: 1 ****
jump_statement->GOTO IDENTIFIER @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��278
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��279
****size: 49 ****
expression->expression , @@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��280
****size: 1 ****
expression_statement->expression ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��281
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��282
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��283
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��284
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��285
****size: 1 ****
cast_expression->unary_expression @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��286
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��287
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��288
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��289
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��290
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��291
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��292
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��293
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��294
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��295
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��296
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��297
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ; , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��298
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ AND_OP OR_OP EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ; , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ; , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ; , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ; , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��299
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ; , AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , AND_OP OR_OP ^ 
exclusive_or_expression->@equality_expression , ; , AND_OP OR_OP ^ 
equality_expression->@relational_expression , ; , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , AND_OP OR_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ; , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ; , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ; , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ; , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ; , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ; , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ; , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��300
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ; , OR_OP 
logical_and_expression->@exclusive_or_expression , ; , OR_OP AND_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , OR_OP ^ AND_OP 
exclusive_or_expression->@equality_expression , ; , OR_OP ^ AND_OP 
equality_expression->@relational_expression , ; , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , OR_OP ^ EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression < shift_expression , ; , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@shift_expression , ; , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression > shift_expression , ; , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
shift_expression->@additive_expression , ; , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@multiplicative_expression , ; , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@cast_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@unary_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@( type_name ) cast_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@postfix_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@INC_OP unary_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@DEC_OP unary_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@unary_operator cast_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF unary_expression , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@primary_expression , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@( expression ) , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@CONSTANT , ; , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
****************

״̬��301
****size: 1 ****
compound_statement->{ statement_list } @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��302
****size: 1 ****
statement_list->statement_list statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��303
****size: 1 ****
declaration->type_specifier ; @, } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
****************

״̬��304
****size: 2 ****
declaration->type_specifier init_declarator_list @@; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
init_declarator_list->init_declarator_list @@, init_declarator , ; , 
****************

״̬��305
****size: 1 ****
compound_statement->{ declaration_list } @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��306
****size: 1 ****
declaration_list->declaration_list declaration @, } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
****************

״̬��307
****size: 78 ****
compound_statement->{ declaration_list statement_list @@} , $ STRUCT VOID INT IDENTIFIER ( 
statement_list->statement_list @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��308
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , = ; ( , 
assignment_expression->@unary_expression = assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��309
****size: 4 ****
direct_declarator->( direct_declarator @@) , = ; ( , 
direct_declarator->direct_declarator @@( identifier_list ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
direct_declarator->direct_declarator @@( ) , ) ( 
****************

״̬��310
****size: 15 ****
direct_declarator->direct_declarator ( @@identifier_list ) , = ; ( , 
direct_declarator->direct_declarator ( @@parameter_list ) , = ; ( , 
direct_declarator->direct_declarator ( @@) , = ; ( , 
identifier_list->@IDENTIFIER , ) , 
identifier_list->@identifier_list , IDENTIFIER , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��311
****size: 1 ****
declaration->type_specifier init_declarator_list ; @, { STRUCT VOID INT 
****************

״̬��312
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��313
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��314
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��315
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��316
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->( @@type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��317
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��318
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��319
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ] , 
cast_expression->unary_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��320
****size: 1 ****
expression->assignment_expression @, ] , 
****************

״̬��321
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��322
****size: 5 ****
unary_expression->postfix_expression @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��323
****size: 1 ****
multiplicative_expression->cast_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��324
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��325
****size: 4 ****
additive_expression->multiplicative_expression @, ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��326
****size: 3 ****
shift_expression->additive_expression @, ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@+ multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@- multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��327
****size: 1 ****
relational_expression->shift_expression @, ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��328
****size: 5 ****
equality_expression->relational_expression @, ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@> shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��329
****size: 3 ****
exclusive_or_expression->equality_expression @, ] , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��330
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ] , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] , ^ AND_OP OR_OP 
****************

״̬��331
****size: 2 ****
logical_or_expression->logical_and_expression @, ] , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
****************

״̬��332
****size: 2 ****
assignment_expression->logical_or_expression @, ] , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ] , OR_OP 
****************

״̬��333
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��334
****size: 51 ****
primary_expression->( @@expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��335
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��336
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��337
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��338
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��339
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��340
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��341
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��342
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��343
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , ) 
struct_or_union_specifier->STRUCT IDENTIFIER @, ) 
****************

״̬��344
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , ) 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��345
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��346
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��347
****size: 49 ****
expression->expression , @@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��348
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��349
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��350
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��351
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��352
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��353
****size: 1 ****
cast_expression->unary_expression @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��354
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��355
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��356
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��357
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��358
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��359
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��360
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��361
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��362
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��363
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��364
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��365
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ) , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��366
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ AND_OP OR_OP EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ) , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ) , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ) , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ) , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��367
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ) , AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , AND_OP OR_OP ^ 
exclusive_or_expression->@equality_expression , ) , AND_OP OR_OP ^ 
equality_expression->@relational_expression , ) , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , AND_OP OR_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ) , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ) , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ) , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ) , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ) , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ) , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ) , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��368
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ) , OR_OP 
logical_and_expression->@exclusive_or_expression , ) , OR_OP AND_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , OR_OP AND_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , OR_OP ^ AND_OP 
exclusive_or_expression->@equality_expression , ) , OR_OP ^ AND_OP 
equality_expression->@relational_expression , ) , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , OR_OP ^ EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression < shift_expression , ) , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@shift_expression , ) , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression > shift_expression , ) , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
shift_expression->@additive_expression , ) , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@multiplicative_expression , ) , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@cast_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@unary_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@( type_name ) cast_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@postfix_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@INC_OP unary_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@DEC_OP unary_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@unary_operator cast_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF unary_expression , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF ( type_name ) , ) , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression INC_OP , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( ) , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@primary_expression , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression DEC_OP , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@( expression ) , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@CONSTANT , ) , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
****************

״̬��369
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��370
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ] 
****************

״̬��371
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��372
****size: 1 ****
argument_expression_list->assignment_expression @, ) , 
****************

״̬��373
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��374
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��375
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��376
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��377
****size: 1 ****
primary_expression->CONSTANT @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��378
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��379
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��380
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��381
****size: 1 ****
postfix_expression->primary_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��382
****size: 1 ****
cast_expression->unary_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��383
****size: 5 ****
unary_expression->postfix_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��384
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��385
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��386
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��387
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��388
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��389
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��390
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��391
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��392
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��393
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��394
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��395
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��396
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ] ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ] ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ] ^ AND_OP OR_OP EQ_OP NE_OP 
****************

״̬��397
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ] AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] AND_OP OR_OP ^ 
****************

״̬��398
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ] OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] OR_OP AND_OP 
****************

״̬��399
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, ) ( 
****************

״̬��400
****size: 1 ****
direct_declarator->direct_declarator ( identifier_list ) @, ) ( 
****************

״̬��401
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, ) ( 
****************

״̬��402
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, IDENTIFIER ( ; 
****************

״̬��403
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , IDENTIFIER ( 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��404
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , IDENTIFIER ( 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��405
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , ; ( , 
assignment_expression->@unary_expression = assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��406
****size: 4 ****
direct_declarator->( direct_declarator @@) , ; ( , 
direct_declarator->direct_declarator @@( identifier_list ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
direct_declarator->direct_declarator @@( ) , ) ( 
****************

״̬��407
****size: 15 ****
direct_declarator->direct_declarator ( @@identifier_list ) , ; ( , 
direct_declarator->direct_declarator ( @@parameter_list ) , ; ( , 
direct_declarator->direct_declarator ( @@) , ; ( , 
identifier_list->@IDENTIFIER , ) , 
identifier_list->@identifier_list , IDENTIFIER , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��408
****size: 8 ****
struct_declarator_list->struct_declarator_list , @@declarator , ; , 
declarator->@direct_declarator , ; , 
direct_declarator->@direct_declarator ( identifier_list ) , ; , ( 
direct_declarator->@IDENTIFIER , ; , ( 
direct_declarator->@( direct_declarator ) , ; , ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ; , ( 
direct_declarator->@direct_declarator ( parameter_list ) , ; , ( 
direct_declarator->@direct_declarator ( ) , ; , ( 
****************

״̬��409
****size: 1 ****
struct_declaration->type_specifier struct_declarator_list ; @, } STRUCT VOID INT 
****************

״̬��410
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , IDENTIFIER ( ) , 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��411
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , IDENTIFIER ( ) , 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��412
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , ) , ( 
assignment_expression->@unary_expression = assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��413
****size: 4 ****
direct_declarator->( direct_declarator @@) , ) , ( 
direct_declarator->direct_declarator @@( identifier_list ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
direct_declarator->direct_declarator @@( ) , ) ( 
****************

״̬��414
****size: 15 ****
direct_declarator->direct_declarator ( @@identifier_list ) , ) , ( 
direct_declarator->direct_declarator ( @@parameter_list ) , ) , ( 
direct_declarator->direct_declarator ( @@) , ) , ( 
identifier_list->@IDENTIFIER , ) , 
identifier_list->@identifier_list , IDENTIFIER , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
****************

״̬��415
****size: 1 ****
identifier_list->identifier_list , IDENTIFIER @, ) , 
****************

״̬��416
****size: 1 ****
parameter_list->parameter_list , parameter_declaration @, ) , 
****************

״̬��417
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, STRUCT VOID INT { ( = ; , 
****************

״̬��418
****size: 1 ****
direct_declarator->direct_declarator ( identifier_list ) @, STRUCT VOID INT { ( = ; , 
****************

״̬��419
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, STRUCT VOID INT { ( = ; , 
****************

״̬��420
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��421
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��422
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��423
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��424
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->( @@type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��425
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��426
****size: 55 ****
initializer->{ @@initializer_list } , } , 
initializer->{ @@initializer_list , } , } , 
initializer_list->@initializer , } , 
initializer_list->@initializer_list , initializer , } , 
initializer->@assignment_expression , } , 
initializer->@{ initializer_list } , } , 
initializer->@{ initializer_list , } , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , } , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , } , ^ AND_OP OR_OP 
equality_expression->@relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��427
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��428
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , } , 
cast_expression->unary_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��429
****size: 1 ****
initializer->assignment_expression @, } , 
****************

״̬��430
****size: 5 ****
unary_expression->postfix_expression @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��431
****size: 1 ****
multiplicative_expression->cast_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��432
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��433
****size: 4 ****
additive_expression->multiplicative_expression @, } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@/ cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@* cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��434
****size: 3 ****
shift_expression->additive_expression @, } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@+ multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->additive_expression @@- multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��435
****size: 1 ****
relational_expression->shift_expression @, } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��436
****size: 5 ****
equality_expression->relational_expression @, } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@> shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@LE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@GE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��437
****size: 3 ****
exclusive_or_expression->equality_expression @, } , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->equality_expression @@NE_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��438
****size: 2 ****
logical_and_expression->exclusive_or_expression @, } , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , } , ^ AND_OP OR_OP 
****************

״̬��439
****size: 2 ****
logical_or_expression->logical_and_expression @, } , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , } , AND_OP OR_OP 
****************

״̬��440
****size: 2 ****
assignment_expression->logical_or_expression @, } , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , } , OR_OP 
****************

״̬��441
****size: 1 ****
initializer_list->initializer @, } , 
****************

״̬��442
****size: 3 ****
initializer->{ initializer_list @@} , ; , 
initializer->{ initializer_list @@, } , ; , 
initializer_list->initializer_list @@, initializer , } , 
****************

״̬��443
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��444
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��445
****size: 1 ****
labeled_statement->IDENTIFIER : statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��446
****size: 1 ****
labeled_statement->DEFAULT : statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��447
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��448
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��449
****size: 2 ****
selection_statement->SWITCH ( expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��450
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��451
****size: 1 ****
expression_statement->; @, IDENTIFIER ! ( SIZEOF INC_OP & CONSTANT DEC_OP ; + * ~ - 
****************

״̬��452
****size: 2 ****
expression_statement->expression @@; , IDENTIFIER ! ( SIZEOF INC_OP & CONSTANT DEC_OP ; + * ~ - 
expression->expression @@, assignment_expression , ; , 
****************

״̬��453
****size: 54 ****
iteration_statement->FOR ( expression_statement @@expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->FOR ( expression_statement @@expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , ) IDENTIFIER ! INC_OP SIZEOF & ( DEC_OP CONSTANT * + - ~ 
expression_statement->@; , ) IDENTIFIER ! INC_OP SIZEOF & ( DEC_OP CONSTANT * + - ~ 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��454
****size: 1 ****
compound_statement->{ statement_list } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��455
****size: 1 ****
compound_statement->{ declaration_list } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��456
****size: 78 ****
compound_statement->{ declaration_list statement_list @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->statement_list @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��457
****size: 1 ****
jump_statement->RETURN expression ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��458
****size: 51 ****
primary_expression->( @@expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��459
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��460
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��461
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��462
****size: 1 ****
unary_expression->INC_OP unary_expression @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��463
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��464
****size: 1 ****
cast_expression->( type_name @@) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��465
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��466
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��467
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , : 
assignment_expression->@unary_expression = assignment_expression , : 
assignment_expression->@logical_or_expression , : 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , : OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , : OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , : AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , : AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , : ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , : ^ AND_OP OR_OP 
equality_expression->@relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��468
****size: 77 ****
labeled_statement->CASE assignment_expression : @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��469
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��470
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��471
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��472
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��473
****size: 1 ****
cast_expression->unary_expression @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��474
****size: 1 ****
unary_expression->unary_operator cast_expression @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��475
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��476
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��477
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��478
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��479
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��480
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��481
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��482
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��483
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��484
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��485
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , : ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��486
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , : ^ AND_OP OR_OP 
equality_expression->@relational_expression , : ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , : ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , : ^ AND_OP OR_OP EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , : ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , : ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , : ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , : ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , : ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , : ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , : ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , : ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , : ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , : ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��487
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , : AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , : AND_OP OR_OP ^ 
exclusive_or_expression->@equality_expression , : AND_OP OR_OP ^ 
equality_expression->@relational_expression , : AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , : AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , : AND_OP OR_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , : AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , : AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , : AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , : AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , : AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , : AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , : AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , : AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , : AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , : AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , : AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��488
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , : OR_OP 
logical_and_expression->@exclusive_or_expression , : OR_OP AND_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , : OR_OP AND_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , : OR_OP ^ AND_OP 
exclusive_or_expression->@equality_expression , : OR_OP ^ AND_OP 
equality_expression->@relational_expression , : OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression EQ_OP relational_expression , : OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression NE_OP relational_expression , : OR_OP ^ EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression < shift_expression , : OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@shift_expression , : OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression > shift_expression , : OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression LE_OP shift_expression , : OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression GE_OP shift_expression , : OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
shift_expression->@additive_expression , : OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@multiplicative_expression , : OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression + multiplicative_expression , : OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression - multiplicative_expression , : OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@cast_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@unary_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@( type_name ) cast_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@postfix_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@INC_OP unary_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@DEC_OP unary_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@unary_operator cast_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF unary_expression , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF ( type_name ) , : OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression INC_OP , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( ) , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@primary_expression , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER [ expression ] , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression DEC_OP , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@( expression ) , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@CONSTANT , : OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
****************

״̬��489
****size: 3 ****
selection_statement->IF ( expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->IF ( expression @@) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��490
****size: 2 ****
iteration_statement->WHILE ( expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��491
****size: 1 ****
jump_statement->GOTO IDENTIFIER ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��492
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ; , 
****************

״̬��493
****size: 1 ****
expression->expression , assignment_expression @, ; , 
****************

״̬��494
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��495
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��496
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��497
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��498
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��499
****size: 1 ****
primary_expression->CONSTANT @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��500
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��501
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��502
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��503
****size: 1 ****
postfix_expression->primary_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��504
****size: 1 ****
cast_expression->unary_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��505
****size: 5 ****
unary_expression->postfix_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��506
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��507
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��508
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��509
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��510
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��511
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��512
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��513
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��514
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��515
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��516
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��517
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��518
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ; , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ; , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ; , ^ AND_OP OR_OP EQ_OP NE_OP 
****************

״̬��519
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ; , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ; , AND_OP OR_OP ^ 
****************

״̬��520
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ; , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
****************

״̬��521
****size: 1 ****
declaration->type_specifier init_declarator_list ; @, } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
****************

״̬��522
****size: 1 ****
compound_statement->{ declaration_list statement_list } @, $ STRUCT VOID INT IDENTIFIER ( 
****************

״̬��523
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , = ; ( , 
****************

״̬��524
****size: 1 ****
direct_declarator->( direct_declarator ) @, = ; ( , 
****************

״̬��525
****size: 1 ****
direct_declarator->direct_declarator ( ) @, = ; ( , 
****************

״̬��526
****size: 2 ****
direct_declarator->direct_declarator ( identifier_list @@) , = ; ( , 
identifier_list->identifier_list @@, IDENTIFIER , ) , 
****************

״̬��527
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , = ; ( , 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��528
****size: 51 ****
primary_expression->( @@expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��529
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��530
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��531
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��532
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��533
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��534
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��535
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��536
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��537
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��538
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��539
****size: 49 ****
expression->expression , @@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��540
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��541
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��542
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��543
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��544
****size: 1 ****
cast_expression->unary_expression @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��545
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��546
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��547
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��548
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��549
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��550
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��551
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��552
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��553
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��554
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��555
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��556
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , ] , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��557
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ AND_OP OR_OP EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ] , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ] , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ] , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ] , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��558
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ] , AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , AND_OP OR_OP ^ 
exclusive_or_expression->@equality_expression , ] , AND_OP OR_OP ^ 
equality_expression->@relational_expression , ] , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , AND_OP OR_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ] , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , ] , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ] , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , ] , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , ] , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ] , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , ] , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��559
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ] , OR_OP 
logical_and_expression->@exclusive_or_expression , ] , OR_OP AND_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , OR_OP AND_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , OR_OP ^ AND_OP 
exclusive_or_expression->@equality_expression , ] , OR_OP ^ AND_OP 
equality_expression->@relational_expression , ] , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , OR_OP ^ EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression < shift_expression , ] , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@shift_expression , ] , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression > shift_expression , ] , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
shift_expression->@additive_expression , ] , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@multiplicative_expression , ] , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@cast_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@unary_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@( type_name ) cast_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@postfix_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@INC_OP unary_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@DEC_OP unary_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@unary_operator cast_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF unary_expression , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF ( type_name ) , ] , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression INC_OP , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( ) , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@primary_expression , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression DEC_OP , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@( expression ) , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@CONSTANT , ] , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
****************

״̬��560
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��561
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��562
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��563
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��564
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��565
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , ) 
struct_declaration_list->@struct_declaration , } STRUCT VOID INT 
struct_declaration_list->@struct_declaration_list struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��566
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , ) 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��567
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ) , 
****************

״̬��568
****size: 1 ****
expression->expression , assignment_expression @, ) , 
****************

״̬��569
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��570
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��571
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��572
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��573
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��574
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��575
****size: 1 ****
primary_expression->CONSTANT @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��576
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��577
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��578
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��579
****size: 1 ****
postfix_expression->primary_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��580
****size: 1 ****
cast_expression->unary_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��581
****size: 5 ****
unary_expression->postfix_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��582
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��583
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��584
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��585
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��586
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��587
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��588
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��589
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��590
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��591
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��592
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��593
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��594
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ) , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ) , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ) , ^ AND_OP OR_OP EQ_OP NE_OP 
****************

״̬��595
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ) , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ) , AND_OP OR_OP ^ 
****************

״̬��596
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ) , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ) , OR_OP AND_OP 
****************

״̬��597
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��598
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��599
****size: 49 ****
argument_expression_list->argument_expression_list , @@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��600
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��601
****size: 51 ****
primary_expression->( @@expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��602
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��603
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��604
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��605
****size: 1 ****
unary_expression->INC_OP unary_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��606
****size: 2 ****
primary_expression->( expression @@) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��607
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��608
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��609
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��610
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��611
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��612
****size: 1 ****
unary_expression->unary_operator cast_expression @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��613
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , IDENTIFIER ( 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��614
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, IDENTIFIER ( 
****************

״̬��615
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , ; ( , 
****************

״̬��616
****size: 1 ****
direct_declarator->( direct_declarator ) @, ; ( , 
****************

״̬��617
****size: 1 ****
direct_declarator->direct_declarator ( ) @, ; ( , 
****************

״̬��618
****size: 2 ****
direct_declarator->direct_declarator ( identifier_list @@) , ; ( , 
identifier_list->identifier_list @@, IDENTIFIER , ) , 
****************

״̬��619
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , ; ( , 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��620
****size: 1 ****
struct_declarator_list->struct_declarator_list , declarator @, ; , 
****************

״̬��621
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , IDENTIFIER ( ) , 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��622
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, IDENTIFIER ( ) , 
****************

״̬��623
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , ) , ( 
****************

״̬��624
****size: 1 ****
direct_declarator->( direct_declarator ) @, ) , ( 
****************

״̬��625
****size: 1 ****
direct_declarator->direct_declarator ( ) @, ) , ( 
****************

״̬��626
****size: 2 ****
direct_declarator->direct_declarator ( identifier_list @@) , ) , ( 
identifier_list->identifier_list @@, IDENTIFIER , ) , 
****************

״̬��627
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , ) , ( 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��628
****size: 51 ****
primary_expression->( @@expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��629
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��630
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��631
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��632
****size: 1 ****
unary_expression->INC_OP unary_expression @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��633
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��634
****size: 1 ****
cast_expression->( type_name @@) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��635
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��636
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��637
****size: 3 ****
initializer->{ initializer_list @@} , } , 
initializer->{ initializer_list @@, } , } , 
initializer_list->initializer_list @@, initializer , } , 
****************

״̬��638
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , } , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , } , ^ AND_OP OR_OP 
equality_expression->@relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��639
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��640
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��641
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��642
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��643
****size: 1 ****
cast_expression->unary_expression @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��644
****size: 1 ****
unary_expression->unary_operator cast_expression @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��645
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��646
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��647
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��648
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��649
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
cast_expression->@( type_name ) cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@postfix_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@INC_OP unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@DEC_OP unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@unary_operator cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF unary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
unary_expression->@SIZEOF ( type_name ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
postfix_expression->@postfix_expression INC_OP , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@primary_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
postfix_expression->@postfix_expression DEC_OP , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@( expression ) , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
primary_expression->@CONSTANT , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * 
****************

״̬��650
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��651
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��652
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��653
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP + - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
cast_expression->@( type_name ) cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@postfix_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@INC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@DEC_OP unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@unary_operator cast_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF unary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
unary_expression->@SIZEOF ( type_name ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * + - 
postfix_expression->@postfix_expression INC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@primary_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
postfix_expression->@postfix_expression DEC_OP , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@( expression ) , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
primary_expression->@CONSTANT , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / INC_OP ( DEC_OP * + - 
****************

״̬��654
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��655
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression > shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
shift_expression->@additive_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
additive_expression->@multiplicative_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
cast_expression->@( type_name ) cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@postfix_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@INC_OP unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@DEC_OP unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@unary_operator cast_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF unary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@primary_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@( expression ) , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
primary_expression->@CONSTANT , } , ^ EQ_OP NE_OP AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP 
****************

״̬��656
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , } , ^ AND_OP OR_OP 
equality_expression->@relational_expression , } , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , ^ AND_OP OR_OP EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , } , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , } , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , } , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , } , ^ AND_OP OR_OP < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , } , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ AND_OP OR_OP < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ AND_OP OR_OP < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , } , ^ AND_OP OR_OP < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��657
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , } , AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , AND_OP OR_OP ^ 
exclusive_or_expression->@equality_expression , } , AND_OP OR_OP ^ 
equality_expression->@relational_expression , } , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , AND_OP OR_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , AND_OP OR_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression < shift_expression , } , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@shift_expression , } , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression > shift_expression , } , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
shift_expression->@additive_expression , } , AND_OP OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@multiplicative_expression , } , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , } , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , } , AND_OP OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@cast_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@unary_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
cast_expression->@( type_name ) cast_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@postfix_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@INC_OP unary_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@DEC_OP unary_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@unary_operator cast_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF unary_expression , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , } , AND_OP OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( ) , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@primary_expression , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@( expression ) , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
primary_expression->@CONSTANT , } , AND_OP OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP 
****************

״̬��658
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , } , OR_OP 
logical_and_expression->@exclusive_or_expression , } , OR_OP AND_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , OR_OP AND_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , OR_OP ^ AND_OP 
exclusive_or_expression->@equality_expression , } , OR_OP ^ AND_OP 
equality_expression->@relational_expression , } , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , OR_OP ^ EQ_OP NE_OP AND_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , OR_OP ^ EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression < shift_expression , } , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@shift_expression , } , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression > shift_expression , } , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
shift_expression->@additive_expression , } , OR_OP ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@multiplicative_expression , } , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@cast_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@unary_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
cast_expression->@( type_name ) cast_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@postfix_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@INC_OP unary_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@DEC_OP unary_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@unary_operator cast_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF unary_expression , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@primary_expression , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@( expression ) , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
primary_expression->@CONSTANT , } , OR_OP ^ < % / INC_OP ( DEC_OP * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP 
****************

״̬��659
****size: 53 ****
initializer->{ initializer_list , @@} , ; , 
initializer_list->initializer_list , @@initializer , } , 
initializer->@assignment_expression , } , 
initializer->@{ initializer_list } , } , 
initializer->@{ initializer_list , } , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , } , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , } , ^ AND_OP OR_OP 
equality_expression->@relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��660
****size: 1 ****
initializer->{ initializer_list } @, ; , 
****************

״̬��661
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��662
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��663
****size: 77 ****
selection_statement->SWITCH ( expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��664
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��665
****size: 1 ****
expression_statement->expression ; @, IDENTIFIER ! ( SIZEOF INC_OP & CONSTANT DEC_OP ; + * ~ - 
****************

״̬��666
****size: 1 ****
expression_statement->; @, ) IDENTIFIER ! INC_OP SIZEOF & ( DEC_OP CONSTANT * + - ~ 
****************

״̬��667
****size: 2 ****
expression_statement->expression @@; , ) IDENTIFIER ! INC_OP SIZEOF & ( DEC_OP CONSTANT * + - ~ 
expression->expression @@, assignment_expression , ; , 
****************

״̬��668
****size: 52 ****
iteration_statement->FOR ( expression_statement expression_statement @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->FOR ( expression_statement expression_statement @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��669
****size: 1 ****
compound_statement->{ declaration_list statement_list } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��670
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��671
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��672
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��673
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��674
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��675
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, : 
****************

״̬��676
****size: 1 ****
labeled_statement->CASE assignment_expression : statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��677
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��678
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��679
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��680
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��681
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��682
****size: 1 ****
primary_expression->CONSTANT @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��683
****size: 23 ****
unary_expression->INC_OP @@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��684
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��685
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��686
****size: 1 ****
postfix_expression->primary_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��687
****size: 1 ****
cast_expression->unary_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��688
****size: 5 ****
unary_expression->postfix_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��689
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��690
****size: 25 ****
unary_expression->unary_operator @@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��691
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��692
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��693
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��694
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��695
****size: 1 ****
relational_expression->relational_expression > shift_expression @, : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��696
****size: 1 ****
relational_expression->relational_expression < shift_expression @, : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��697
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��698
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��699
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��700
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , : ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��701
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, : ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , : ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , : ^ AND_OP OR_OP EQ_OP NE_OP 
****************

״̬��702
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, : AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , : AND_OP OR_OP ^ 
****************

״̬��703
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, : OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , : OR_OP AND_OP 
****************

״̬��704
****size: 78 ****
selection_statement->IF ( expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->IF ( expression ) @@statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��705
****size: 77 ****
iteration_statement->WHILE ( expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��706
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��707
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��708
****size: 51 ****
primary_expression->( @@expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��709
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��710
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��711
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��712
****size: 1 ****
unary_expression->INC_OP unary_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��713
****size: 2 ****
primary_expression->( expression @@) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��714
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��715
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��716
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��717
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��718
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��719
****size: 1 ****
unary_expression->unary_operator cast_expression @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��720
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, = ; ( , 
****************

״̬��721
****size: 1 ****
direct_declarator->direct_declarator ( identifier_list ) @, = ; ( , 
****************

״̬��722
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, = ; ( , 
****************

״̬��723
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��724
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��725
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��726
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��727
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��728
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ] , 
****************

״̬��729
****size: 1 ****
expression->expression , assignment_expression @, ] , 
****************

״̬��730
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��731
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��732
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��733
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��734
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��735
****size: 1 ****
primary_expression->CONSTANT @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��736
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��737
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��738
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��739
****size: 1 ****
postfix_expression->primary_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��740
****size: 1 ****
cast_expression->unary_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��741
****size: 5 ****
unary_expression->postfix_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��742
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��743
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��744
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��745
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��746
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��747
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��748
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��749
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��750
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��751
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��752
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��753
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��754
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ] , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , ] , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ] , ^ AND_OP OR_OP EQ_OP NE_OP 
****************

״̬��755
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ] , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] , AND_OP OR_OP ^ 
****************

״̬��756
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ] , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] , OR_OP AND_OP 
****************

״̬��757
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��758
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��759
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��760
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , ) 
struct_declaration_list->struct_declaration_list @@struct_declaration , } STRUCT VOID INT 
struct_declaration->@type_specifier struct_declarator_list ; , } STRUCT VOID INT 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
type_specifier->@INT , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
****************

״̬��761
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, ) 
****************

״̬��762
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��763
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��764
****size: 51 ****
primary_expression->( @@expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��765
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��766
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��767
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��768
****size: 1 ****
unary_expression->INC_OP unary_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��769
****size: 2 ****
primary_expression->( expression @@) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��770
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��771
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��772
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��773
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��774
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��775
****size: 1 ****
unary_expression->unary_operator cast_expression @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��776
****size: 1 ****
argument_expression_list->argument_expression_list , assignment_expression @, ) , 
****************

״̬��777
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��778
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��779
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��780
****size: 1 ****
primary_expression->( expression ) @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��781
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��782
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��783
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��784
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, IDENTIFIER ( 
****************

״̬��785
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, ; ( , 
****************

״̬��786
****size: 1 ****
direct_declarator->direct_declarator ( identifier_list ) @, ; ( , 
****************

״̬��787
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, ; ( , 
****************

״̬��788
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, IDENTIFIER ( ) , 
****************

״̬��789
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, ) , ( 
****************

״̬��790
****size: 1 ****
direct_declarator->direct_declarator ( identifier_list ) @, ) , ( 
****************

״̬��791
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, ) , ( 
****************

״̬��792
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��793
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��794
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��795
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��796
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��797
****size: 53 ****
initializer->{ initializer_list , @@} , } , 
initializer_list->initializer_list , @@initializer , } , 
initializer->@assignment_expression , } , 
initializer->@{ initializer_list } , } , 
initializer->@{ initializer_list , } , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , } , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , } , ^ AND_OP OR_OP 
equality_expression->@relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��798
****size: 1 ****
initializer->{ initializer_list } @, } , 
****************

״̬��799
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, } , 
****************

״̬��800
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��801
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��802
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��803
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��804
****size: 3 ****
postfix_expression->IDENTIFIER @@[ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��805
****size: 1 ****
primary_expression->CONSTANT @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��806
****size: 23 ****
unary_expression->INC_OP @@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��807
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��808
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->SIZEOF @@( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��809
****size: 1 ****
postfix_expression->primary_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��810
****size: 1 ****
cast_expression->unary_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��811
****size: 5 ****
unary_expression->postfix_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->postfix_expression @@INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��812
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��813
****size: 25 ****
unary_expression->unary_operator @@cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��814
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��815
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��816
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��817
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->multiplicative_expression @@% cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@/ cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
multiplicative_expression->multiplicative_expression @@* cast_expression , } , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP % / * 
****************

״̬��818
****size: 1 ****
relational_expression->relational_expression > shift_expression @, } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��819
****size: 1 ****
relational_expression->relational_expression < shift_expression @, } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��820
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��821
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, } , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��822
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��823
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, } , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->relational_expression @@< shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@> shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@LE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , } , ^ EQ_OP NE_OP AND_OP OR_OP < > LE_OP GE_OP 
****************

״̬��824
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, } , ^ AND_OP OR_OP 
equality_expression->equality_expression @@EQ_OP relational_expression , } , ^ AND_OP OR_OP EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , } , ^ AND_OP OR_OP EQ_OP NE_OP 
****************

״̬��825
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, } , AND_OP OR_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , } , AND_OP OR_OP ^ 
****************

״̬��826
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, } , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , } , OR_OP AND_OP 
****************

״̬��827
****size: 1 ****
initializer->{ initializer_list , } @, ; , 
****************

״̬��828
****size: 1 ****
initializer_list->initializer_list , initializer @, } , 
****************

״̬��829
****size: 1 ****
selection_statement->SWITCH ( expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��830
****size: 1 ****
expression_statement->expression ; @, ) IDENTIFIER ! INC_OP SIZEOF & ( DEC_OP CONSTANT * + - ~ 
****************

״̬��831
****size: 77 ****
iteration_statement->FOR ( expression_statement expression_statement ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��832
****size: 2 ****
iteration_statement->FOR ( expression_statement expression_statement expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��833
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��834
****size: 1 ****
cast_expression->( type_name ) cast_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��835
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��836
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��837
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��838
****size: 51 ****
primary_expression->( @@expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��839
****size: 1 ****
unary_expression->DEC_OP unary_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��840
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��841
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��842
****size: 1 ****
unary_expression->INC_OP unary_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��843
****size: 2 ****
primary_expression->( expression @@) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��844
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��845
****size: 1 ****
unary_expression->SIZEOF unary_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��846
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��847
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��848
****size: 52 ****
postfix_expression->postfix_expression ( @@) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��849
****size: 1 ****
unary_expression->unary_operator cast_expression @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��850
****size: 4 ****
labeled_statement->IDENTIFIER @@: statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��851
****size: 1 ****
labeled_statement->DEFAULT @@: statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��852
****size: 1 ****
jump_statement->CONTINUE @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��853
****size: 1 ****
selection_statement->SWITCH @@( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��854
****size: 1 ****
jump_statement->BREAK @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��855
****size: 2 ****
iteration_statement->FOR @@( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->FOR @@( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��856
****size: 1 ****
expression_statement->; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��857
****size: 92 ****
compound_statement->{ @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->{ @@statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->{ @@declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->{ @@declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement_list->@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->@statement_list statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration_list->@declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration_list->@declaration_list declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration->@type_specifier ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��858
****size: 52 ****
jump_statement->RETURN @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->RETURN @@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��859
****size: 49 ****
labeled_statement->CASE @@assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
assignment_expression->@unary_expression = assignment_expression , : 
assignment_expression->@logical_or_expression , : 
unary_expression->@postfix_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , : OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , : OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , : AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , : AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , : ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , : ^ AND_OP OR_OP 
equality_expression->@relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , : ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , : ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , : ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��860
****size: 2 ****
selection_statement->IF @@( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->IF @@( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��861
****size: 1 ****
iteration_statement->WHILE @@( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��862
****size: 1 ****
jump_statement->GOTO @@IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��863
****size: 2 ****
expression_statement->expression @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->expression @@, assignment_expression , ; , 
****************

״̬��864
****size: 1 ****
statement->expression_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��865
****size: 2 ****
selection_statement->IF ( expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->IF ( expression ) statement @@ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��866
****size: 1 ****
statement->compound_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��867
****size: 1 ****
statement->jump_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��868
****size: 1 ****
statement->labeled_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��869
****size: 1 ****
statement->selection_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��870
****size: 1 ****
statement->iteration_statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��871
****size: 1 ****
iteration_statement->WHILE ( expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��872
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��873
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��874
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��875
****size: 1 ****
primary_expression->( expression ) @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��876
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��877
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��878
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��879
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��880
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��881
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��882
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��883
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��884
****size: 51 ****
primary_expression->( @@expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��885
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��886
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��887
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��888
****size: 1 ****
unary_expression->INC_OP unary_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��889
****size: 2 ****
primary_expression->( expression @@) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��890
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��891
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��892
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��893
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��894
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��895
****size: 1 ****
unary_expression->unary_operator cast_expression @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��896
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, ) 
****************

״̬��897
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��898
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��899
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��900
****size: 1 ****
primary_expression->( expression ) @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��901
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��902
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��903
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��904
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��905
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��906
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ] ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��907
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��908
****size: 1 ****
cast_expression->( type_name ) cast_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��909
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��910
****size: 1 ****
initializer->{ initializer_list , } @, } , 
****************

״̬��911
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��912
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@postfix_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression INC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
primary_expression->@IDENTIFIER , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��913
****size: 51 ****
primary_expression->( @@expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��914
****size: 1 ****
unary_expression->DEC_OP unary_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��915
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->@expression , assignment_expression , ] , 
expression->@assignment_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
unary_expression->@postfix_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ] , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ] , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ] , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ] , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��916
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��917
****size: 1 ****
unary_expression->INC_OP unary_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��918
****size: 2 ****
primary_expression->( expression @@) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��919
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->( @@expression ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
type_specifier->@INT , ) 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��920
****size: 1 ****
unary_expression->SIZEOF unary_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��921
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��922
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��923
****size: 52 ****
postfix_expression->postfix_expression ( @@) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@INC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@DEC_OP unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@unary_operator cast_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF unary_expression , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_expression->@SIZEOF ( type_name ) , = ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) AND_OP OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) AND_OP OR_OP , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) ^ AND_OP OR_OP , 
exclusive_or_expression->@equality_expression , ) ^ AND_OP OR_OP , 
equality_expression->@relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression EQ_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
equality_expression->@equality_expression NE_OP relational_expression , ) ^ EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression < shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression > shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression LE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
relational_expression->@relational_expression GE_OP shift_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
shift_expression->@additive_expression , ) ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression + multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
additive_expression->@additive_expression - multiplicative_expression , ) ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@unary_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
cast_expression->@( type_name ) cast_expression , ) ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP , 
****************

״̬��924
****size: 1 ****
unary_expression->unary_operator cast_expression @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��925
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��926
****size: 77 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��927
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��928
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��929
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��930
****size: 1 ****
primary_expression->( expression ) @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��931
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��932
****size: 1 ****
postfix_expression->postfix_expression ( ) @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��933
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��934
****size: 77 ****
labeled_statement->IDENTIFIER : @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��935
****size: 77 ****
labeled_statement->DEFAULT : @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��936
****size: 1 ****
jump_statement->CONTINUE ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��937
****size: 51 ****
selection_statement->SWITCH ( @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��938
****size: 1 ****
jump_statement->BREAK ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��939
****size: 54 ****
iteration_statement->FOR ( @@expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->FOR ( @@expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , IDENTIFIER ! ( SIZEOF INC_OP & CONSTANT DEC_OP ; + * ~ - 
expression_statement->@; , IDENTIFIER ! ( SIZEOF INC_OP & CONSTANT DEC_OP ; + * ~ - 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��940
****size: 1 ****
compound_statement->{ } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��941
****size: 78 ****
compound_statement->{ statement_list @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement_list->statement_list @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��942
****size: 89 ****
compound_statement->{ declaration_list @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->{ declaration_list @@statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
declaration_list->declaration_list @@declaration , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement_list->@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement_list->@statement_list statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
declaration->@type_specifier ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
declaration->@type_specifier init_declarator_list ; , } IDENTIFIER CONTINUE FOR ( & INC_OP SIZEOF CONSTANT DEC_OP ; BREAK RETURN GOTO DEFAULT CASE + * { ! SWITCH ~ - IF WHILE STRUCT VOID INT 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
type_specifier->@INT , ; IDENTIFIER ( 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��943
****size: 1 ****
jump_statement->RETURN ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��944
****size: 2 ****
jump_statement->RETURN expression @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->expression @@, assignment_expression , ; , 
****************

״̬��945
****size: 1 ****
labeled_statement->CASE assignment_expression @@: statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��946
****size: 52 ****
selection_statement->IF ( @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->IF ( @@expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��947
****size: 51 ****
iteration_statement->WHILE ( @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��948
****size: 1 ****
jump_statement->GOTO IDENTIFIER @@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��949
****size: 1 ****
expression_statement->expression ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��950
****size: 77 ****
selection_statement->IF ( expression ) statement ELSE @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��951
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��952
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��953
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��954
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��955
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��956
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��957
****size: 1 ****
primary_expression->( expression ) @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��958
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��959
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��960
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��961
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��962
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��963
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��964
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��965
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��966
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��967
****size: 1 ****
primary_expression->( expression ) @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��968
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��969
****size: 1 ****
postfix_expression->postfix_expression ( ) @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��970
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��971
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��972
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��973
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��974
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, : ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��975
****size: 1 ****
labeled_statement->IDENTIFIER : statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��976
****size: 1 ****
labeled_statement->DEFAULT : statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��977
****size: 2 ****
selection_statement->SWITCH ( expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��978
****size: 54 ****
iteration_statement->FOR ( expression_statement @@expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->FOR ( expression_statement @@expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , ) IDENTIFIER ! INC_OP SIZEOF & ( DEC_OP CONSTANT * + - ~ 
expression_statement->@; , ) IDENTIFIER ! INC_OP SIZEOF & ( DEC_OP CONSTANT * + - ~ 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��979
****size: 1 ****
compound_statement->{ statement_list } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��980
****size: 1 ****
compound_statement->{ declaration_list } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��981
****size: 78 ****
compound_statement->{ declaration_list statement_list @@} , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement_list->statement_list @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��982
****size: 1 ****
jump_statement->RETURN expression ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��983
****size: 77 ****
labeled_statement->CASE assignment_expression : @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��984
****size: 3 ****
selection_statement->IF ( expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->IF ( expression @@) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��985
****size: 2 ****
iteration_statement->WHILE ( expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��986
****size: 1 ****
jump_statement->GOTO IDENTIFIER ; @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��987
****size: 1 ****
selection_statement->IF ( expression ) statement ELSE statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE 
****************

״̬��988
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��989
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��990
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ] , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��991
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��992
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��993
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, } , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP INC_OP ( DEC_OP 
****************

״̬��994
****size: 77 ****
selection_statement->SWITCH ( expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��995
****size: 52 ****
iteration_statement->FOR ( expression_statement expression_statement @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->FOR ( expression_statement expression_statement @@expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ) , 
expression->@assignment_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
unary_expression->@postfix_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ) , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ) , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ) , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ) , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ) , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��996
****size: 1 ****
compound_statement->{ declaration_list statement_list } @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��997
****size: 1 ****
labeled_statement->CASE assignment_expression : statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��998
****size: 78 ****
selection_statement->IF ( expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->IF ( expression ) @@statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��999
****size: 77 ****
iteration_statement->WHILE ( expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��1000
****size: 1 ****
selection_statement->SWITCH ( expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��1001
****size: 77 ****
iteration_statement->FOR ( expression_statement expression_statement ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��1002
****size: 2 ****
iteration_statement->FOR ( expression_statement expression_statement expression @@) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��1003
****size: 2 ****
selection_statement->IF ( expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->IF ( expression ) statement @@ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��1004
****size: 1 ****
iteration_statement->WHILE ( expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��1005
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��1006
****size: 77 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��1007
****size: 77 ****
selection_statement->IF ( expression ) statement ELSE @@statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@labeled_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@compound_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@expression_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@selection_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@iteration_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
statement->@jump_statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@IDENTIFIER : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@CASE assignment_expression : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
labeled_statement->@DEFAULT : statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
compound_statement->@{ declaration_list statement_list } , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression_statement->@; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
selection_statement->@SWITCH ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@WHILE ( expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@GOTO IDENTIFIER ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@RETURN expression ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@CONTINUE ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
jump_statement->@BREAK ; , } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
expression->@expression , assignment_expression , ; , 
expression->@assignment_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
unary_expression->@postfix_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@INC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@DEC_OP unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@unary_operator cast_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF unary_expression , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_expression->@SIZEOF ( type_name ) , = ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
unary_operator->@& , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@! , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@* , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@+ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@- , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
unary_operator->@~ , ! SIZEOF INC_OP & ( IDENTIFIER CONSTANT DEC_OP + * ~ - 
logical_and_expression->@exclusive_or_expression , ; , AND_OP OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , AND_OP OR_OP 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , ^ AND_OP OR_OP 
exclusive_or_expression->@equality_expression , ; , ^ AND_OP OR_OP 
equality_expression->@relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression EQ_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , ^ EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression < shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression > shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
shift_expression->@additive_expression , ; , ^ < > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , ^ < + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@unary_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
cast_expression->@( type_name ) cast_expression , ; , ^ < % / * + - > LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP 
****************

״̬��1008
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬��1009
****size: 1 ****
selection_statement->IF ( expression ) statement ELSE statement @, } CONTINUE FOR IDENTIFIER INC_OP SIZEOF & ( DEC_OP CONSTANT ; BREAK RETURN GOTO DEFAULT * + CASE { SWITCH ! - ~ IF WHILE ELSE 
****************

״̬  	$	DEC_OP	IDENTIFIER	INT	DEFAULT	CONSTANT	INC_OP	(	)	CONTINUE	[	]	.	SWITCH	,	SIZEOF	&	*	+	-	BREAK	~	>	!	/	%	<	LE_OP	ELSE	FOR	GE_OP	EQ_OP	NE_OP	^	AND_OP	OR_OP	=	}	;	{	VOID	RETURN	STRUCT	:	CASE	IF	WHILE	GOTO	primary_expression	unary_expression	assignment_expression	translation_unit	expression	struct_declaration	postfix_expression	expression_statement	argument_expression_list	type_name	cast_expression	unary_operator	multiplicative_expression	statement	additive_expression	shift_expression	direct_declarator	compound_statement	relational_expression	equality_expression	exclusive_or_expression	logical_and_expression	logical_or_expression	declaration	init_declarator	struct_declarator_list	statement_list	function_definition	type_specifier	init_declarator_list	declaration_list	declarator	initializer	identifier_list	struct_or_union_specifier	jump_statement	struct_declaration_list	parameter_list	external_declaration	parameter_declaration	initializer_list	labeled_statement	selection_statement	iteration_statement	argumented_translation_unit	
״̬0	-1	-1	1	2	-1	-1	-1	3	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	4	-1	5	-1	-1	-1	-1	-1	-1	-1	-1	6	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	7	-1	-1	-1	-1	-1	-1	8	-1	-1	-1	9	10	-1	-1	11	-1	-1	12	-1	-1	-1	13	-1	-1	-1	-1	-1	-1	
״̬1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	14	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬2	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬3	-1	-1	15	-1	-1	-1	-1	16	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	17	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬4	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬5	-1	-1	18	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	19	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬6	-1	-1	1	2	-1	-1	-1	3	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	4	-1	5	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	7	-1	-1	-1	-1	-1	-1	8	-1	-1	-1	9	10	-1	-1	11	-1	-1	12	-1	-1	-1	20	-1	-1	-1	-1	-1	-1	
״̬7	-1	-1	-1	-1	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬8	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬9	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬10	-1	-1	22	-1	-1	-1	-1	23	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	-1	-1	-1	26	-1	-1	-1	-1	27	-1	28	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬11	-1	-1	-1	2	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	29	4	-1	5	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	30	-1	-1	-1	-1	-1	31	-1	-1	-1	-1	32	-1	33	-1	-1	-1	12	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬12	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬13	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬14	-1	34	35	-1	-1	36	37	38	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	47	48	-1	-1	-1	49	-1	-1	-1	50	51	52	-1	53	54	-1	-1	55	56	57	58	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬15	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬16	-1	-1	15	-1	-1	-1	-1	16	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	61	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬17	-1	-1	-1	-1	-1	-1	-1	62	63	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬18	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	64	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬19	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	71	-1	-1	-1	-1	-1	-1	-1	-1	
״̬20	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬21	-1	-1	72	73	-1	-1	-1	-1	74	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	76	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	77	-1	-1	-1	-1	78	79	-1	-1	80	-1	81	-1	-1	-1	-1	-1	
״̬22	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	82	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬23	-1	-1	15	-1	-1	-1	-1	16	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	83	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬25	-1	-1	-1	-1	-1	-1	-1	84	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬27	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	85	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	86	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬28	-1	-1	-1	2	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	87	-1	-1	29	4	-1	5	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	88	-1	-1	-1	-1	-1	31	-1	-1	-1	-1	32	-1	89	-1	-1	-1	12	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬29	-1	90	91	2	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	101	102	103	4	104	5	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	118	119	120	-1	121	122	123	124	125	126	127	-1	-1	128	-1	129	-1	130	-1	-1	-1	12	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬30	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬31	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬32	-1	-1	135	-1	-1	-1	-1	136	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	137	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	138	-1	-1	-1	-1	-1	-1	-1	26	-1	-1	-1	-1	139	-1	140	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬33	-1	-1	-1	2	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	29	4	-1	5	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	141	-1	-1	-1	-1	-1	142	-1	-1	-1	-1	32	-1	-1	-1	-1	-1	12	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬34	-1	34	35	-1	-1	36	37	143	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	144	-1	-1	-1	-1	49	-1	-1	-1	-1	51	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬35	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	145	-1	146	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬36	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬37	-1	34	35	-1	-1	36	37	143	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	147	-1	-1	-1	-1	49	-1	-1	-1	-1	51	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬38	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	160	-1	161	-1	-1	162	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬39	-1	34	35	-1	-1	36	37	175	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	176	-1	-1	-1	-1	49	-1	-1	-1	-1	51	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬40	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬41	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬42	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬43	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬44	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬46	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	177	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬48	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	178	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬49	-1	179	-1	-1	-1	-1	180	181	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬50	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬51	-1	34	35	-1	-1	36	37	182	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	183	-1	-1	-1	-1	49	-1	-1	-1	184	51	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬52	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	185	-1	-1	-1	-1	-1	-1	186	187	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬53	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	188	189	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬54	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬55	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	190	-1	-1	-1	191	192	-1	-1	193	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬56	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	194	195	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬57	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	196	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬58	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	197	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	198	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬60	-1	34	35	-1	-1	36	37	38	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	47	199	-1	-1	-1	49	-1	-1	-1	50	51	52	-1	53	54	-1	-1	55	56	57	58	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬61	-1	-1	-1	-1	-1	-1	-1	62	200	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬62	-1	-1	72	73	-1	-1	-1	-1	201	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	76	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	77	-1	-1	-1	-1	202	79	-1	-1	203	-1	81	-1	-1	-1	-1	-1	
״̬63	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬64	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	204	-1	-1	-1	-1	-1	-1	-1	-1	
״̬65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬66	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬67	-1	-1	205	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	206	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬69	-1	-1	207	-1	-1	-1	-1	208	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	209	-1	-1	-1	-1	-1	-1	-1	-1	210	-1	-1	-1	-1	-1	211	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬71	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	212	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬72	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬74	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬75	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬76	-1	-1	214	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	215	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬77	-1	-1	216	-1	-1	-1	-1	217	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	218	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	219	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬78	-1	-1	-1	-1	-1	-1	-1	-1	220	-1	-1	-1	-1	-1	221	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬79	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬80	-1	-1	-1	-1	-1	-1	-1	-1	222	-1	-1	-1	-1	-1	223	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬81	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬82	-1	34	35	-1	-1	36	37	38	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	47	224	-1	-1	-1	49	-1	-1	-1	50	51	52	-1	53	54	-1	-1	55	56	57	58	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬83	-1	-1	-1	-1	-1	-1	-1	62	225	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬84	-1	-1	72	73	-1	-1	-1	-1	226	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	76	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	77	-1	-1	-1	-1	227	79	-1	-1	228	-1	81	-1	-1	-1	-1	-1	
״̬85	-1	-1	135	-1	-1	-1	-1	136	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	138	-1	-1	-1	-1	-1	-1	-1	229	-1	-1	-1	-1	-1	-1	140	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬86	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬87	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	231	-1	-1	-1	-1	-1	-1	-1	-1	109	110	232	-1	-1	-1	113	-1	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	233	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬88	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬89	-1	-1	-1	2	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	29	4	-1	5	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	234	-1	-1	-1	-1	-1	142	-1	-1	-1	-1	32	-1	-1	-1	-1	-1	12	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬90	-1	90	230	-1	-1	93	94	235	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	236	-1	-1	-1	-1	113	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬91	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	237	-1	238	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	239	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬92	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	240	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬93	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬94	-1	90	230	-1	-1	93	94	235	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	241	-1	-1	-1	-1	113	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬95	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	242	-1	161	-1	-1	243	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬96	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	244	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬97	-1	-1	-1	-1	-1	-1	-1	245	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬98	-1	90	230	-1	-1	93	94	246	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	247	-1	-1	-1	-1	113	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬99	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	248	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬100	-1	-1	-1	-1	-1	-1	-1	249	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬101	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬102	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬103	-1	90	91	2	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	250	102	103	4	104	5	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	118	119	120	-1	121	122	123	124	125	126	127	-1	-1	251	-1	129	-1	252	-1	-1	-1	12	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬104	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	253	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	111	-1	254	-1	113	-1	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬105	-1	255	256	-1	-1	257	258	259	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	262	263	-1	-1	-1	264	-1	-1	-1	265	266	267	-1	268	269	-1	-1	270	271	272	273	274	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬106	-1	-1	-1	-1	-1	-1	-1	275	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬107	-1	-1	-1	-1	-1	-1	-1	276	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬108	-1	-1	277	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬109	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬110	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	278	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬112	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	279	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	280	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬113	-1	281	-1	-1	-1	-1	282	283	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬114	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬115	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬116	-1	90	230	-1	-1	93	94	284	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	285	-1	-1	-1	-1	113	-1	-1	-1	286	116	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬117	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	287	-1	-1	-1	-1	-1	-1	288	289	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬118	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬119	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	290	291	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬120	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬121	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬122	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	292	-1	-1	-1	293	294	-1	-1	295	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬123	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	296	297	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬124	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬125	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	299	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	300	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬127	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬128	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	301	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	302	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬129	-1	-1	135	-1	-1	-1	-1	136	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	303	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	138	-1	-1	-1	-1	-1	-1	-1	26	-1	-1	-1	-1	304	-1	140	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬130	-1	90	91	2	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	305	102	103	4	104	5	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	118	119	120	-1	121	122	123	124	125	126	306	-1	-1	307	-1	129	-1	-1	-1	-1	-1	12	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬131	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬132	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬133	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬134	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬135	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	308	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬136	-1	-1	15	-1	-1	-1	-1	16	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	309	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬137	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬138	-1	-1	-1	-1	-1	-1	-1	310	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬139	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	85	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	311	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬140	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	87	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬141	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬142	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬143	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	160	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬144	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬145	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	321	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬146	-1	-1	333	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬147	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬148	-1	148	149	-1	-1	151	152	334	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	335	-1	-1	-1	-1	161	-1	-1	-1	-1	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬149	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	336	-1	337	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬150	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬151	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬152	-1	148	149	-1	-1	151	152	334	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	338	-1	-1	-1	-1	161	-1	-1	-1	-1	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬153	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	339	-1	161	-1	-1	340	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬154	-1	148	149	-1	-1	151	152	341	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	342	-1	-1	-1	-1	161	-1	-1	-1	-1	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬155	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬156	-1	-1	343	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	344	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬157	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬158	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	345	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬159	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬160	-1	-1	-1	-1	-1	-1	-1	-1	346	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬161	-1	348	-1	-1	-1	-1	349	350	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬162	-1	-1	-1	-1	-1	-1	-1	-1	351	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬163	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬164	-1	148	149	-1	-1	151	152	352	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	353	-1	-1	-1	-1	161	-1	-1	-1	354	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬165	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	355	-1	-1	-1	-1	-1	-1	356	357	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬166	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	358	359	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬167	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬168	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	360	-1	-1	-1	361	362	-1	-1	363	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬169	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	364	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬170	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	366	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬171	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	367	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	368	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬173	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬175	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	160	-1	161	-1	-1	369	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬176	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬177	-1	34	35	-1	-1	36	37	38	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	47	370	-1	-1	-1	49	-1	-1	-1	50	51	52	-1	53	54	-1	-1	55	56	57	58	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬178	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬179	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬180	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬181	-1	148	149	-1	-1	151	152	153	371	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	373	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬182	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	160	-1	161	-1	-1	374	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬183	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬184	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬185	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	384	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬186	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	386	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬187	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	387	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬188	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	388	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬189	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	389	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬190	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	390	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬191	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	391	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬192	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	392	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬193	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	393	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬194	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	54	-1	-1	394	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬195	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	54	-1	-1	395	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬196	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	54	-1	-1	55	396	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬197	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	54	-1	-1	55	56	397	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬198	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	50	385	52	-1	53	54	-1	-1	55	56	57	398	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬199	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	399	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬200	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬201	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬202	-1	-1	-1	-1	-1	-1	-1	-1	400	-1	-1	-1	-1	-1	221	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬203	-1	-1	-1	-1	-1	-1	-1	-1	401	-1	-1	-1	-1	-1	223	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬204	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	402	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬205	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	403	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬206	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	404	-1	-1	-1	-1	-1	-1	-1	-1	
״̬207	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	405	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬208	-1	-1	15	-1	-1	-1	-1	16	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	406	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬209	-1	-1	-1	-1	-1	-1	-1	407	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬210	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	408	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	409	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬211	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬212	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬214	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	410	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬215	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	411	-1	-1	-1	-1	-1	-1	-1	-1	
״̬216	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	412	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬217	-1	-1	15	-1	-1	-1	-1	16	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	413	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬218	-1	-1	-1	-1	-1	-1	-1	414	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬219	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬220	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬221	-1	-1	415	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬222	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬223	-1	-1	-1	73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	76	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	77	-1	-1	-1	-1	-1	79	-1	-1	-1	-1	416	-1	-1	-1	-1	-1	
״̬224	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	417	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬225	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬226	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬227	-1	-1	-1	-1	-1	-1	-1	-1	418	-1	-1	-1	-1	-1	221	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬228	-1	-1	-1	-1	-1	-1	-1	-1	419	-1	-1	-1	-1	-1	223	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬229	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬230	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	237	-1	238	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬231	-1	420	421	-1	-1	422	423	424	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	426	-1	-1	-1	-1	-1	-1	-1	-1	427	428	429	-1	-1	-1	430	-1	-1	-1	431	432	433	-1	434	435	-1	-1	436	437	438	439	440	-1	-1	-1	-1	-1	-1	-1	-1	-1	441	-1	-1	-1	-1	-1	-1	-1	442	-1	-1	-1	-1	
״̬232	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬233	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬234	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬235	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	242	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬236	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬237	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	443	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬238	-1	-1	444	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬239	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	445	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬240	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	446	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬241	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬242	-1	-1	-1	-1	-1	-1	-1	-1	447	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬243	-1	-1	-1	-1	-1	-1	-1	-1	448	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬244	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬245	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	449	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬246	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	242	-1	161	-1	-1	450	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬247	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬248	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬249	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	451	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	111	-1	452	-1	113	453	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬250	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬251	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	454	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	302	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬252	-1	90	91	2	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	455	102	103	4	104	5	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	118	119	120	-1	121	122	123	124	125	126	306	-1	-1	456	-1	129	-1	-1	-1	-1	-1	12	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬253	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬254	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	279	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	457	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬255	-1	255	256	-1	-1	257	258	458	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	459	-1	-1	-1	-1	264	-1	-1	-1	-1	266	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬256	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	460	-1	461	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬257	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬258	-1	255	256	-1	-1	257	258	458	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	462	-1	-1	-1	-1	264	-1	-1	-1	-1	266	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬259	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	463	-1	161	-1	-1	464	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬260	-1	255	256	-1	-1	257	258	465	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	466	-1	-1	-1	-1	264	-1	-1	-1	-1	266	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬261	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬262	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	467	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬263	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	468	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬264	-1	469	-1	-1	-1	-1	470	471	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬265	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬266	-1	255	256	-1	-1	257	258	472	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	473	-1	-1	-1	-1	264	-1	-1	-1	474	266	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬267	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	475	-1	-1	-1	-1	-1	-1	476	477	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬268	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	478	479	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬269	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬270	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	480	-1	-1	-1	481	482	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬271	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	484	485	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬272	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	486	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬273	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	487	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬274	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	488	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬275	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	489	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬276	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	490	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬277	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	491	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬278	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	492	-1	-1	-1	113	-1	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬279	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	493	-1	-1	-1	113	-1	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬280	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬281	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬282	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬283	-1	148	149	-1	-1	151	152	153	494	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	495	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬284	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	242	-1	161	-1	-1	496	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬285	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬286	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬287	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	506	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬288	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	508	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬289	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	509	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬290	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	510	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬291	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	511	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬292	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	512	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬293	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	513	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬294	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	514	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬295	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	515	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬296	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	120	-1	-1	516	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬297	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	120	-1	-1	517	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬298	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	120	-1	-1	122	518	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬299	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	120	-1	-1	122	123	519	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬300	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	115	507	117	-1	119	120	-1	-1	122	123	124	520	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬301	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬302	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬303	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬304	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	85	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	521	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬305	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬306	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬307	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	522	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	302	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬308	-1	34	35	-1	-1	36	37	38	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	47	523	-1	-1	-1	49	-1	-1	-1	50	51	52	-1	53	54	-1	-1	55	56	57	58	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬309	-1	-1	-1	-1	-1	-1	-1	62	524	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬310	-1	-1	72	73	-1	-1	-1	-1	525	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	76	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	77	-1	-1	-1	-1	526	79	-1	-1	527	-1	81	-1	-1	-1	-1	-1	
״̬311	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬312	-1	312	313	-1	-1	314	315	528	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	529	-1	-1	-1	-1	322	-1	-1	-1	-1	324	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬313	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	530	-1	531	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬314	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬315	-1	312	313	-1	-1	314	315	528	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	532	-1	-1	-1	-1	322	-1	-1	-1	-1	324	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬316	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	533	-1	161	-1	-1	534	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬317	-1	312	313	-1	-1	314	315	535	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	536	-1	-1	-1	-1	322	-1	-1	-1	-1	324	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬318	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬319	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	537	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬320	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬321	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	538	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬322	-1	540	-1	-1	-1	-1	541	542	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬323	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬324	-1	312	313	-1	-1	314	315	543	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	544	-1	-1	-1	-1	322	-1	-1	-1	545	324	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬325	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	546	-1	-1	-1	-1	-1	-1	547	548	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬326	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	549	550	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬328	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	551	-1	-1	-1	552	553	-1	-1	554	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬329	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	555	556	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬330	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	557	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬331	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	558	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	559	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬333	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬334	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	339	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬335	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬336	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	560	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬337	-1	-1	561	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬338	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬339	-1	-1	-1	-1	-1	-1	-1	-1	562	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬340	-1	-1	-1	-1	-1	-1	-1	-1	563	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬341	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	339	-1	161	-1	-1	564	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬342	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬343	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	565	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬344	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	566	-1	-1	-1	-1	-1	-1	-1	-1	
״̬345	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	567	-1	-1	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬346	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬347	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	568	-1	-1	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬348	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬349	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬350	-1	148	149	-1	-1	151	152	153	569	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	570	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬351	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	571	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬352	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	339	-1	161	-1	-1	572	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬353	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬354	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬355	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	582	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬356	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	584	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬357	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	585	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬358	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	586	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬359	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬360	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	588	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬361	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	589	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬362	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	590	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬363	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	591	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬364	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	167	-1	-1	592	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬365	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	167	-1	-1	593	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬366	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	167	-1	-1	168	594	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬367	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	167	-1	-1	168	169	595	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬368	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	163	583	165	-1	166	167	-1	-1	168	169	170	596	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬369	-1	-1	-1	-1	-1	-1	-1	-1	597	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬370	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬371	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬372	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬373	-1	-1	-1	-1	-1	-1	-1	-1	598	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬374	-1	-1	-1	-1	-1	-1	-1	-1	600	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬375	-1	375	376	-1	-1	377	378	601	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	602	-1	-1	-1	-1	383	-1	-1	-1	-1	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬376	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	603	-1	604	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬377	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬378	-1	375	376	-1	-1	377	378	601	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	605	-1	-1	-1	-1	383	-1	-1	-1	-1	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬379	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	606	-1	161	-1	-1	162	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬380	-1	375	376	-1	-1	377	378	607	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	608	-1	-1	-1	-1	383	-1	-1	-1	-1	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬381	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬382	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬383	-1	609	-1	-1	-1	-1	610	611	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬384	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬385	-1	375	376	-1	-1	377	378	379	-1	-1	-1	-1	-1	-1	-1	380	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	382	-1	-1	-1	-1	383	-1	-1	-1	612	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬386	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬387	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬388	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	185	-1	-1	-1	-1	-1	-1	186	187	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬389	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	185	-1	-1	-1	-1	-1	-1	186	187	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬390	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬391	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬392	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬393	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬394	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	190	-1	-1	-1	191	192	-1	-1	193	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬395	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	190	-1	-1	-1	191	192	-1	-1	193	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬396	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	194	195	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬397	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	196	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬398	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	197	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬399	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬400	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬401	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬402	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬403	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	613	-1	-1	-1	-1	-1	-1	-1	-1	
״̬404	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	614	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬405	-1	34	35	-1	-1	36	37	38	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	47	615	-1	-1	-1	49	-1	-1	-1	50	51	52	-1	53	54	-1	-1	55	56	57	58	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬406	-1	-1	-1	-1	-1	-1	-1	62	616	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬407	-1	-1	72	73	-1	-1	-1	-1	617	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	76	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	77	-1	-1	-1	-1	618	79	-1	-1	619	-1	81	-1	-1	-1	-1	-1	
״̬408	-1	-1	207	-1	-1	-1	-1	208	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	209	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	620	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬409	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬410	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	621	-1	-1	-1	-1	-1	-1	-1	-1	
״̬411	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	622	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬412	-1	34	35	-1	-1	36	37	38	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	47	623	-1	-1	-1	49	-1	-1	-1	50	51	52	-1	53	54	-1	-1	55	56	57	58	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬413	-1	-1	-1	-1	-1	-1	-1	62	624	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬414	-1	-1	72	73	-1	-1	-1	-1	625	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	76	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	77	-1	-1	-1	-1	626	79	-1	-1	627	-1	81	-1	-1	-1	-1	-1	
״̬415	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬416	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬417	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬418	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬419	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬420	-1	420	421	-1	-1	422	423	628	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	427	629	-1	-1	-1	-1	430	-1	-1	-1	-1	432	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬421	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	630	-1	631	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬422	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬423	-1	420	421	-1	-1	422	423	628	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	427	632	-1	-1	-1	-1	430	-1	-1	-1	-1	432	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬424	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	633	-1	161	-1	-1	634	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬425	-1	420	421	-1	-1	422	423	635	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	427	636	-1	-1	-1	-1	430	-1	-1	-1	-1	432	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬426	-1	420	421	-1	-1	422	423	424	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	426	-1	-1	-1	-1	-1	-1	-1	-1	427	428	429	-1	-1	-1	430	-1	-1	-1	431	432	433	-1	434	435	-1	-1	436	437	438	439	440	-1	-1	-1	-1	-1	-1	-1	-1	-1	441	-1	-1	-1	-1	-1	-1	-1	637	-1	-1	-1	-1	
״̬427	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬428	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	638	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬429	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬430	-1	639	-1	-1	-1	-1	640	641	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬431	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬432	-1	420	421	-1	-1	422	423	642	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	427	643	-1	-1	-1	-1	430	-1	-1	-1	644	432	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬433	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	645	-1	-1	-1	-1	-1	-1	646	647	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬434	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	648	649	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬435	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬436	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	650	-1	-1	-1	651	652	-1	-1	653	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬437	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	654	655	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬438	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	656	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬439	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	657	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬440	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	658	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬441	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	659	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	660	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬443	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	661	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬444	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬445	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬446	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬447	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬448	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	662	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬449	-1	-1	-1	-1	-1	-1	-1	-1	663	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬450	-1	-1	-1	-1	-1	-1	-1	-1	664	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬451	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬452	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	279	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	665	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬453	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	666	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	111	-1	667	-1	113	668	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬454	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬455	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬456	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	669	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	302	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬457	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬458	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	463	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬459	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬460	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	670	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬461	-1	-1	671	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬462	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬463	-1	-1	-1	-1	-1	-1	-1	-1	672	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬464	-1	-1	-1	-1	-1	-1	-1	-1	673	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬465	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	463	-1	161	-1	-1	674	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬466	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬467	-1	255	256	-1	-1	257	258	259	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	262	675	-1	-1	-1	264	-1	-1	-1	265	266	267	-1	268	269	-1	-1	270	271	272	273	274	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬468	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	676	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬469	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬470	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬471	-1	148	149	-1	-1	151	152	153	677	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	678	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬472	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	463	-1	161	-1	-1	679	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬473	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬474	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬475	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	689	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬476	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	691	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬477	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	692	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬478	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	693	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬479	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	694	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬480	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	695	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬481	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	696	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬482	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	697	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬483	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	698	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬484	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	269	-1	-1	699	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬485	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	269	-1	-1	700	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬486	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	269	-1	-1	270	701	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬487	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	269	-1	-1	270	271	702	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬488	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	265	690	267	-1	268	269	-1	-1	270	271	272	703	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬489	-1	-1	-1	-1	-1	-1	-1	-1	704	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬490	-1	-1	-1	-1	-1	-1	-1	-1	705	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬491	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬492	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬493	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬494	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬495	-1	-1	-1	-1	-1	-1	-1	-1	706	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬496	-1	-1	-1	-1	-1	-1	-1	-1	707	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬497	-1	497	498	-1	-1	499	500	708	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	709	-1	-1	-1	-1	505	-1	-1	-1	-1	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬498	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	710	-1	711	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬499	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬500	-1	497	498	-1	-1	499	500	708	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	712	-1	-1	-1	-1	505	-1	-1	-1	-1	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬501	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	713	-1	161	-1	-1	243	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬502	-1	497	498	-1	-1	499	500	714	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	715	-1	-1	-1	-1	505	-1	-1	-1	-1	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬503	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬504	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬505	-1	716	-1	-1	-1	-1	717	718	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬506	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬507	-1	497	498	-1	-1	499	500	501	-1	-1	-1	-1	-1	-1	-1	502	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	504	-1	-1	-1	-1	505	-1	-1	-1	719	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬508	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬509	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬510	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	287	-1	-1	-1	-1	-1	-1	288	289	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬511	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	287	-1	-1	-1	-1	-1	-1	288	289	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬512	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬513	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬514	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬515	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬516	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	292	-1	-1	-1	293	294	-1	-1	295	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬517	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	292	-1	-1	-1	293	294	-1	-1	295	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬518	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	296	297	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬519	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬520	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	299	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬521	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬522	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬523	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬524	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬525	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬526	-1	-1	-1	-1	-1	-1	-1	-1	721	-1	-1	-1	-1	-1	221	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬527	-1	-1	-1	-1	-1	-1	-1	-1	722	-1	-1	-1	-1	-1	223	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬528	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	533	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬529	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬530	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	723	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬531	-1	-1	724	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬532	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬533	-1	-1	-1	-1	-1	-1	-1	-1	725	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬534	-1	-1	-1	-1	-1	-1	-1	-1	726	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬535	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	533	-1	161	-1	-1	727	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬536	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬537	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	728	-1	-1	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬538	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬539	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	729	-1	-1	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬540	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬541	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬542	-1	148	149	-1	-1	151	152	153	730	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	731	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬543	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	533	-1	161	-1	-1	732	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬544	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬545	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬546	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	742	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬547	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	744	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬548	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	745	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬549	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	746	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬550	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	747	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬551	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	748	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬552	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	749	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬553	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	750	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬554	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	751	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬555	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	327	-1	-1	752	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬556	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	327	-1	-1	753	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬557	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	327	-1	-1	328	754	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬558	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	327	-1	-1	328	329	755	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬559	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	323	743	325	-1	326	327	-1	-1	328	329	330	756	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬560	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	757	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬561	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬562	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬563	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	758	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬564	-1	-1	-1	-1	-1	-1	-1	-1	759	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬565	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	760	-1	-1	-1	-1	-1	-1	-1	-1	
״̬566	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	761	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬567	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬568	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬569	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬570	-1	-1	-1	-1	-1	-1	-1	-1	762	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬571	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬572	-1	-1	-1	-1	-1	-1	-1	-1	763	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬573	-1	573	574	-1	-1	575	576	764	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	765	-1	-1	-1	-1	581	-1	-1	-1	-1	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬574	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	766	-1	767	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬575	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬576	-1	573	574	-1	-1	575	576	764	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	768	-1	-1	-1	-1	581	-1	-1	-1	-1	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬577	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	769	-1	161	-1	-1	340	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬578	-1	573	574	-1	-1	575	576	770	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	771	-1	-1	-1	-1	581	-1	-1	-1	-1	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬579	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬580	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬581	-1	772	-1	-1	-1	-1	773	774	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬582	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬583	-1	573	574	-1	-1	575	576	577	-1	-1	-1	-1	-1	-1	-1	578	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	579	580	-1	-1	-1	-1	581	-1	-1	-1	775	583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬584	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬585	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬586	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	355	-1	-1	-1	-1	-1	-1	356	357	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	355	-1	-1	-1	-1	-1	-1	356	357	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬588	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬589	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬590	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬591	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬592	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	360	-1	-1	-1	361	362	-1	-1	363	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬593	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	360	-1	-1	-1	361	362	-1	-1	363	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬594	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	364	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬595	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	366	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬596	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	367	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬597	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬598	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬599	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	776	-1	-1	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬600	-1	34	35	-1	-1	36	37	182	-1	-1	-1	-1	-1	-1	-1	39	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	183	-1	-1	-1	-1	49	-1	-1	-1	777	51	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬601	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	606	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬602	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬603	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	778	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬604	-1	-1	779	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬605	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬606	-1	-1	-1	-1	-1	-1	-1	-1	780	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬607	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	606	-1	161	-1	-1	781	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬608	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬609	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬610	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬611	-1	148	149	-1	-1	151	152	153	782	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	783	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬612	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬613	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	784	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬614	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬615	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	785	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬616	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬617	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬618	-1	-1	-1	-1	-1	-1	-1	-1	786	-1	-1	-1	-1	-1	221	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬619	-1	-1	-1	-1	-1	-1	-1	-1	787	-1	-1	-1	-1	-1	223	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬620	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬621	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	788	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬622	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬623	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	789	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬624	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬625	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬626	-1	-1	-1	-1	-1	-1	-1	-1	790	-1	-1	-1	-1	-1	221	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬627	-1	-1	-1	-1	-1	-1	-1	-1	791	-1	-1	-1	-1	-1	223	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬628	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	633	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬629	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬630	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	792	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬631	-1	-1	793	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬632	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬633	-1	-1	-1	-1	-1	-1	-1	-1	794	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬634	-1	-1	-1	-1	-1	-1	-1	-1	795	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬635	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	633	-1	161	-1	-1	796	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬636	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬637	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	797	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	798	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬638	-1	420	421	-1	-1	422	423	424	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	427	428	799	-1	-1	-1	430	-1	-1	-1	431	432	433	-1	434	435	-1	-1	436	437	438	439	440	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬639	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬640	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬641	-1	148	149	-1	-1	151	152	153	800	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	801	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬642	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	633	-1	161	-1	-1	802	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬643	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬644	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬645	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	812	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬646	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	814	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬647	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	815	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬648	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	816	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬649	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	817	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬650	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	818	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬651	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	819	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬652	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	820	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬653	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	821	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬654	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	435	-1	-1	822	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬655	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	435	-1	-1	823	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬656	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	435	-1	-1	436	824	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬657	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	435	-1	-1	436	437	825	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬658	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	431	813	433	-1	434	435	-1	-1	436	437	438	826	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬659	-1	420	421	-1	-1	422	423	424	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	827	-1	426	-1	-1	-1	-1	-1	-1	-1	-1	427	428	429	-1	-1	-1	430	-1	-1	-1	431	432	433	-1	434	435	-1	-1	436	437	438	439	440	-1	-1	-1	-1	-1	-1	-1	-1	-1	828	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬660	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬661	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬662	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬663	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	829	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬664	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬665	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬666	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬667	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	279	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	830	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬668	-1	148	149	-1	-1	151	152	153	831	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	832	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬669	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬670	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	833	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬671	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬672	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬673	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	834	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬674	-1	-1	-1	-1	-1	-1	-1	-1	835	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬675	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬676	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬677	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬678	-1	-1	-1	-1	-1	-1	-1	-1	836	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬679	-1	-1	-1	-1	-1	-1	-1	-1	837	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬680	-1	680	681	-1	-1	682	683	838	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	839	-1	-1	-1	-1	688	-1	-1	-1	-1	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬681	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	840	-1	841	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬682	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬683	-1	680	681	-1	-1	682	683	838	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	842	-1	-1	-1	-1	688	-1	-1	-1	-1	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬684	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	843	-1	161	-1	-1	464	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬685	-1	680	681	-1	-1	682	683	844	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	845	-1	-1	-1	-1	688	-1	-1	-1	-1	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬686	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬687	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬688	-1	846	-1	-1	-1	-1	847	848	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬689	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬690	-1	680	681	-1	-1	682	683	684	-1	-1	-1	-1	-1	-1	-1	685	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	687	-1	-1	-1	-1	688	-1	-1	-1	849	690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬691	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬692	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬693	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	475	-1	-1	-1	-1	-1	-1	476	477	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬694	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	475	-1	-1	-1	-1	-1	-1	476	477	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬695	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬696	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬697	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬698	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬699	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	480	-1	-1	-1	481	482	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬700	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	480	-1	-1	-1	481	482	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬701	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	484	485	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬702	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	486	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬703	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	487	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬704	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	865	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬705	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	871	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬706	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬707	-1	90	230	-1	-1	93	94	284	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	285	-1	-1	-1	-1	113	-1	-1	-1	872	116	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬708	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	713	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬709	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬710	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	873	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬711	-1	-1	874	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬712	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬713	-1	-1	-1	-1	-1	-1	-1	-1	875	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬714	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	713	-1	161	-1	-1	876	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬715	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬716	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬717	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬718	-1	148	149	-1	-1	151	152	153	877	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	878	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬719	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬720	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬721	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬722	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬723	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	879	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬724	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬725	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬726	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	880	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬727	-1	-1	-1	-1	-1	-1	-1	-1	881	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬728	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬729	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬730	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬731	-1	-1	-1	-1	-1	-1	-1	-1	882	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬732	-1	-1	-1	-1	-1	-1	-1	-1	883	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬733	-1	733	734	-1	-1	735	736	884	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	885	-1	-1	-1	-1	741	-1	-1	-1	-1	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬734	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	886	-1	887	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬735	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬736	-1	733	734	-1	-1	735	736	884	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	888	-1	-1	-1	-1	741	-1	-1	-1	-1	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬737	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	889	-1	161	-1	-1	534	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬738	-1	733	734	-1	-1	735	736	890	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	891	-1	-1	-1	-1	741	-1	-1	-1	-1	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬739	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬740	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬741	-1	892	-1	-1	-1	-1	893	894	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬742	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬743	-1	733	734	-1	-1	735	736	737	-1	-1	-1	-1	-1	-1	-1	738	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	739	740	-1	-1	-1	-1	741	-1	-1	-1	895	743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬744	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬745	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬746	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	546	-1	-1	-1	-1	-1	-1	547	548	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬747	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	546	-1	-1	-1	-1	-1	-1	547	548	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬748	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬749	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬750	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬751	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬752	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	551	-1	-1	-1	552	553	-1	-1	554	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬753	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	551	-1	-1	-1	552	553	-1	-1	554	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬754	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	555	556	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬755	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	557	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬756	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	558	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬757	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬758	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬759	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬760	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	896	-1	-1	66	-1	67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	69	-1	-1	-1	-1	-1	70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬761	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬762	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬763	-1	148	149	-1	-1	151	152	352	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	353	-1	-1	-1	-1	161	-1	-1	-1	897	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬764	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	769	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬765	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬766	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	898	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬767	-1	-1	899	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬768	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬769	-1	-1	-1	-1	-1	-1	-1	-1	900	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬770	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	769	-1	161	-1	-1	901	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬771	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬772	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬773	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬774	-1	148	149	-1	-1	151	152	153	902	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	903	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬775	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬776	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬777	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬778	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	904	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬779	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬780	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬781	-1	-1	-1	-1	-1	-1	-1	-1	905	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬782	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬783	-1	-1	-1	-1	-1	-1	-1	-1	906	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬784	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬785	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬786	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬787	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬788	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬789	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬790	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬791	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬792	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	907	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬793	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬794	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬795	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	908	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬796	-1	-1	-1	-1	-1	-1	-1	-1	909	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬797	-1	420	421	-1	-1	422	423	424	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	910	-1	426	-1	-1	-1	-1	-1	-1	-1	-1	427	428	429	-1	-1	-1	430	-1	-1	-1	431	432	433	-1	434	435	-1	-1	436	437	438	439	440	-1	-1	-1	-1	-1	-1	-1	-1	-1	828	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬798	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬799	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬800	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬801	-1	-1	-1	-1	-1	-1	-1	-1	911	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬802	-1	-1	-1	-1	-1	-1	-1	-1	912	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬803	-1	803	804	-1	-1	805	806	913	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	914	-1	-1	-1	-1	811	-1	-1	-1	-1	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬804	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	915	-1	916	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬805	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬806	-1	803	804	-1	-1	805	806	913	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	917	-1	-1	-1	-1	811	-1	-1	-1	-1	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬807	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	918	-1	161	-1	-1	634	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬808	-1	803	804	-1	-1	805	806	919	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	920	-1	-1	-1	-1	811	-1	-1	-1	-1	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬809	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬810	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬811	-1	921	-1	-1	-1	-1	922	923	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬812	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬813	-1	803	804	-1	-1	805	806	807	-1	-1	-1	-1	-1	-1	-1	808	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	809	810	-1	-1	-1	-1	811	-1	-1	-1	924	813	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬814	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬815	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬816	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	645	-1	-1	-1	-1	-1	-1	646	647	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬817	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	645	-1	-1	-1	-1	-1	-1	646	647	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬818	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬819	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬820	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬821	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬822	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	650	-1	-1	-1	651	652	-1	-1	653	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬823	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	650	-1	-1	-1	651	652	-1	-1	653	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬824	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	654	655	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬825	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	656	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬826	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	657	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬827	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬828	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬829	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬830	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬831	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	925	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬832	-1	-1	-1	-1	-1	-1	-1	-1	926	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬833	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬834	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬835	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬836	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬837	-1	255	256	-1	-1	257	258	472	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	473	-1	-1	-1	-1	264	-1	-1	-1	927	266	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬838	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	843	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬839	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬840	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	928	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬841	-1	-1	929	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬842	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬843	-1	-1	-1	-1	-1	-1	-1	-1	930	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬844	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	843	-1	161	-1	-1	931	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬845	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬846	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬847	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬848	-1	148	149	-1	-1	151	152	153	932	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	933	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬849	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬850	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	237	-1	238	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	934	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬851	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	935	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬852	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	936	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬853	-1	-1	-1	-1	-1	-1	-1	937	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬854	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	938	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬855	-1	-1	-1	-1	-1	-1	-1	939	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬856	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬857	-1	90	91	2	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	940	102	103	4	104	5	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	118	119	120	-1	121	122	123	124	125	126	127	-1	-1	941	-1	129	-1	942	-1	-1	-1	12	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬858	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	943	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	111	-1	944	-1	113	-1	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬859	-1	255	256	-1	-1	257	258	259	-1	-1	-1	-1	-1	-1	-1	260	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	261	262	945	-1	-1	-1	264	-1	-1	-1	265	266	267	-1	268	269	-1	-1	270	271	272	273	274	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬860	-1	-1	-1	-1	-1	-1	-1	946	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬861	-1	-1	-1	-1	-1	-1	-1	947	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬862	-1	-1	948	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬863	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	279	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	949	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬864	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬865	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	950	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬866	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬867	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬868	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬869	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬870	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬871	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬872	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬873	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	951	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬874	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬875	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬876	-1	-1	-1	-1	-1	-1	-1	-1	952	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬877	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬878	-1	-1	-1	-1	-1	-1	-1	-1	953	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬879	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬880	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬881	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬882	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬883	-1	312	313	-1	-1	314	315	543	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	544	-1	-1	-1	-1	322	-1	-1	-1	954	324	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬884	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	889	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬885	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬886	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	955	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬887	-1	-1	956	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬888	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬889	-1	-1	-1	-1	-1	-1	-1	-1	957	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬890	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	889	-1	161	-1	-1	958	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬891	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬892	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬893	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬894	-1	148	149	-1	-1	151	152	153	959	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	960	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬895	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬896	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬897	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬898	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	961	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬899	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬900	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬901	-1	-1	-1	-1	-1	-1	-1	-1	962	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬902	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬903	-1	-1	-1	-1	-1	-1	-1	-1	963	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬904	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬905	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬906	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬907	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬908	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬909	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬910	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬911	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬912	-1	420	421	-1	-1	422	423	642	-1	-1	-1	-1	-1	-1	-1	425	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	427	643	-1	-1	-1	-1	430	-1	-1	-1	964	432	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬913	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	918	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬914	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬915	-1	312	313	-1	-1	314	315	316	-1	-1	-1	-1	-1	-1	-1	317	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	318	319	320	-1	965	-1	322	-1	-1	-1	323	324	325	-1	326	327	-1	-1	328	329	330	331	332	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬916	-1	-1	966	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬917	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬918	-1	-1	-1	-1	-1	-1	-1	-1	967	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬919	-1	148	149	150	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	-1	-1	-1	157	158	159	-1	918	-1	161	-1	-1	968	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬920	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬921	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬922	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬923	-1	148	149	-1	-1	151	152	153	969	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	372	-1	-1	-1	161	-1	970	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬924	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬925	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬926	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	971	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬927	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬928	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	972	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬929	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬930	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬931	-1	-1	-1	-1	-1	-1	-1	-1	973	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬932	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬933	-1	-1	-1	-1	-1	-1	-1	-1	974	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬934	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	975	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬935	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	976	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬936	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬937	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	977	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬938	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬939	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	451	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	111	-1	452	-1	113	978	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬940	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬941	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	979	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	302	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬942	-1	90	91	2	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	980	102	103	4	104	5	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	118	119	120	-1	121	122	123	124	125	126	306	-1	-1	981	-1	129	-1	-1	-1	-1	-1	12	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬943	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬944	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	279	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	982	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬945	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	983	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬946	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	984	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬947	-1	148	149	-1	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	985	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬948	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	986	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬949	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬950	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	-1	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	987	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬951	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬952	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬953	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬954	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬955	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	988	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬956	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬957	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬958	-1	-1	-1	-1	-1	-1	-1	-1	989	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬959	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬960	-1	-1	-1	-1	-1	-1	-1	-1	990	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬961	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬962	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬963	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬964	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬965	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	991	-1	-1	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬966	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬967	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬968	-1	-1	-1	-1	-1	-1	-1	-1	992	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬969	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬970	-1	-1	-1	-1	-1	-1	-1	-1	993	-1	-1	-1	-1	-1	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬971	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬972	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬973	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬974	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬975	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬976	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬977	-1	-1	-1	-1	-1	-1	-1	-1	994	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬978	-1	90	230	-1	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	98	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	666	-1	-1	-1	-1	-1	-1	-1	-1	-1	109	110	111	-1	667	-1	113	995	-1	-1	115	116	117	-1	119	120	-1	-1	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬979	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬980	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬981	-1	90	91	-1	92	93	94	95	-1	96	-1	-1	-1	97	-1	98	40	41	42	43	99	44	-1	45	-1	-1	-1	-1	-1	100	-1	-1	-1	-1	-1	-1	-1	996	102	103	-1	104	-1	-1	105	106	107	108	109	110	111	-1	112	-1	113	114	-1	-1	115	116	117	302	119	120	-1	121	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	131	-1	-1	-1	-1	-1	132	133	134	-1	
״̬982	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬983	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	997	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬984	-1	-1	-1	-1	-1	-1	-1	-1	998	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬985	-1	-1	-1	-1	-1	-1	-1	-1	999	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬986	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬987	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬988	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬989	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬990	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬991	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬992	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬993	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬994	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	1000	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬995	-1	148	149	-1	-1	151	152	153	1001	-1	-1	-1	-1	-1	-1	154	40	41	42	43	-1	44	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	1002	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬996	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬997	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬998	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	1003	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬999	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	1004	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬1000	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬1001	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	1005	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬1002	-1	-1	-1	-1	-1	-1	-1	-1	1006	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬1003	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	1007	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬1004	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬1005	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬1006	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	1008	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬1007	-1	90	850	-1	851	93	94	95	-1	852	-1	-1	-1	853	-1	98	40	41	42	43	854	44	-1	45	-1	-1	-1	-1	-1	855	-1	-1	-1	-1	-1	-1	-1	-1	856	857	-1	858	-1	-1	859	860	861	862	109	110	111	-1	863	-1	113	864	-1	-1	115	116	117	1009	119	120	-1	866	122	123	124	125	126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	867	-1	-1	-1	-1	-1	868	869	870	-1	
״̬1008	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬1009	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	

0	multiplicative_expression -> multiplicative_expression % cast_expression 
1	postfix_expression -> postfix_expression INC_OP 
2	logical_and_expression -> exclusive_or_expression 
3	primary_expression -> IDENTIFIER 
4	exclusive_or_expression -> exclusive_or_expression ^ equality_expression 
5	direct_declarator -> direct_declarator ( identifier_list ) 
6	jump_statement -> RETURN ; 
7	postfix_expression -> postfix_expression ( ) 
8	relational_expression -> relational_expression < shift_expression 
9	cast_expression -> unary_expression 
10	primary_expression -> ( expression ) 
11	primary_expression -> CONSTANT 
12	postfix_expression -> primary_expression 
13	postfix_expression -> IDENTIFIER [ expression ] 
14	postfix_expression -> postfix_expression ( argument_expression_list ) 
15	postfix_expression -> IDENTIFIER . IDENTIFIER 
16	postfix_expression -> postfix_expression DEC_OP 
17	argument_expression_list -> assignment_expression 
18	argument_expression_list -> argument_expression_list , assignment_expression 
19	unary_expression -> postfix_expression 
20	unary_operator -> & 
21	unary_expression -> INC_OP unary_expression 
22	unary_expression -> DEC_OP unary_expression 
23	unary_expression -> unary_operator cast_expression 
24	unary_expression -> SIZEOF unary_expression 
25	jump_statement -> GOTO IDENTIFIER ; 
26	unary_expression -> SIZEOF ( type_name ) 
27	unary_operator -> ! 
28	unary_operator -> * 
29	unary_operator -> + 
30	unary_operator -> - 
31	iteration_statement -> FOR ( expression_statement expression_statement ) statement 
32	unary_operator -> ~ 
33	multiplicative_expression -> multiplicative_expression / cast_expression 
34	cast_expression -> ( type_name ) cast_expression 
35	multiplicative_expression -> cast_expression 
36	multiplicative_expression -> multiplicative_expression * cast_expression 
37	additive_expression -> multiplicative_expression 
38	type_specifier -> VOID 
39	additive_expression -> additive_expression + multiplicative_expression 
40	shift_expression -> additive_expression 
41	additive_expression -> additive_expression - multiplicative_expression 
42	relational_expression -> shift_expression 
43	declaration -> type_specifier ; 
44	relational_expression -> relational_expression > shift_expression 
45	logical_and_expression -> logical_and_expression AND_OP exclusive_or_expression 
46	relational_expression -> relational_expression LE_OP shift_expression 
47	assignment_expression -> unary_expression = assignment_expression 
48	relational_expression -> relational_expression GE_OP shift_expression 
49	statement -> labeled_statement 
50	equality_expression -> relational_expression 
51	equality_expression -> equality_expression EQ_OP relational_expression 
52	equality_expression -> equality_expression NE_OP relational_expression 
53	struct_declaration -> type_specifier struct_declarator_list ; 
54	exclusive_or_expression -> equality_expression 
55	init_declarator -> declarator = initializer 
56	logical_or_expression -> logical_and_expression 
57	expression -> expression , assignment_expression 
58	declaration_list -> declaration 
59	logical_or_expression -> logical_or_expression OR_OP logical_and_expression 
60	assignment_expression -> logical_or_expression 
61	expression -> assignment_expression 
62	declaration -> type_specifier init_declarator_list ; 
63	type_specifier -> struct_or_union_specifier 
64	init_declarator_list -> init_declarator 
65	init_declarator_list -> init_declarator_list , init_declarator 
66	expression_statement -> expression ; 
67	init_declarator -> declarator 
68	type_specifier -> INT 
69	expression_statement -> ; 
70	struct_or_union_specifier -> STRUCT IDENTIFIER { struct_declaration_list } 
71	struct_or_union_specifier -> STRUCT { struct_declaration_list } 
72	struct_or_union_specifier -> STRUCT IDENTIFIER 
73	struct_declaration_list -> struct_declaration 
74	struct_declaration_list -> struct_declaration_list struct_declaration 
75	struct_declarator_list -> declarator 
76	struct_declarator_list -> struct_declarator_list , declarator 
77	declarator -> direct_declarator 
78	direct_declarator -> IDENTIFIER 
79	direct_declarator -> ( direct_declarator ) 
80	direct_declarator -> IDENTIFIER [ assignment_expression ] 
81	direct_declarator -> direct_declarator ( parameter_list ) 
82	direct_declarator -> direct_declarator ( ) 
83	parameter_list -> parameter_declaration 
84	parameter_list -> parameter_list , parameter_declaration 
85	declaration_list -> declaration_list declaration 
86	parameter_declaration -> type_specifier declarator 
87	parameter_declaration -> type_specifier 
88	identifier_list -> IDENTIFIER 
89	identifier_list -> identifier_list , IDENTIFIER 
90	type_name -> type_specifier 
91	initializer -> assignment_expression 
92	initializer -> { initializer_list } 
93	initializer -> { initializer_list , } 
94	initializer_list -> initializer 
95	jump_statement -> RETURN expression ; 
96	initializer_list -> initializer_list , initializer 
97	statement -> compound_statement 
98	statement -> expression_statement 
99	statement -> selection_statement 
100	statement -> iteration_statement 
101	statement -> jump_statement 
102	labeled_statement -> IDENTIFIER : statement 
103	labeled_statement -> CASE assignment_expression : statement 
104	labeled_statement -> DEFAULT : statement 
105	compound_statement -> { } 
106	compound_statement -> { statement_list } 
107	compound_statement -> { declaration_list } 
108	compound_statement -> { declaration_list statement_list } 
109	statement_list -> statement 
110	statement_list -> statement_list statement 
111	selection_statement -> IF ( expression ) statement 
112	selection_statement -> IF ( expression ) statement ELSE statement 
113	selection_statement -> SWITCH ( expression ) statement 
114	iteration_statement -> WHILE ( expression ) statement 
115	iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 
116	jump_statement -> CONTINUE ; 
117	jump_statement -> BREAK ; 
118	translation_unit -> external_declaration 
119	translation_unit -> translation_unit external_declaration 
120	external_declaration -> function_definition 
121	external_declaration -> declaration 
122	function_definition -> type_specifier declarator declaration_list compound_statement 
123	function_definition -> type_specifier declarator compound_statement 
124	function_definition -> declarator declaration_list compound_statement 
125	function_definition -> declarator compound_statement 
126	argumented_translation_unit -> translation_unit 
