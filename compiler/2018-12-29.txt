״̬��0
****size: 14 ****
argumented_translation_unit->@translation_unit , $ 
translation_unit->@external_declaration , $ INT VOID STRUCT 
translation_unit->@translation_unit external_declaration , $ INT VOID STRUCT 
external_declaration->@function_definition , $ INT VOID STRUCT 
external_declaration->@declaration , $ INT VOID STRUCT 
function_definition->@type_specifier declarator function_compound_statement , $ INT VOID STRUCT 
declaration->@type_specifier ; , $ INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , $ INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( ; 
type_specifier->@VOID , IDENTIFIER ( ; 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ; 
****************

״̬��1
****size: 1 ****
type_specifier->INT @, IDENTIFIER ( ; 
****************

״̬��2
****size: 1 ****
type_specifier->VOID @, IDENTIFIER ( ; 
****************

״̬��3
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->STRUCT @@IDENTIFIER , IDENTIFIER ( ; 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , IDENTIFIER ( ; 
****************

״̬��4
****size: 13 ****
argumented_translation_unit->translation_unit @, $ 
translation_unit->translation_unit @@external_declaration , $ INT VOID STRUCT 
external_declaration->@function_definition , $ INT VOID STRUCT 
external_declaration->@declaration , $ INT VOID STRUCT 
function_definition->@type_specifier declarator function_compound_statement , $ INT VOID STRUCT 
declaration->@type_specifier ; , $ INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , $ INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( ; 
type_specifier->@VOID , IDENTIFIER ( ; 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ; 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ; 
****************

״̬��5
****size: 1 ****
external_declaration->declaration @, $ INT VOID STRUCT 
****************

״̬��6
****size: 1 ****
external_declaration->function_definition @, $ INT VOID STRUCT 
****************

״̬��7
****size: 13 ****
function_definition->type_specifier @@declarator function_compound_statement , $ INT VOID STRUCT 
declaration->type_specifier @@; , $ INT VOID STRUCT 
declaration->type_specifier @@init_declarator_list ; , $ INT VOID STRUCT 
declarator->@direct_declarator , { = ; , 
init_declarator_list->@init_declarator , ; , 
init_declarator_list->@init_declarator_list , init_declarator , ; , 
direct_declarator->@direct_declarator ( ) , { ( = ; , 
direct_declarator->@IDENTIFIER [ assignment_expression ] , { ( = ; , 
direct_declarator->@IDENTIFIER , { ( = ; , 
direct_declarator->@( direct_declarator ) , { ( = ; , 
direct_declarator->@direct_declarator ( parameter_list ) , { ( = ; , 
init_declarator->@declarator = initializer , ; , 
init_declarator->@declarator , ; , 
****************

״̬��8
****size: 1 ****
type_specifier->struct_or_union_specifier @, IDENTIFIER ( ; 
****************

״̬��9
****size: 1 ****
translation_unit->external_declaration @, $ INT VOID STRUCT 
****************

״̬��10
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , IDENTIFIER ( ; 
struct_or_union_specifier->STRUCT IDENTIFIER @, IDENTIFIER ( ; 
****************

״̬��11
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , IDENTIFIER ( ; 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��12
****size: 1 ****
translation_unit->translation_unit external_declaration @, $ INT VOID STRUCT 
****************

״̬��13
****size: 2 ****
direct_declarator->IDENTIFIER @@[ assignment_expression ] , { ( = ; , 
direct_declarator->IDENTIFIER @, { ( = ; , 
****************

״̬��14
****size: 6 ****
direct_declarator->( @@direct_declarator ) , { ( = ; , 
direct_declarator->@direct_declarator ( ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
****************

״̬��15
****size: 1 ****
declaration->type_specifier ; @, $ INT VOID STRUCT 
****************

״̬��16
****size: 3 ****
declarator->direct_declarator @, { = ; , 
direct_declarator->direct_declarator @@( ) , { ( = ; , 
direct_declarator->direct_declarator @@( parameter_list ) , { ( = ; , 
****************

״̬��17
****size: 1 ****
init_declarator_list->init_declarator @, ; , 
****************

״̬��18
****size: 2 ****
declaration->type_specifier init_declarator_list @@; , $ INT VOID STRUCT 
init_declarator_list->init_declarator_list @@, init_declarator , ; , 
****************

״̬��19
****size: 7 ****
function_definition->type_specifier declarator @@function_compound_statement , $ INT VOID STRUCT 
init_declarator->declarator @@= initializer , ; , 
init_declarator->declarator @, ; , 
function_compound_statement->@{ } , $ INT VOID STRUCT 
function_compound_statement->@{ statement_list } , $ INT VOID STRUCT 
function_compound_statement->@{ declaration_list } , $ INT VOID STRUCT 
function_compound_statement->@{ declaration_list statement_list } , $ INT VOID STRUCT 
****************

״̬��20
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , IDENTIFIER ( ; 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��21
****size: 1 ****
type_specifier->INT @, IDENTIFIER ( 
****************

״̬��22
****size: 1 ****
type_specifier->VOID @, IDENTIFIER ( 
****************

״̬��23
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->STRUCT @@IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , IDENTIFIER ( 
****************

״̬��24
****size: 1 ****
struct_declaration_list->struct_declaration @, } INT VOID STRUCT 
****************

״̬��25
****size: 9 ****
struct_declaration->type_specifier @@struct_declarator_list ; , } INT VOID STRUCT 
struct_declarator_list->@struct_declarator_list , declarator , ; , 
struct_declarator_list->@declarator , ; , 
declarator->@direct_declarator , ; , 
direct_declarator->@direct_declarator ( ) , ; , ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ; , ( 
direct_declarator->@IDENTIFIER , ; , ( 
direct_declarator->@( direct_declarator ) , ; , ( 
direct_declarator->@direct_declarator ( parameter_list ) , ; , ( 
****************

״̬��26
****size: 1 ****
type_specifier->struct_or_union_specifier @, IDENTIFIER ( 
****************

״̬��27
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , IDENTIFIER ( ; 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��28
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , { ( = ; , 
assignment_expression->@logical_or_expression , ] 
assignment_expression->@unary_expression = assignment_expression , ] 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��29
****size: 2 ****
direct_declarator->IDENTIFIER @@[ assignment_expression ] , ) ( 
direct_declarator->IDENTIFIER @, ) ( 
****************

״̬��30
****size: 6 ****
direct_declarator->( @@direct_declarator ) , ) ( 
direct_declarator->@direct_declarator ( ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
****************

״̬��31
****size: 3 ****
direct_declarator->( direct_declarator @@) , { ( = ; , 
direct_declarator->direct_declarator @@( ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
****************

״̬��32
****size: 12 ****
direct_declarator->direct_declarator ( @@) , { ( = ; , 
direct_declarator->direct_declarator ( @@parameter_list ) , { ( = ; , 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
****************

״̬��33
****size: 9 ****
init_declarator_list->init_declarator_list , @@init_declarator , ; , 
init_declarator->@declarator = initializer , ; , 
init_declarator->@declarator , ; , 
declarator->@direct_declarator , = ; , 
direct_declarator->@direct_declarator ( ) , = ; , ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , = ; , ( 
direct_declarator->@IDENTIFIER , = ; , ( 
direct_declarator->@( direct_declarator ) , = ; , ( 
direct_declarator->@direct_declarator ( parameter_list ) , = ; , ( 
****************

״̬��34
****size: 1 ****
declaration->type_specifier init_declarator_list ; @, $ INT VOID STRUCT 
****************

״̬��35
****size: 52 ****
init_declarator->declarator = @@initializer , ; , 
initializer->@assignment_expression , ; , 
initializer->@{ initializer_list } , ; , 
initializer->@{ initializer_list , } , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ; , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ; , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��36
****size: 87 ****
function_compound_statement->{ @@} , $ INT VOID STRUCT 
function_compound_statement->{ @@statement_list } , $ INT VOID STRUCT 
function_compound_statement->{ @@declaration_list } , $ INT VOID STRUCT 
function_compound_statement->{ @@declaration_list statement_list } , $ INT VOID STRUCT 
statement_list->@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->@statement_list statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration_list->@declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration_list->@declaration_list declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration->@type_specifier ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
type_specifier->@INT , ; IDENTIFIER ( 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��37
****size: 1 ****
function_definition->type_specifier declarator function_compound_statement @, $ INT VOID STRUCT 
****************

״̬��38
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , IDENTIFIER ( ; 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��39
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->STRUCT IDENTIFIER @, IDENTIFIER ( 
****************

״̬��40
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , IDENTIFIER ( 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��41
****size: 2 ****
direct_declarator->IDENTIFIER @@[ assignment_expression ] , ; , ( 
direct_declarator->IDENTIFIER @, ; , ( 
****************

״̬��42
****size: 6 ****
direct_declarator->( @@direct_declarator ) , ; , ( 
direct_declarator->@direct_declarator ( ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
****************

״̬��43
****size: 3 ****
declarator->direct_declarator @, ; , 
direct_declarator->direct_declarator @@( ) , ; , ( 
direct_declarator->direct_declarator @@( parameter_list ) , ; , ( 
****************

״̬��44
****size: 2 ****
struct_declaration->type_specifier struct_declarator_list @@; , } INT VOID STRUCT 
struct_declarator_list->struct_declarator_list @@, declarator , ; , 
****************

״̬��45
****size: 1 ****
struct_declarator_list->declarator @, ; , 
****************

״̬��46
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, IDENTIFIER ( ; 
****************

״̬��47
****size: 1 ****
struct_declaration_list->struct_declaration_list struct_declaration @, } INT VOID STRUCT 
****************

״̬��48
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��49
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��50
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��51
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��52
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->( @@type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��53
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->SIZEOF @@( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��54
****size: 1 ****
unary_operator->& @, DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��55
****size: 1 ****
unary_operator->* @, DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��56
****size: 1 ****
unary_operator->+ @, DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��57
****size: 1 ****
unary_operator->- @, DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��58
****size: 1 ****
unary_operator->~ @, DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��59
****size: 1 ****
unary_operator->! @, DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��60
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��61
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ] 
cast_expression->unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��62
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , { ( = ; , 
****************

״̬��63
****size: 5 ****
unary_expression->postfix_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��64
****size: 1 ****
multiplicative_expression->cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��65
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��66
****size: 4 ****
additive_expression->multiplicative_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��67
****size: 3 ****
shift_expression->additive_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->additive_expression @@+ multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->additive_expression @@- multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
****************

״̬��68
****size: 1 ****
relational_expression->shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��69
****size: 5 ****
equality_expression->relational_expression @, ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@< shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@> shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��70
****size: 3 ****
exclusive_or_expression->equality_expression @, ] OR_OP AND_OP ^ 
equality_expression->equality_expression @@EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->equality_expression @@NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
****************

״̬��71
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ] OR_OP AND_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] OR_OP AND_OP ^ 
****************

״̬��72
****size: 2 ****
logical_or_expression->logical_and_expression @, ] OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] OR_OP AND_OP 
****************

״̬��73
****size: 2 ****
assignment_expression->logical_or_expression @, ] 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ] OR_OP 
****************

״̬��74
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , ) ( 
assignment_expression->@logical_or_expression , ] 
assignment_expression->@unary_expression = assignment_expression , ] 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��75
****size: 3 ****
direct_declarator->( direct_declarator @@) , ) ( 
direct_declarator->direct_declarator @@( ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
****************

״̬��76
****size: 12 ****
direct_declarator->direct_declarator ( @@) , ) ( 
direct_declarator->direct_declarator ( @@parameter_list ) , ) ( 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
****************

״̬��77
****size: 1 ****
direct_declarator->( direct_declarator ) @, { ( = ; , 
****************

״̬��78
****size: 1 ****
type_specifier->INT @, IDENTIFIER ( ) , 
****************

״̬��79
****size: 1 ****
direct_declarator->direct_declarator ( ) @, { ( = ; , 
****************

״̬��80
****size: 1 ****
type_specifier->VOID @, IDENTIFIER ( ) , 
****************

״̬��81
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->STRUCT @@IDENTIFIER , IDENTIFIER ( ) , 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , IDENTIFIER ( ) , 
****************

״̬��82
****size: 8 ****
parameter_declaration->type_specifier @@declarator , ) , 
parameter_declaration->type_specifier @, ) , 
declarator->@direct_declarator , ) , 
direct_declarator->@direct_declarator ( ) , ) , ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) , ( 
direct_declarator->@IDENTIFIER , ) , ( 
direct_declarator->@( direct_declarator ) , ) , ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) , ( 
****************

״̬��83
****size: 1 ****
type_specifier->struct_or_union_specifier @, IDENTIFIER ( ) , 
****************

״̬��84
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , { ( = ; , 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��85
****size: 1 ****
parameter_list->parameter_declaration @, ) , 
****************

״̬��86
****size: 2 ****
direct_declarator->IDENTIFIER @@[ assignment_expression ] , = ; , ( 
direct_declarator->IDENTIFIER @, = ; , ( 
****************

״̬��87
****size: 6 ****
direct_declarator->( @@direct_declarator ) , = ; , ( 
direct_declarator->@direct_declarator ( ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
****************

״̬��88
****size: 3 ****
declarator->direct_declarator @, = ; , 
direct_declarator->direct_declarator @@( ) , = ; , ( 
direct_declarator->direct_declarator @@( parameter_list ) , = ; , ( 
****************

״̬��89
****size: 1 ****
init_declarator_list->init_declarator_list , init_declarator @, ; , 
****************

״̬��90
****size: 2 ****
init_declarator->declarator @@= initializer , ; , 
init_declarator->declarator @, ; , 
****************

״̬��91
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��92
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��93
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��94
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��95
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->( @@type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��96
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->SIZEOF @@( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��97
****size: 52 ****
initializer->{ @@initializer_list } , ; , 
initializer->{ @@initializer_list , } , ; , 
initializer_list->@assignment_expression , } , 
initializer_list->@initializer_list , assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , } , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , } , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��98
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��99
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ; , 
cast_expression->unary_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��100
****size: 1 ****
initializer->assignment_expression @, ; , 
****************

״̬��101
****size: 5 ****
unary_expression->postfix_expression @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��102
****size: 1 ****
multiplicative_expression->cast_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��103
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��104
****size: 4 ****
additive_expression->multiplicative_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@% cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��105
****size: 3 ****
shift_expression->additive_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->additive_expression @@+ multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->additive_expression @@- multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
****************

״̬��106
****size: 1 ****
relational_expression->shift_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��107
****size: 5 ****
equality_expression->relational_expression @, ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@< shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@> shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��108
****size: 3 ****
exclusive_or_expression->equality_expression @, ; , OR_OP AND_OP ^ 
equality_expression->equality_expression @@EQ_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->equality_expression @@NE_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
****************

״̬��109
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ; , OR_OP AND_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ; , OR_OP AND_OP ^ 
****************

״̬��110
****size: 2 ****
logical_or_expression->logical_and_expression @, ; , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
****************

״̬��111
****size: 2 ****
assignment_expression->logical_or_expression @, ; , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ; , OR_OP 
****************

״̬��112
****size: 1 ****
init_declarator->declarator = initializer @, ; , 
****************

״̬��113
****size: 1 ****
jump_statement->CONTINUE @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��114
****size: 1 ****
selection_statement->SWITCH @@( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��115
****size: 1 ****
jump_statement->BREAK @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��116
****size: 2 ****
iteration_statement->FOR @@( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->FOR @@( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��117
****size: 1 ****
function_compound_statement->{ } @, $ INT VOID STRUCT 
****************

״̬��118
****size: 1 ****
expression_statement->; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��119
****size: 87 ****
compound_statement->{ @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->{ @@statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->{ @@declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->{ @@declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->@statement_list statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration_list->@declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration_list->@declaration_list declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration->@type_specifier ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
type_specifier->@INT , ; IDENTIFIER ( 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��120
****size: 52 ****
jump_statement->RETURN @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->RETURN @@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��121
****size: 2 ****
selection_statement->IF @@( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->IF @@( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��122
****size: 1 ****
iteration_statement->WHILE @@( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��123
****size: 1 ****
expression->assignment_expression @, ; , 
****************

״̬��124
****size: 2 ****
expression_statement->expression @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->expression @@, assignment_expression , ; , 
****************

״̬��125
****size: 1 ****
statement->expression_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��126
****size: 1 ****
statement_list->statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��127
****size: 1 ****
statement->compound_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��128
****size: 1 ****
declaration_list->declaration @, } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
****************

״̬��129
****size: 73 ****
function_compound_statement->{ statement_list @@} , $ INT VOID STRUCT 
statement_list->statement_list @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��130
****size: 12 ****
declaration->type_specifier @@; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration->type_specifier @@init_declarator_list ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
init_declarator_list->@init_declarator , ; , 
init_declarator_list->@init_declarator_list , init_declarator , ; , 
init_declarator->@declarator = initializer , ; , 
init_declarator->@declarator , ; , 
declarator->@direct_declarator , = ; , 
direct_declarator->@direct_declarator ( ) , = ; ( , 
direct_declarator->@IDENTIFIER [ assignment_expression ] , = ; ( , 
direct_declarator->@IDENTIFIER , = ; ( , 
direct_declarator->@( direct_declarator ) , = ; ( , 
direct_declarator->@direct_declarator ( parameter_list ) , = ; ( , 
****************

״̬��131
****size: 84 ****
function_compound_statement->{ declaration_list @@} , $ INT VOID STRUCT 
function_compound_statement->{ declaration_list @@statement_list } , $ INT VOID STRUCT 
declaration_list->declaration_list @@declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement_list->@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->@statement_list statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration->@type_specifier ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
type_specifier->@INT , ; IDENTIFIER ( 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��132
****size: 1 ****
statement->jump_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��133
****size: 1 ****
statement->selection_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��134
****size: 1 ****
statement->iteration_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��135
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, IDENTIFIER ( ; 
****************

״̬��136
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , IDENTIFIER ( 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��137
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , IDENTIFIER ( 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��138
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , ; , ( 
assignment_expression->@logical_or_expression , ] 
assignment_expression->@unary_expression = assignment_expression , ] 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��139
****size: 3 ****
direct_declarator->( direct_declarator @@) , ; , ( 
direct_declarator->direct_declarator @@( ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
****************

״̬��140
****size: 12 ****
direct_declarator->direct_declarator ( @@) , ; , ( 
direct_declarator->direct_declarator ( @@parameter_list ) , ; , ( 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
****************

״̬��141
****size: 7 ****
struct_declarator_list->struct_declarator_list , @@declarator , ; , 
declarator->@direct_declarator , ; , 
direct_declarator->@direct_declarator ( ) , ; , ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ; , ( 
direct_declarator->@IDENTIFIER , ; , ( 
direct_declarator->@( direct_declarator ) , ; , ( 
direct_declarator->@direct_declarator ( parameter_list ) , ; , ( 
****************

״̬��142
****size: 1 ****
struct_declaration->type_specifier struct_declarator_list ; @, } INT VOID STRUCT 
****************

״̬��143
****size: 51 ****
primary_expression->( @@expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��144
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��145
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��146
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��147
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��148
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��149
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��150
****size: 1 ****
type_specifier->INT @, ) 
****************

״̬��151
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��152
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��153
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->( @@type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��154
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->SIZEOF @@( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��155
****size: 1 ****
type_specifier->VOID @, ) 
****************

״̬��156
****size: 3 ****
struct_or_union_specifier->STRUCT @@IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->STRUCT @@IDENTIFIER , ) 
struct_or_union_specifier->STRUCT @@{ struct_declaration_list } , ) 
****************

״̬��157
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��158
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ) , 
cast_expression->unary_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��159
****size: 1 ****
expression->assignment_expression @, ) , 
****************

״̬��160
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->expression @@, assignment_expression , ) , 
****************

״̬��161
****size: 5 ****
unary_expression->postfix_expression @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��162
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��163
****size: 1 ****
multiplicative_expression->cast_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��164
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��165
****size: 4 ****
additive_expression->multiplicative_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@* cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@% cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��166
****size: 3 ****
shift_expression->additive_expression @, ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->additive_expression @@+ multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->additive_expression @@- multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
****************

״̬��167
****size: 1 ****
relational_expression->shift_expression @, ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��168
****size: 5 ****
equality_expression->relational_expression @, ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->relational_expression @@LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->relational_expression @@< shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->relational_expression @@> shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->relational_expression @@GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��169
****size: 3 ****
exclusive_or_expression->equality_expression @, ) OR_OP AND_OP ^ , 
equality_expression->equality_expression @@EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->equality_expression @@NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
****************

״̬��170
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ) OR_OP AND_OP , 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ) OR_OP AND_OP ^ , 
****************

״̬��171
****size: 2 ****
logical_or_expression->logical_and_expression @, ) OR_OP , 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
****************

״̬��172
****size: 2 ****
assignment_expression->logical_or_expression @, ) , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ) OR_OP , 
****************

״̬��173
****size: 1 ****
type_name->type_specifier @, ) 
****************

״̬��174
****size: 1 ****
type_specifier->struct_or_union_specifier @, ) 
****************

״̬��175
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��176
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��177
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ] 
assignment_expression->@logical_or_expression , ] 
assignment_expression->@unary_expression = assignment_expression , ] 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��178
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, { ( = ; , 
****************

״̬��179
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��180
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��181
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��182
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��183
****size: 1 ****
cast_expression->unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��184
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��185
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��186
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��187
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��188
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
****************

״̬��189
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
****************

״̬��190
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��191
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��192
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��193
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��194
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��195
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��196
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ] OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->@relational_expression , ] OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@shift_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
shift_expression->@additive_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@unary_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@postfix_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
****************

״̬��197
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ] OR_OP AND_OP 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��198
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ] OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��199
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , ) ( 
****************

״̬��200
****size: 1 ****
direct_declarator->( direct_declarator ) @, ) ( 
****************

״̬��201
****size: 1 ****
direct_declarator->direct_declarator ( ) @, ) ( 
****************

״̬��202
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , ) ( 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��203
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->STRUCT IDENTIFIER @, IDENTIFIER ( ) , 
****************

״̬��204
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , IDENTIFIER ( ) , 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��205
****size: 2 ****
direct_declarator->IDENTIFIER @@[ assignment_expression ] , ) , ( 
direct_declarator->IDENTIFIER @, ) , ( 
****************

״̬��206
****size: 6 ****
direct_declarator->( @@direct_declarator ) , ) , ( 
direct_declarator->@direct_declarator ( ) , ) ( 
direct_declarator->@IDENTIFIER [ assignment_expression ] , ) ( 
direct_declarator->@IDENTIFIER , ) ( 
direct_declarator->@( direct_declarator ) , ) ( 
direct_declarator->@direct_declarator ( parameter_list ) , ) ( 
****************

״̬��207
****size: 3 ****
declarator->direct_declarator @, ) , 
direct_declarator->direct_declarator @@( ) , ) , ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) , ( 
****************

״̬��208
****size: 1 ****
parameter_declaration->type_specifier declarator @, ) , 
****************

״̬��209
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, { ( = ; , 
****************

״̬��210
****size: 9 ****
parameter_list->parameter_list , @@parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
****************

״̬��211
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , = ; , ( 
assignment_expression->@logical_or_expression , ] 
assignment_expression->@unary_expression = assignment_expression , ] 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��212
****size: 3 ****
direct_declarator->( direct_declarator @@) , = ; , ( 
direct_declarator->direct_declarator @@( ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
****************

״̬��213
****size: 12 ****
direct_declarator->direct_declarator ( @@) , = ; , ( 
direct_declarator->direct_declarator ( @@parameter_list ) , = ; , ( 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
****************

״̬��214
****size: 51 ****
primary_expression->( @@expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��215
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��216
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��217
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��218
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��219
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->expression @@, assignment_expression , ) , 
****************

״̬��220
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��221
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��222
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��223
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��224
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��225
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��226
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��227
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->( @@type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��228
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->SIZEOF @@( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��229
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��230
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , } , 
cast_expression->unary_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��231
****size: 1 ****
initializer_list->assignment_expression @, } , 
****************

״̬��232
****size: 5 ****
unary_expression->postfix_expression @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��233
****size: 1 ****
multiplicative_expression->cast_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��234
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��235
****size: 4 ****
additive_expression->multiplicative_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@/ cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@% cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��236
****size: 3 ****
shift_expression->additive_expression @, } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->additive_expression @@+ multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->additive_expression @@- multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
****************

״̬��237
****size: 1 ****
relational_expression->shift_expression @, } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��238
****size: 5 ****
equality_expression->relational_expression @, } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@< shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@> shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->relational_expression @@GE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��239
****size: 3 ****
exclusive_or_expression->equality_expression @, } , OR_OP AND_OP ^ 
equality_expression->equality_expression @@EQ_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->equality_expression @@NE_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
****************

״̬��240
****size: 2 ****
logical_and_expression->exclusive_or_expression @, } , OR_OP AND_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , } , OR_OP AND_OP ^ 
****************

״̬��241
****size: 2 ****
logical_or_expression->logical_and_expression @, } , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , } , OR_OP AND_OP 
****************

״̬��242
****size: 2 ****
assignment_expression->logical_or_expression @, } , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , } , OR_OP 
****************

״̬��243
****size: 3 ****
initializer->{ initializer_list @@} , ; , 
initializer->{ initializer_list @@, } , ; , 
initializer_list->initializer_list @@, assignment_expression , } , 
****************

״̬��244
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ; , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ; , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��245
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��246
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��247
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��248
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��249
****size: 1 ****
cast_expression->unary_expression @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��250
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��251
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��252
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��253
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��254
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
****************

״̬��255
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
****************

״̬��256
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��257
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��258
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��259
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��260
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��261
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��262
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ; , OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ; , OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->@relational_expression , ; , OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ; , OR_OP AND_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@shift_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
shift_expression->@additive_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@unary_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@postfix_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
****************

״̬��263
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ; , OR_OP AND_OP 
exclusive_or_expression->@equality_expression , ; , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��264
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ; , OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ; , OR_OP AND_OP 
exclusive_or_expression->@equality_expression , ; , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��265
****size: 1 ****
jump_statement->CONTINUE ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��266
****size: 51 ****
selection_statement->SWITCH ( @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��267
****size: 1 ****
jump_statement->BREAK ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��268
****size: 54 ****
iteration_statement->FOR ( @@expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->FOR ( @@expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , ; DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
expression_statement->@expression ; , ; DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��269
****size: 1 ****
compound_statement->{ } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��270
****size: 73 ****
compound_statement->{ statement_list @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->statement_list @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��271
****size: 84 ****
compound_statement->{ declaration_list @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->{ declaration_list @@statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration_list->declaration_list @@declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement_list->@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->@statement_list statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration->@type_specifier ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
type_specifier->@INT , ; IDENTIFIER ( 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��272
****size: 1 ****
jump_statement->RETURN ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��273
****size: 2 ****
jump_statement->RETURN expression @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->expression @@, assignment_expression , ; , 
****************

״̬��274
****size: 52 ****
selection_statement->IF ( @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->IF ( @@expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��275
****size: 51 ****
iteration_statement->WHILE ( @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��276
****size: 49 ****
expression->expression , @@assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; , OR_OP 
logical_or_expression->@logical_and_expression , ; , OR_OP 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ; , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ; , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��277
****size: 1 ****
expression_statement->expression ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��278
****size: 1 ****
function_compound_statement->{ statement_list } @, $ INT VOID STRUCT 
****************

״̬��279
****size: 1 ****
statement_list->statement_list statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��280
****size: 1 ****
declaration->type_specifier ; @, } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
****************

״̬��281
****size: 2 ****
declaration->type_specifier init_declarator_list @@; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
init_declarator_list->init_declarator_list @@, init_declarator , ; , 
****************

״̬��282
****size: 1 ****
function_compound_statement->{ declaration_list } @, $ INT VOID STRUCT 
****************

״̬��283
****size: 1 ****
declaration_list->declaration_list declaration @, } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
****************

״̬��284
****size: 73 ****
function_compound_statement->{ declaration_list statement_list @@} , $ INT VOID STRUCT 
statement_list->statement_list @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��285
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , IDENTIFIER ( 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��286
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, IDENTIFIER ( 
****************

״̬��287
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , ; , ( 
****************

״̬��288
****size: 1 ****
direct_declarator->( direct_declarator ) @, ; , ( 
****************

״̬��289
****size: 1 ****
direct_declarator->direct_declarator ( ) @, ; , ( 
****************

״̬��290
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , ; , ( 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��291
****size: 1 ****
struct_declarator_list->struct_declarator_list , declarator @, ; , 
****************

״̬��292
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��293
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->IDENTIFIER @@[ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->IDENTIFIER @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��294
****size: 1 ****
primary_expression->CONSTANT @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��295
****size: 23 ****
unary_expression->INC_OP @@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��296
****size: 59 ****
primary_expression->( @@expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->( @@type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_name->@type_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��297
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->SIZEOF @@( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��298
****size: 1 ****
postfix_expression->primary_expression @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��299
****size: 2 ****
assignment_expression->unary_expression @@= assignment_expression , ] , 
cast_expression->unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��300
****size: 1 ****
expression->assignment_expression @, ] , 
****************

״̬��301
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->expression @@, assignment_expression , ] , 
****************

״̬��302
****size: 5 ****
unary_expression->postfix_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��303
****size: 1 ****
multiplicative_expression->cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��304
****size: 25 ****
unary_expression->unary_operator @@cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��305
****size: 4 ****
additive_expression->multiplicative_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��306
****size: 3 ****
shift_expression->additive_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->additive_expression @@+ multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->additive_expression @@- multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
****************

״̬��307
****size: 1 ****
relational_expression->shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��308
****size: 5 ****
equality_expression->relational_expression @, ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->relational_expression @@LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->relational_expression @@< shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->relational_expression @@> shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->relational_expression @@GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��309
****size: 3 ****
exclusive_or_expression->equality_expression @, ] OR_OP AND_OP ^ , 
equality_expression->equality_expression @@EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->equality_expression @@NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
****************

״̬��310
****size: 2 ****
logical_and_expression->exclusive_or_expression @, ] OR_OP AND_OP , 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] OR_OP AND_OP ^ , 
****************

״̬��311
****size: 2 ****
logical_or_expression->logical_and_expression @, ] OR_OP , 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
****************

״̬��312
****size: 2 ****
assignment_expression->logical_or_expression @, ] , 
logical_or_expression->logical_or_expression @@OR_OP logical_and_expression , ] OR_OP , 
****************

״̬��313
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��314
****size: 51 ****
primary_expression->( @@expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��315
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��316
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��317
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��318
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��319
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->expression @@, assignment_expression , ) , 
****************

״̬��320
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��321
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��322
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��323
****size: 2 ****
struct_or_union_specifier->STRUCT IDENTIFIER @@{ struct_declaration_list } , ) 
struct_or_union_specifier->STRUCT IDENTIFIER @, ) 
****************

״̬��324
****size: 10 ****
struct_or_union_specifier->STRUCT { @@struct_declaration_list } , ) 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��325
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
unary_expression->@unary_operator cast_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ) , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ) , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��326
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��327
****size: 49 ****
expression->expression , @@assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
unary_expression->@unary_operator cast_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ) , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ) , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��328
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��329
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��330
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��331
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��332
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��333
****size: 1 ****
cast_expression->unary_expression @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��334
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��335
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��336
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��337
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��338
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
****************

״̬��339
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
****************

״̬��340
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��341
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��342
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��343
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��344
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��345
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��346
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ) OR_OP AND_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP ^ , EQ_OP NE_OP 
equality_expression->@relational_expression , ) OR_OP AND_OP ^ , EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP ^ , EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@shift_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
shift_expression->@additive_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@unary_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@postfix_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
****************

״̬��347
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ) OR_OP AND_OP , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP , ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP , ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP , EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ) OR_OP AND_OP , EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP , EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ) OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ) OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ) OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��348
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ) OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP , AND_OP 
logical_and_expression->@exclusive_or_expression , ) OR_OP , AND_OP 
exclusive_or_expression->@equality_expression , ) OR_OP , AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP , AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP , AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ) OR_OP , AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP , AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ) OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ) OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ) OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ) OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ) OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��349
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��350
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ] 
****************

״̬��351
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��352
****size: 1 ****
argument_expression_list->assignment_expression @, ) , 
****************

״̬��353
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��354
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��355
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��356
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@[ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��357
****size: 1 ****
primary_expression->CONSTANT @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��358
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��359
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��360
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->SIZEOF @@( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��361
****size: 1 ****
postfix_expression->primary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��362
****size: 1 ****
cast_expression->unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��363
****size: 5 ****
unary_expression->postfix_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��364
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��365
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��366
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��367
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��368
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
****************

״̬��369
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
****************

״̬��370
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��371
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��372
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��373
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��374
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
****************

״̬��375
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
****************

״̬��376
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ] OR_OP AND_OP ^ 
equality_expression->equality_expression @@EQ_OP relational_expression , ] OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ] OR_OP AND_OP ^ EQ_OP NE_OP 
****************

״̬��377
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ] OR_OP AND_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] OR_OP AND_OP ^ 
****************

״̬��378
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ] OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] OR_OP AND_OP 
****************

״̬��379
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, ) ( 
****************

״̬��380
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, ) ( 
****************

״̬��381
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , IDENTIFIER ( ) , 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��382
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , IDENTIFIER ( ) , 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��383
****size: 49 ****
direct_declarator->IDENTIFIER [ @@assignment_expression ] , ) , ( 
assignment_expression->@logical_or_expression , ] 
assignment_expression->@unary_expression = assignment_expression , ] 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP 
logical_or_expression->@logical_and_expression , ] OR_OP 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��384
****size: 3 ****
direct_declarator->( direct_declarator @@) , ) , ( 
direct_declarator->direct_declarator @@( ) , ) ( 
direct_declarator->direct_declarator @@( parameter_list ) , ) ( 
****************

״̬��385
****size: 12 ****
direct_declarator->direct_declarator ( @@) , ) , ( 
direct_declarator->direct_declarator ( @@parameter_list ) , ) , ( 
parameter_list->@parameter_list , parameter_declaration , ) , 
parameter_list->@parameter_declaration , ) , 
parameter_declaration->@type_specifier declarator , ) , 
parameter_declaration->@type_specifier , ) , 
type_specifier->@INT , IDENTIFIER ( ) , 
type_specifier->@VOID , IDENTIFIER ( ) , 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( ) , 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( ) , 
****************

״̬��386
****size: 1 ****
parameter_list->parameter_list , parameter_declaration @, ) , 
****************

״̬��387
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , = ; , ( 
****************

״̬��388
****size: 1 ****
direct_declarator->( direct_declarator ) @, = ; , ( 
****************

״̬��389
****size: 1 ****
direct_declarator->direct_declarator ( ) @, = ; , ( 
****************

״̬��390
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , = ; , ( 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��391
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->expression @@, assignment_expression , ] , 
****************

״̬��392
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��393
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��394
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��395
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��396
****size: 51 ****
primary_expression->( @@expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��397
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��398
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��399
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��400
****size: 1 ****
unary_expression->INC_OP unary_expression @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��401
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->expression @@, assignment_expression , ) , 
****************

״̬��402
****size: 1 ****
cast_expression->( type_name @@) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��403
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��404
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��405
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , } , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , } , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��406
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��407
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��408
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��409
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��410
****size: 1 ****
cast_expression->unary_expression @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��411
****size: 1 ****
unary_expression->unary_operator cast_expression @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��412
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��413
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��414
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��415
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
****************

״̬��416
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * INC_OP ( DEC_OP / % 
****************

״̬��417
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��418
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��419
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��420
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + - 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ + * INC_OP ( DEC_OP / % - 
****************

״̬��421
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��422
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��423
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , } , OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , } , OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->@relational_expression , } , OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , } , OR_OP AND_OP ^ EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@shift_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
shift_expression->@additive_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < > GE_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@unary_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@postfix_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP ^ EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
****************

״̬��424
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , } , OR_OP AND_OP 
exclusive_or_expression->@equality_expression , } , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��425
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , } , OR_OP 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , } , OR_OP AND_OP 
exclusive_or_expression->@equality_expression , } , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , OR_OP AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��426
****size: 50 ****
initializer->{ initializer_list , @@} , ; , 
initializer_list->initializer_list , @@assignment_expression , } , 
assignment_expression->@logical_or_expression , } , 
assignment_expression->@unary_expression = assignment_expression , } , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , } , OR_OP 
logical_or_expression->@logical_and_expression , } , OR_OP 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , } , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , } , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , } , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , } , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��427
****size: 1 ****
initializer->{ initializer_list } @, ; , 
****************

״̬��428
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ; , 
****************

״̬��429
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��430
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��431
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��432
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��433
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@[ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��434
****size: 1 ****
primary_expression->CONSTANT @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��435
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��436
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��437
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->SIZEOF @@( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��438
****size: 1 ****
postfix_expression->primary_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��439
****size: 1 ****
cast_expression->unary_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��440
****size: 5 ****
unary_expression->postfix_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��441
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��442
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��443
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��444
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��445
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
****************

״̬��446
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ; , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
****************

״̬��447
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��448
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��449
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��450
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��451
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
****************

״̬��452
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ; , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ; , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
****************

״̬��453
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ; , OR_OP AND_OP ^ 
equality_expression->equality_expression @@EQ_OP relational_expression , ; , OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ; , OR_OP AND_OP ^ EQ_OP NE_OP 
****************

״̬��454
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ; , OR_OP AND_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ; , OR_OP AND_OP ^ 
****************

״̬��455
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ; , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ; , OR_OP AND_OP 
****************

״̬��456
****size: 2 ****
selection_statement->SWITCH ( expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->expression @@, assignment_expression , ) , 
****************

״̬��457
****size: 1 ****
expression_statement->; @, ; DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��458
****size: 2 ****
expression_statement->expression @@; , ; DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
expression->expression @@, assignment_expression , ; , 
****************

״̬��459
****size: 54 ****
iteration_statement->FOR ( expression_statement @@expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->FOR ( expression_statement @@expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , ) CONSTANT DEC_OP IDENTIFIER INC_OP ( SIZEOF ~ * ! - & + 
expression_statement->@expression ; , ) CONSTANT DEC_OP IDENTIFIER INC_OP ( SIZEOF ~ * ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��460
****size: 1 ****
compound_statement->{ statement_list } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��461
****size: 1 ****
compound_statement->{ declaration_list } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��462
****size: 73 ****
compound_statement->{ declaration_list statement_list @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->statement_list @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��463
****size: 1 ****
jump_statement->RETURN expression ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��464
****size: 3 ****
selection_statement->IF ( expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->IF ( expression @@) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->expression @@, assignment_expression , ) , 
****************

״̬��465
****size: 2 ****
iteration_statement->WHILE ( expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->expression @@, assignment_expression , ) , 
****************

״̬��466
****size: 1 ****
expression->expression , assignment_expression @, ; , 
****************

״̬��467
****size: 1 ****
declaration->type_specifier init_declarator_list ; @, } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
****************

״̬��468
****size: 1 ****
function_compound_statement->{ declaration_list statement_list } @, $ INT VOID STRUCT 
****************

״̬��469
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, IDENTIFIER ( 
****************

״̬��470
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, ; , ( 
****************

״̬��471
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, ; , ( 
****************

״̬��472
****size: 51 ****
primary_expression->( @@expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��473
****size: 1 ****
unary_expression->DEC_OP unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��474
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��475
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��476
****size: 1 ****
unary_expression->INC_OP unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��477
****size: 2 ****
primary_expression->( expression @@) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->expression @@, assignment_expression , ) , 
****************

״̬��478
****size: 1 ****
cast_expression->( type_name @@) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��479
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��480
****size: 1 ****
unary_expression->SIZEOF unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��481
****size: 49 ****
assignment_expression->unary_expression = @@assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
unary_expression->@unary_operator cast_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��482
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��483
****size: 49 ****
expression->expression , @@assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] , OR_OP 
logical_or_expression->@logical_and_expression , ] , OR_OP 
unary_expression->@unary_operator cast_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ] , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ] , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��484
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��485
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��486
****size: 52 ****
postfix_expression->postfix_expression ( @@) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression ( @@argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��487
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��488
****size: 1 ****
cast_expression->unary_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��489
****size: 1 ****
unary_expression->unary_operator cast_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��490
****size: 25 ****
multiplicative_expression->multiplicative_expression * @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��491
****size: 25 ****
multiplicative_expression->multiplicative_expression / @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��492
****size: 25 ****
multiplicative_expression->multiplicative_expression % @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��493
****size: 29 ****
additive_expression->additive_expression + @@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
****************

״̬��494
****size: 29 ****
additive_expression->additive_expression - @@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * INC_OP ( DEC_OP / % 
****************

״̬��495
****size: 33 ****
relational_expression->relational_expression > @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��496
****size: 33 ****
relational_expression->relational_expression < @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��497
****size: 33 ****
relational_expression->relational_expression LE_OP @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��498
****size: 33 ****
relational_expression->relational_expression GE_OP @@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + - 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * / % - 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , + * INC_OP ( DEC_OP / % - 
****************

״̬��499
****size: 38 ****
equality_expression->equality_expression EQ_OP @@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��500
****size: 38 ****
equality_expression->equality_expression NE_OP @@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + - > GE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * / % - > GE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP 
****************

״̬��501
****size: 41 ****
exclusive_or_expression->exclusive_or_expression ^ @@equality_expression , ] OR_OP AND_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP ^ , EQ_OP NE_OP 
equality_expression->@relational_expression , ] OR_OP AND_OP ^ , EQ_OP NE_OP 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP ^ , EQ_OP NE_OP 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@shift_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
shift_expression->@additive_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < > GE_OP NE_OP 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + - > GE_OP NE_OP 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@unary_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@postfix_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * / % - > GE_OP NE_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP ^ , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP 
****************

״̬��502
****size: 43 ****
logical_and_expression->logical_and_expression AND_OP @@exclusive_or_expression , ] OR_OP AND_OP , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP , ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP , ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP , EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP AND_OP , EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP , EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP AND_OP , EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP , EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ] OR_OP AND_OP , EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��503
****size: 45 ****
logical_or_expression->logical_or_expression OR_OP @@logical_and_expression , ] OR_OP , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP , AND_OP 
logical_and_expression->@exclusive_or_expression , ] OR_OP , AND_OP 
exclusive_or_expression->@equality_expression , ] OR_OP , AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP , AND_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP , AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ] OR_OP , AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP , AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ] OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ] OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ] OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ] OR_OP , AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP , AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@IDENTIFIER , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , ] OR_OP , AND_OP EQ_OP LE_OP < + * INC_OP ( DEC_OP / % - > GE_OP NE_OP ^ 
****************

״̬��504
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->expression @@, assignment_expression , ] , 
****************

״̬��505
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��506
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��507
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��508
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��509
****size: 10 ****
struct_or_union_specifier->STRUCT IDENTIFIER { @@struct_declaration_list } , ) 
struct_declaration_list->@struct_declaration , } INT VOID STRUCT 
struct_declaration_list->@struct_declaration_list struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��510
****size: 9 ****
struct_or_union_specifier->STRUCT { struct_declaration_list @@} , ) 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��511
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ) , 
****************

״̬��512
****size: 1 ****
expression->expression , assignment_expression @, ) , 
****************

״̬��513
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��514
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��515
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��516
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��517
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��518
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@[ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��519
****size: 1 ****
primary_expression->CONSTANT @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��520
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��521
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��522
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->SIZEOF @@( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��523
****size: 1 ****
postfix_expression->primary_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��524
****size: 1 ****
cast_expression->unary_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��525
****size: 5 ****
unary_expression->postfix_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��526
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��527
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��528
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��529
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��530
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@* cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
****************

״̬��531
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@* cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
****************

״̬��532
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��533
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��534
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��535
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��536
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->relational_expression @@LE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
****************

״̬��537
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->relational_expression @@LE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
****************

״̬��538
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ) OR_OP AND_OP ^ , 
equality_expression->equality_expression @@EQ_OP relational_expression , ) OR_OP AND_OP ^ , EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ) OR_OP AND_OP ^ , EQ_OP NE_OP 
****************

״̬��539
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ) OR_OP AND_OP , 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ) OR_OP AND_OP , ^ 
****************

״̬��540
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ) OR_OP , 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ) OR_OP , AND_OP 
****************

״̬��541
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��542
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��543
****size: 49 ****
argument_expression_list->argument_expression_list , @@assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) , OR_OP 
logical_or_expression->@logical_and_expression , ) , OR_OP 
unary_expression->@unary_operator cast_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) , OR_OP AND_OP 
logical_and_expression->@exclusive_or_expression , ) , OR_OP AND_OP 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
exclusive_or_expression->@equality_expression , ) , OR_OP AND_OP ^ 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) , OR_OP AND_OP ^ 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
equality_expression->@equality_expression EQ_OP relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
equality_expression->@equality_expression NE_OP relational_expression , ) , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->@relational_expression LE_OP shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression < shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression > shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
relational_expression->@relational_expression GE_OP shift_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
shift_expression->@additive_expression , ) , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
additive_expression->@additive_expression + multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
additive_expression->@additive_expression - multiplicative_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression * cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression / cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
multiplicative_expression->@multiplicative_expression % cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , ) , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��544
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��545
****size: 51 ****
primary_expression->( @@expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��546
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��547
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��548
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��549
****size: 1 ****
unary_expression->INC_OP unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��550
****size: 2 ****
primary_expression->( expression @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��551
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��552
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��553
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��554
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��555
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��556
****size: 1 ****
unary_expression->unary_operator cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��557
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , IDENTIFIER ( ) , 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��558
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, IDENTIFIER ( ) , 
****************

״̬��559
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression @@] , ) , ( 
****************

״̬��560
****size: 1 ****
direct_declarator->( direct_declarator ) @, ) , ( 
****************

״̬��561
****size: 1 ****
direct_declarator->direct_declarator ( ) @, ) , ( 
****************

״̬��562
****size: 2 ****
direct_declarator->direct_declarator ( parameter_list @@) , ) , ( 
parameter_list->parameter_list @@, parameter_declaration , ) , 
****************

״̬��563
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, = ; , ( 
****************

״̬��564
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, = ; , ( 
****************

״̬��565
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��566
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��567
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��568
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
expression->expression @@, assignment_expression , ] , 
****************

״̬��569
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��570
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��571
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��572
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��573
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, } , 
****************

״̬��574
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��575
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��576
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��577
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��578
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@[ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��579
****size: 1 ****
primary_expression->CONSTANT @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��580
****size: 23 ****
unary_expression->INC_OP @@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��581
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��582
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->SIZEOF @@( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��583
****size: 1 ****
postfix_expression->primary_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��584
****size: 1 ****
cast_expression->unary_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��585
****size: 5 ****
unary_expression->postfix_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
postfix_expression->postfix_expression @@INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��586
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��587
****size: 25 ****
unary_expression->unary_operator @@cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��588
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��589
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��590
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
****************

״̬��591
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ 
multiplicative_expression->multiplicative_expression @@* cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , } , OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ * / % 
****************

״̬��592
****size: 1 ****
relational_expression->relational_expression > shift_expression @, } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��593
****size: 1 ****
relational_expression->relational_expression < shift_expression @, } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��594
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��595
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, } , OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ 
****************

״̬��596
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
****************

״̬��597
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, } , OR_OP AND_OP EQ_OP NE_OP ^ 
relational_expression->relational_expression @@LE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , } , OR_OP AND_OP EQ_OP NE_OP ^ LE_OP < > GE_OP 
****************

״̬��598
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, } , OR_OP AND_OP ^ 
equality_expression->equality_expression @@EQ_OP relational_expression , } , OR_OP AND_OP ^ EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , } , OR_OP AND_OP ^ EQ_OP NE_OP 
****************

״̬��599
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, } , OR_OP AND_OP 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , } , OR_OP AND_OP ^ 
****************

״̬��600
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, } , OR_OP 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , } , OR_OP AND_OP 
****************

״̬��601
****size: 1 ****
initializer->{ initializer_list , } @, ; , 
****************

״̬��602
****size: 1 ****
initializer_list->initializer_list , assignment_expression @, } , 
****************

״̬��603
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��604
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��605
****size: 51 ****
primary_expression->( @@expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��606
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��607
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��608
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��609
****size: 1 ****
unary_expression->INC_OP unary_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��610
****size: 2 ****
primary_expression->( expression @@) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��611
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��612
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��613
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��614
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��615
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��616
****size: 1 ****
unary_expression->unary_operator cast_expression @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��617
****size: 72 ****
selection_statement->SWITCH ( expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��618
****size: 1 ****
expression_statement->expression ; @, ; DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
****************

״̬��619
****size: 1 ****
expression_statement->; @, ) CONSTANT DEC_OP IDENTIFIER INC_OP ( SIZEOF ~ * ! - & + 
****************

״̬��620
****size: 2 ****
expression_statement->expression @@; , ) CONSTANT DEC_OP IDENTIFIER INC_OP ( SIZEOF ~ * ! - & + 
expression->expression @@, assignment_expression , ; , 
****************

״̬��621
****size: 52 ****
iteration_statement->FOR ( expression_statement expression_statement @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->FOR ( expression_statement expression_statement @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��622
****size: 1 ****
compound_statement->{ declaration_list statement_list } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��623
****size: 73 ****
selection_statement->IF ( expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->IF ( expression ) @@statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��624
****size: 72 ****
iteration_statement->WHILE ( expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��625
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
expression->expression @@, assignment_expression , ] , 
****************

״̬��626
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��627
****size: 1 ****
primary_expression->( expression ) @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��628
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��629
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��630
****size: 1 ****
assignment_expression->unary_expression = assignment_expression @, ] , 
****************

״̬��631
****size: 1 ****
expression->expression , assignment_expression @, ] , 
****************

״̬��632
****size: 1 ****
postfix_expression->postfix_expression ( ) @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��633
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��634
****size: 1 ****
cast_expression->( type_name @@) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��635
****size: 23 ****
unary_expression->DEC_OP @@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��636
****size: 3 ****
postfix_expression->IDENTIFIER @@. IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->IDENTIFIER @@[ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->IDENTIFIER @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��637
****size: 1 ****
primary_expression->CONSTANT @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��638
****size: 23 ****
unary_expression->INC_OP @@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��639
****size: 59 ****
cast_expression->( @@type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��640
****size: 24 ****
unary_expression->SIZEOF @@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->SIZEOF @@( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��641
****size: 1 ****
postfix_expression->primary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��642
****size: 1 ****
cast_expression->unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��643
****size: 5 ****
unary_expression->postfix_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->postfix_expression @@INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression @@DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��644
****size: 1 ****
multiplicative_expression->multiplicative_expression * cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��645
****size: 25 ****
unary_expression->unary_operator @@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��646
****size: 1 ****
multiplicative_expression->multiplicative_expression / cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��647
****size: 1 ****
multiplicative_expression->multiplicative_expression % cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��648
****size: 4 ****
additive_expression->additive_expression + multiplicative_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
****************

״̬��649
****size: 4 ****
additive_expression->additive_expression - multiplicative_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->multiplicative_expression @@* cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@/ cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
multiplicative_expression->multiplicative_expression @@% cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , * / % 
****************

״̬��650
****size: 1 ****
relational_expression->relational_expression > shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��651
****size: 1 ****
relational_expression->relational_expression < shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��652
****size: 1 ****
relational_expression->relational_expression LE_OP shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��653
****size: 1 ****
relational_expression->relational_expression GE_OP shift_expression @, ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
****************

״̬��654
****size: 5 ****
equality_expression->equality_expression EQ_OP relational_expression @, ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->relational_expression @@LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
****************

״̬��655
****size: 5 ****
equality_expression->equality_expression NE_OP relational_expression @, ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->relational_expression @@LE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@< shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@> shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
relational_expression->relational_expression @@GE_OP shift_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , LE_OP < > GE_OP 
****************

״̬��656
****size: 3 ****
exclusive_or_expression->exclusive_or_expression ^ equality_expression @, ] OR_OP AND_OP ^ , 
equality_expression->equality_expression @@EQ_OP relational_expression , ] OR_OP AND_OP ^ , EQ_OP NE_OP 
equality_expression->equality_expression @@NE_OP relational_expression , ] OR_OP AND_OP ^ , EQ_OP NE_OP 
****************

״̬��657
****size: 2 ****
logical_and_expression->logical_and_expression AND_OP exclusive_or_expression @, ] OR_OP AND_OP , 
exclusive_or_expression->exclusive_or_expression @@^ equality_expression , ] OR_OP AND_OP , ^ 
****************

״̬��658
****size: 2 ****
logical_or_expression->logical_or_expression OR_OP logical_and_expression @, ] OR_OP , 
logical_and_expression->logical_and_expression @@AND_OP exclusive_or_expression , ] OR_OP , AND_OP 
****************

״̬��659
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��660
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��661
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��662
****size: 9 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list @@} , ) 
struct_declaration_list->struct_declaration_list @@struct_declaration , } INT VOID STRUCT 
struct_declaration->@type_specifier struct_declarator_list ; , } INT VOID STRUCT 
type_specifier->@INT , IDENTIFIER ( 
type_specifier->@VOID , IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , IDENTIFIER ( 
****************

״̬��663
****size: 1 ****
struct_or_union_specifier->STRUCT { struct_declaration_list } @, ) 
****************

״̬��664
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��665
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��666
****size: 51 ****
primary_expression->( @@expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��667
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��668
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��669
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��670
****size: 1 ****
unary_expression->INC_OP unary_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��671
****size: 2 ****
primary_expression->( expression @@) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��672
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��673
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��674
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��675
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��676
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��677
****size: 1 ****
unary_expression->unary_operator cast_expression @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��678
****size: 1 ****
argument_expression_list->argument_expression_list , assignment_expression @, ) , 
****************

״̬��679
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��680
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��681
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��682
****size: 1 ****
primary_expression->( expression ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��683
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��684
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��685
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��686
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, IDENTIFIER ( ) , 
****************

״̬��687
****size: 1 ****
direct_declarator->IDENTIFIER [ assignment_expression ] @, ) , ( 
****************

״̬��688
****size: 1 ****
direct_declarator->direct_declarator ( parameter_list ) @, ) , ( 
****************

״̬��689
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��690
****size: 1 ****
cast_expression->( type_name ) cast_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��691
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��692
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��693
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
cast_expression->@( type_name ) cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@unary_operator cast_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@DEC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@postfix_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@INC_OP unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF unary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_expression->@SIZEOF ( type_name ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
primary_expression->@( expression ) , = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��694
****size: 51 ****
primary_expression->( @@expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��695
****size: 1 ****
unary_expression->DEC_OP unary_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��696
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��697
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��698
****size: 1 ****
unary_expression->INC_OP unary_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��699
****size: 2 ****
primary_expression->( expression @@) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��700
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
primary_expression->( @@expression ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��701
****size: 1 ****
unary_expression->SIZEOF unary_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��702
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��703
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��704
****size: 52 ****
postfix_expression->postfix_expression ( @@) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��705
****size: 1 ****
unary_expression->unary_operator cast_expression @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��706
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��707
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��708
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��709
****size: 1 ****
primary_expression->( expression ) @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��710
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��711
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��712
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��713
****size: 1 ****
selection_statement->SWITCH ( expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��714
****size: 1 ****
expression_statement->expression ; @, ) CONSTANT DEC_OP IDENTIFIER INC_OP ( SIZEOF ~ * ! - & + 
****************

״̬��715
****size: 72 ****
iteration_statement->FOR ( expression_statement expression_statement ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��716
****size: 2 ****
iteration_statement->FOR ( expression_statement expression_statement expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->expression @@, assignment_expression , ) , 
****************

״̬��717
****size: 1 ****
jump_statement->CONTINUE @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��718
****size: 1 ****
selection_statement->SWITCH @@( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��719
****size: 1 ****
jump_statement->BREAK @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��720
****size: 2 ****
iteration_statement->FOR @@( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->FOR @@( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��721
****size: 1 ****
expression_statement->; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��722
****size: 87 ****
compound_statement->{ @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->{ @@statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->{ @@declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->{ @@declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement_list->@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->@statement_list statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration_list->@declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration_list->@declaration_list declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration->@type_specifier ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
type_specifier->@INT , ; IDENTIFIER ( 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��723
****size: 52 ****
jump_statement->RETURN @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->RETURN @@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��724
****size: 2 ****
selection_statement->IF @@( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->IF @@( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��725
****size: 1 ****
iteration_statement->WHILE @@( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��726
****size: 2 ****
expression_statement->expression @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->expression @@, assignment_expression , ; , 
****************

״̬��727
****size: 1 ****
statement->expression_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��728
****size: 2 ****
selection_statement->IF ( expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->IF ( expression ) statement @@ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��729
****size: 1 ****
statement->compound_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��730
****size: 1 ****
statement->jump_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��731
****size: 1 ****
statement->selection_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��732
****size: 1 ****
statement->iteration_statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��733
****size: 1 ****
iteration_statement->WHILE ( expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��734
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��735
****size: 1 ****
cast_expression->( type_name ) cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��736
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��737
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��738
****size: 25 ****
cast_expression->( type_name ) @@cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression INC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@primary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@IDENTIFIER [ expression ] , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression ( argument_expression_list ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->@postfix_expression DEC_OP , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@IDENTIFIER , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@CONSTANT , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
primary_expression->@( expression ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��739
****size: 51 ****
primary_expression->( @@expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��740
****size: 1 ****
unary_expression->DEC_OP unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��741
****size: 51 ****
postfix_expression->IDENTIFIER [ @@expression ] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->@assignment_expression , ] , 
expression->@expression , assignment_expression , ] , 
assignment_expression->@logical_or_expression , ] , 
assignment_expression->@unary_expression = assignment_expression , ] , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ] OR_OP , 
logical_or_expression->@logical_and_expression , ] OR_OP , 
unary_expression->@unary_operator cast_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ] OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ] OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ] OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ] OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ] OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ] OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ] OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��742
****size: 1 ****
postfix_expression->IDENTIFIER . @@IDENTIFIER , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��743
****size: 1 ****
unary_expression->INC_OP unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��744
****size: 2 ****
primary_expression->( expression @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ) , 
****************

״̬��745
****size: 59 ****
unary_expression->SIZEOF ( @@type_name ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->( @@expression ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
type_name->@type_specifier , ) 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
type_specifier->@INT , ) 
type_specifier->@VOID , ) 
type_specifier->@struct_or_union_specifier , ) 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ) 
struct_or_union_specifier->@STRUCT IDENTIFIER , ) 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ) 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��746
****size: 1 ****
unary_expression->SIZEOF unary_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��747
****size: 1 ****
postfix_expression->postfix_expression DEC_OP @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��748
****size: 1 ****
postfix_expression->postfix_expression INC_OP @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��749
****size: 52 ****
postfix_expression->postfix_expression ( @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
postfix_expression->postfix_expression ( @@argument_expression_list ) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
argument_expression_list->@assignment_expression , ) , 
argument_expression_list->@argument_expression_list , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��750
****size: 1 ****
unary_expression->unary_operator cast_expression @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��751
****size: 1 ****
struct_or_union_specifier->STRUCT IDENTIFIER { struct_declaration_list } @, ) 
****************

״̬��752
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��753
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��754
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��755
****size: 1 ****
primary_expression->( expression ) @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��756
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��757
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��758
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��759
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��760
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��761
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��762
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��763
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��764
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��765
****size: 1 ****
primary_expression->( expression ) @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��766
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��767
****size: 1 ****
postfix_expression->postfix_expression ( ) @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��768
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��769
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��770
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��771
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ; , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��772
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��773
****size: 72 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��774
****size: 1 ****
jump_statement->CONTINUE ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��775
****size: 51 ****
selection_statement->SWITCH ( @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��776
****size: 1 ****
jump_statement->BREAK ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��777
****size: 54 ****
iteration_statement->FOR ( @@expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->FOR ( @@expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , ; DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
expression_statement->@expression ; , ; DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��778
****size: 1 ****
compound_statement->{ } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��779
****size: 73 ****
compound_statement->{ statement_list @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement_list->statement_list @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��780
****size: 84 ****
compound_statement->{ declaration_list @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->{ declaration_list @@statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
declaration_list->declaration_list @@declaration , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement_list->@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement_list->@statement_list statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
declaration->@type_specifier ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
declaration->@type_specifier init_declarator_list ; , } ; DEC_OP CONSTANT IDENTIFIER WHILE SWITCH INC_OP FOR IF ( SIZEOF { CONTINUE BREAK RETURN ~ * ! - & + INT VOID STRUCT 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
type_specifier->@INT , ; IDENTIFIER ( 
type_specifier->@VOID , ; IDENTIFIER ( 
type_specifier->@struct_or_union_specifier , ; IDENTIFIER ( 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
struct_or_union_specifier->@STRUCT IDENTIFIER { struct_declaration_list } , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT IDENTIFIER , ; IDENTIFIER ( 
struct_or_union_specifier->@STRUCT { struct_declaration_list } , ; IDENTIFIER ( 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��781
****size: 1 ****
jump_statement->RETURN ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��782
****size: 2 ****
jump_statement->RETURN expression @@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->expression @@, assignment_expression , ; , 
****************

״̬��783
****size: 52 ****
selection_statement->IF ( @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->IF ( @@expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��784
****size: 51 ****
iteration_statement->WHILE ( @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��785
****size: 1 ****
expression_statement->expression ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��786
****size: 72 ****
selection_statement->IF ( expression ) statement ELSE @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��787
****size: 1 ****
cast_expression->( type_name ) cast_expression @, = ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��788
****size: 2 ****
postfix_expression->IDENTIFIER [ expression @@] , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
expression->expression @@, assignment_expression , ] , 
****************

״̬��789
****size: 1 ****
postfix_expression->IDENTIFIER . IDENTIFIER @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��790
****size: 1 ****
primary_expression->( expression ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��791
****size: 1 ****
unary_expression->SIZEOF ( type_name @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��792
****size: 1 ****
postfix_expression->postfix_expression ( ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��793
****size: 2 ****
postfix_expression->postfix_expression ( argument_expression_list @@) , ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
argument_expression_list->argument_expression_list @@, assignment_expression , ) , 
****************

״̬��794
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��795
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��796
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��797
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��798
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ 
****************

״̬��799
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, } , OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ INC_OP ( DEC_OP 
****************

״̬��800
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��801
****size: 2 ****
selection_statement->SWITCH ( expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��802
****size: 54 ****
iteration_statement->FOR ( expression_statement @@expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->FOR ( expression_statement @@expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , ) CONSTANT DEC_OP IDENTIFIER INC_OP ( SIZEOF ~ * ! - & + 
expression_statement->@expression ; , ) CONSTANT DEC_OP IDENTIFIER INC_OP ( SIZEOF ~ * ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��803
****size: 1 ****
compound_statement->{ statement_list } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��804
****size: 1 ****
compound_statement->{ declaration_list } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��805
****size: 73 ****
compound_statement->{ declaration_list statement_list @@} , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement_list->statement_list @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��806
****size: 1 ****
jump_statement->RETURN expression ; @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��807
****size: 3 ****
selection_statement->IF ( expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->IF ( expression @@) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��808
****size: 2 ****
iteration_statement->WHILE ( expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��809
****size: 1 ****
selection_statement->IF ( expression ) statement ELSE statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + 
****************

״̬��810
****size: 1 ****
postfix_expression->IDENTIFIER [ expression ] @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��811
****size: 1 ****
unary_expression->SIZEOF ( type_name ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��812
****size: 1 ****
postfix_expression->postfix_expression ( argument_expression_list ) @, ] OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , INC_OP ( DEC_OP 
****************

״̬��813
****size: 72 ****
selection_statement->SWITCH ( expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��814
****size: 52 ****
iteration_statement->FOR ( expression_statement expression_statement @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->FOR ( expression_statement expression_statement @@expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ) , 
expression->@expression , assignment_expression , ) , 
assignment_expression->@logical_or_expression , ) , 
assignment_expression->@unary_expression = assignment_expression , ) , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ) OR_OP , 
logical_or_expression->@logical_and_expression , ) OR_OP , 
unary_expression->@unary_operator cast_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ) OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ) OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ) OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ) OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ) OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ) OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ) OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ) OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��815
****size: 1 ****
compound_statement->{ declaration_list statement_list } @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��816
****size: 73 ****
selection_statement->IF ( expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->IF ( expression ) @@statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��817
****size: 72 ****
iteration_statement->WHILE ( expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��818
****size: 1 ****
selection_statement->SWITCH ( expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��819
****size: 72 ****
iteration_statement->FOR ( expression_statement expression_statement ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��820
****size: 2 ****
iteration_statement->FOR ( expression_statement expression_statement expression @@) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->expression @@, assignment_expression , ) , 
****************

״̬��821
****size: 2 ****
selection_statement->IF ( expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->IF ( expression ) statement @@ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��822
****size: 1 ****
iteration_statement->WHILE ( expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��823
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��824
****size: 72 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��825
****size: 72 ****
selection_statement->IF ( expression ) statement ELSE @@statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@expression_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@selection_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@compound_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@iteration_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
statement->@jump_statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression_statement->@expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@SWITCH ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
selection_statement->@IF ( expression ) statement ELSE statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
compound_statement->@{ declaration_list statement_list } , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@WHILE ( expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
iteration_statement->@FOR ( expression_statement expression_statement expression ) statement , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@CONTINUE ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@BREAK ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
jump_statement->@RETURN expression ; , } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
expression->@assignment_expression , ; , 
expression->@expression , assignment_expression , ; , 
assignment_expression->@logical_or_expression , ; , 
assignment_expression->@unary_expression = assignment_expression , ; , 
logical_or_expression->@logical_or_expression OR_OP logical_and_expression , ; OR_OP , 
logical_or_expression->@logical_and_expression , ; OR_OP , 
unary_expression->@unary_operator cast_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@DEC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@postfix_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@INC_OP unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF unary_expression , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
unary_expression->@SIZEOF ( type_name ) , = ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
logical_and_expression->@logical_and_expression AND_OP exclusive_or_expression , ; OR_OP AND_OP , 
logical_and_expression->@exclusive_or_expression , ; OR_OP AND_OP , 
unary_operator->@* , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@- , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@& , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@+ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@~ , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
unary_operator->@! , DEC_OP CONSTANT IDENTIFIER ( INC_OP SIZEOF ~ * ! - & + 
postfix_expression->@IDENTIFIER . IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression INC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@primary_expression , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@IDENTIFIER [ expression ] , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression ( argument_expression_list ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
postfix_expression->@postfix_expression DEC_OP , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
exclusive_or_expression->@equality_expression , ; OR_OP AND_OP ^ , 
exclusive_or_expression->@exclusive_or_expression ^ equality_expression , ; OR_OP AND_OP ^ , 
primary_expression->@IDENTIFIER , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@CONSTANT , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
primary_expression->@( expression ) , = INC_OP ( DEC_OP ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
equality_expression->@equality_expression EQ_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
equality_expression->@equality_expression NE_OP relational_expression , ; OR_OP AND_OP EQ_OP NE_OP ^ , 
relational_expression->@relational_expression LE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression < shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression > shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
relational_expression->@relational_expression GE_OP shift_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
shift_expression->@additive_expression , ; OR_OP AND_OP EQ_OP LE_OP < > GE_OP NE_OP ^ , 
additive_expression->@additive_expression + multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
additive_expression->@additive_expression - multiplicative_expression , ; OR_OP AND_OP EQ_OP LE_OP < + - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression * cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression / cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
multiplicative_expression->@multiplicative_expression % cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@unary_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
cast_expression->@( type_name ) cast_expression , ; OR_OP AND_OP EQ_OP LE_OP < + * / % - > GE_OP NE_OP ^ , 
****************

״̬��826
****size: 1 ****
iteration_statement->FOR ( expression_statement expression_statement expression ) statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬��827
****size: 1 ****
selection_statement->IF ( expression ) statement ELSE statement @, } ; CONSTANT DEC_OP WHILE SWITCH IDENTIFIER FOR IF INC_OP ( SIZEOF { CONTINUE BREAK RETURN * ~ ! - & + ELSE 
****************

״̬  	$	DEC_OP	IDENTIFIER	INT	CONSTANT	INC_OP	(	)	CONTINUE	[	]	.	SWITCH	,	SIZEOF	&	*	+	-	BREAK	~	>	!	/	%	<	LE_OP	ELSE	FOR	GE_OP	EQ_OP	NE_OP	^	AND_OP	OR_OP	=	}	;	{	VOID	RETURN	STRUCT	IF	WHILE	primary_expression	unary_expression	assignment_expression	translation_unit	expression	struct_declaration	postfix_expression	expression_statement	argument_expression_list	type_name	cast_expression	unary_operator	multiplicative_expression	statement	additive_expression	shift_expression	direct_declarator	compound_statement	relational_expression	equality_expression	exclusive_or_expression	logical_and_expression	logical_or_expression	declaration	init_declarator	struct_declarator_list	statement_list	function_definition	type_specifier	init_declarator_list	declaration_list	declarator	initializer	struct_or_union_specifier	jump_statement	struct_declaration_list	parameter_list	external_declaration	parameter_declaration	initializer_list	selection_statement	iteration_statement	function_compound_statement	argumented_translation_unit	
״̬0	-1	-1	-1	1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	2	-1	3	-1	-1	-1	-1	-1	4	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	5	-1	-1	-1	6	7	-1	-1	-1	-1	8	-1	-1	-1	9	-1	-1	-1	-1	-1	-1	
״̬1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬2	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬3	-1	-1	10	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	11	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬4	-1	-1	-1	1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	2	-1	3	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	5	-1	-1	-1	6	7	-1	-1	-1	-1	8	-1	-1	-1	12	-1	-1	-1	-1	-1	-1	
״̬5	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬6	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬7	-1	-1	13	-1	-1	-1	14	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	15	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	16	-1	-1	-1	-1	-1	-1	-1	17	-1	-1	-1	-1	18	-1	19	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬8	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬9	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬10	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	20	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬11	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	27	-1	-1	-1	-1	-1	-1	-1	-1	
״̬12	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬13	-1	-1	-1	-1	-1	-1	-1	-1	-1	28	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬14	-1	-1	29	-1	-1	-1	30	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	31	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬15	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬16	-1	-1	-1	-1	-1	-1	32	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬17	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬18	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	33	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	34	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬19	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	35	-1	-1	36	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	37	-1	
״̬20	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	38	-1	-1	-1	-1	-1	-1	-1	-1	
״̬21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬22	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬23	-1	-1	39	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	40	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬25	-1	-1	41	-1	-1	-1	42	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	43	-1	-1	-1	-1	-1	-1	-1	-1	44	-1	-1	-1	-1	-1	45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬27	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	46	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬28	-1	48	49	-1	50	51	52	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	61	62	-1	-1	-1	63	-1	-1	-1	64	65	66	-1	67	68	-1	-1	69	70	71	72	73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬29	-1	-1	-1	-1	-1	-1	-1	-1	-1	74	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬30	-1	-1	29	-1	-1	-1	30	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	75	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬31	-1	-1	-1	-1	-1	-1	76	77	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬32	-1	-1	-1	78	-1	-1	-1	79	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	80	-1	81	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	82	-1	-1	-1	-1	83	-1	-1	84	-1	85	-1	-1	-1	-1	-1	
״̬33	-1	-1	86	-1	-1	-1	87	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	88	-1	-1	-1	-1	-1	-1	-1	89	-1	-1	-1	-1	-1	-1	90	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬34	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬35	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	97	-1	-1	-1	-1	-1	98	99	100	-1	-1	-1	101	-1	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	112	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬36	-1	91	92	1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	117	118	119	2	120	3	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	126	105	106	-1	127	107	108	109	110	111	128	-1	-1	129	-1	130	-1	131	-1	-1	8	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬37	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬38	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	135	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬39	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	136	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬40	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	137	-1	-1	-1	-1	-1	-1	-1	-1	
״̬41	-1	-1	-1	-1	-1	-1	-1	-1	-1	138	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬42	-1	-1	29	-1	-1	-1	30	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	139	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬43	-1	-1	-1	-1	-1	-1	140	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬44	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	141	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	142	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬45	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬46	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬48	-1	48	49	-1	50	51	143	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	144	-1	-1	-1	-1	63	-1	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬49	-1	-1	-1	-1	-1	-1	-1	-1	-1	145	-1	146	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬50	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬51	-1	48	49	-1	50	51	143	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	147	-1	-1	-1	-1	63	-1	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬52	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	160	-1	161	-1	-1	162	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬53	-1	48	49	-1	50	51	175	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	176	-1	-1	-1	-1	63	-1	-1	-1	-1	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬54	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬55	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬56	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬57	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬58	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬60	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬61	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	177	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬62	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	178	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬63	-1	179	-1	-1	-1	180	181	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬64	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬65	-1	48	49	-1	50	51	182	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	183	-1	-1	-1	-1	63	-1	-1	-1	184	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬66	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	185	-1	-1	-1	-1	-1	-1	186	187	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬67	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	188	189	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬68	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬69	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	190	-1	-1	-1	191	192	-1	-1	193	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬70	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	194	195	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬71	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	196	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬72	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	197	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	198	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬74	-1	48	49	-1	50	51	52	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	61	199	-1	-1	-1	63	-1	-1	-1	64	65	66	-1	67	68	-1	-1	69	70	71	72	73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬75	-1	-1	-1	-1	-1	-1	76	200	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬76	-1	-1	-1	78	-1	-1	-1	201	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	80	-1	81	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	82	-1	-1	-1	-1	83	-1	-1	202	-1	85	-1	-1	-1	-1	-1	
״̬77	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬78	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬79	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬80	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬81	-1	-1	203	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	204	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬82	-1	-1	205	-1	-1	-1	206	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	207	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	208	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬83	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬84	-1	-1	-1	-1	-1	-1	-1	209	-1	-1	-1	-1	-1	210	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬85	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬86	-1	-1	-1	-1	-1	-1	-1	-1	-1	211	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬87	-1	-1	29	-1	-1	-1	30	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	212	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬88	-1	-1	-1	-1	-1	-1	213	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬89	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬90	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	35	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬91	-1	91	92	-1	93	94	214	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	98	215	-1	-1	-1	-1	101	-1	-1	-1	-1	103	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬92	-1	-1	-1	-1	-1	-1	-1	-1	-1	216	-1	217	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬93	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬94	-1	91	92	-1	93	94	214	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	98	218	-1	-1	-1	-1	101	-1	-1	-1	-1	103	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬95	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	219	-1	161	-1	-1	220	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬96	-1	91	92	-1	93	94	221	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	98	222	-1	-1	-1	-1	101	-1	-1	-1	-1	103	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬97	-1	223	224	-1	225	226	227	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	229	230	231	-1	-1	-1	232	-1	-1	-1	233	234	235	-1	236	237	-1	-1	238	239	240	241	242	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	243	-1	-1	-1	-1	
״̬98	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬99	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	244	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬100	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬101	-1	245	-1	-1	-1	246	247	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬102	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬103	-1	91	92	-1	93	94	248	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	98	249	-1	-1	-1	-1	101	-1	-1	-1	250	103	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬104	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	251	-1	-1	-1	-1	-1	-1	252	253	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬105	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	254	255	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬106	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬107	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	256	-1	-1	-1	257	258	-1	-1	259	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬108	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	260	261	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬109	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	262	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬110	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	263	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	264	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬112	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬113	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	265	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬114	-1	-1	-1	-1	-1	-1	266	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬115	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	267	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬116	-1	-1	-1	-1	-1	-1	268	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬117	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬118	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬119	-1	91	92	1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	269	118	119	2	120	3	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	126	105	106	-1	127	107	108	109	110	111	128	-1	-1	270	-1	130	-1	271	-1	-1	8	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬120	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	272	-1	-1	-1	-1	-1	-1	98	99	123	-1	273	-1	101	-1	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬121	-1	-1	-1	-1	-1	-1	274	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬122	-1	-1	-1	-1	-1	-1	275	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬123	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬124	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	276	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	277	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬125	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬126	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬127	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬128	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬129	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	278	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	279	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬130	-1	-1	86	-1	-1	-1	87	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	280	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	88	-1	-1	-1	-1	-1	-1	-1	17	-1	-1	-1	-1	281	-1	90	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬131	-1	91	92	1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	282	118	119	2	120	3	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	126	105	106	-1	127	107	108	109	110	111	283	-1	-1	284	-1	130	-1	-1	-1	-1	8	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬132	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬133	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬134	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬135	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬136	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	285	-1	-1	-1	-1	-1	-1	-1	-1	
״̬137	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	286	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬138	-1	48	49	-1	50	51	52	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	61	287	-1	-1	-1	63	-1	-1	-1	64	65	66	-1	67	68	-1	-1	69	70	71	72	73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬139	-1	-1	-1	-1	-1	-1	76	288	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬140	-1	-1	-1	78	-1	-1	-1	289	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	80	-1	81	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	82	-1	-1	-1	-1	83	-1	-1	290	-1	85	-1	-1	-1	-1	-1	
״̬141	-1	-1	41	-1	-1	-1	42	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	43	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	291	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬142	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬143	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	160	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬144	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬145	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	301	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬146	-1	-1	313	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬147	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬148	-1	148	149	-1	151	152	314	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	315	-1	-1	-1	-1	161	-1	-1	-1	-1	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬149	-1	-1	-1	-1	-1	-1	-1	-1	-1	316	-1	317	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬150	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬151	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬152	-1	148	149	-1	151	152	314	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	318	-1	-1	-1	-1	161	-1	-1	-1	-1	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬153	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	319	-1	161	-1	-1	320	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬154	-1	148	149	-1	151	152	321	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	322	-1	-1	-1	-1	161	-1	-1	-1	-1	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬155	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬156	-1	-1	323	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	324	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬157	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬158	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	325	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬159	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬160	-1	-1	-1	-1	-1	-1	-1	326	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬161	-1	328	-1	-1	-1	329	330	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬162	-1	-1	-1	-1	-1	-1	-1	331	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬163	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬164	-1	148	149	-1	151	152	332	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	333	-1	-1	-1	-1	161	-1	-1	-1	334	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬165	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	335	-1	-1	-1	-1	-1	-1	336	337	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬166	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	338	339	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬167	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬168	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	340	-1	-1	-1	341	342	-1	-1	343	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬169	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	344	345	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬170	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	346	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬171	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	348	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬173	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬175	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	160	-1	161	-1	-1	349	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬176	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬177	-1	48	49	-1	50	51	52	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	61	350	-1	-1	-1	63	-1	-1	-1	64	65	66	-1	67	68	-1	-1	69	70	71	72	73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬178	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬179	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬180	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬181	-1	148	149	-1	151	152	153	351	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	353	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬182	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	160	-1	161	-1	-1	354	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬183	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬184	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬185	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	364	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬186	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	366	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬187	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	367	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬188	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	368	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬189	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	369	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬190	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	370	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬191	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	371	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬192	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	372	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬193	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	373	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬194	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	68	-1	-1	374	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬195	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	68	-1	-1	375	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬196	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	68	-1	-1	69	376	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬197	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	68	-1	-1	69	70	377	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬198	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	64	365	66	-1	67	68	-1	-1	69	70	71	378	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬199	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	379	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬200	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬201	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬202	-1	-1	-1	-1	-1	-1	-1	380	-1	-1	-1	-1	-1	210	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬203	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	381	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬204	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	382	-1	-1	-1	-1	-1	-1	-1	-1	
״̬205	-1	-1	-1	-1	-1	-1	-1	-1	-1	383	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬206	-1	-1	29	-1	-1	-1	30	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	384	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬207	-1	-1	-1	-1	-1	-1	385	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬208	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬209	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬210	-1	-1	-1	78	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	80	-1	81	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	82	-1	-1	-1	-1	83	-1	-1	-1	-1	386	-1	-1	-1	-1	-1	
״̬211	-1	48	49	-1	50	51	52	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	61	387	-1	-1	-1	63	-1	-1	-1	64	65	66	-1	67	68	-1	-1	69	70	71	72	73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬212	-1	-1	-1	-1	-1	-1	76	388	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬213	-1	-1	-1	78	-1	-1	-1	389	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	80	-1	81	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	82	-1	-1	-1	-1	83	-1	-1	390	-1	85	-1	-1	-1	-1	-1	
״̬214	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	219	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬215	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬216	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	391	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬217	-1	-1	392	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬218	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬219	-1	-1	-1	-1	-1	-1	-1	393	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬220	-1	-1	-1	-1	-1	-1	-1	394	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬221	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	219	-1	161	-1	-1	395	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬222	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬223	-1	223	224	-1	225	226	396	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	229	397	-1	-1	-1	-1	232	-1	-1	-1	-1	234	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬224	-1	-1	-1	-1	-1	-1	-1	-1	-1	398	-1	399	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬225	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬226	-1	223	224	-1	225	226	396	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	229	400	-1	-1	-1	-1	232	-1	-1	-1	-1	234	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬227	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	401	-1	161	-1	-1	402	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬228	-1	223	224	-1	225	226	403	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	229	404	-1	-1	-1	-1	232	-1	-1	-1	-1	234	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬229	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬230	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	405	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬231	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬232	-1	406	-1	-1	-1	407	408	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬233	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬234	-1	223	224	-1	225	226	409	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	229	410	-1	-1	-1	-1	232	-1	-1	-1	411	234	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬235	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	412	-1	-1	-1	-1	-1	-1	413	414	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬236	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	415	416	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬237	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬238	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	417	-1	-1	-1	418	419	-1	-1	420	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬239	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	421	422	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬240	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	423	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬241	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	424	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬242	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	425	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬243	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	426	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	427	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬244	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	98	99	428	-1	-1	-1	101	-1	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬245	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬246	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬247	-1	148	149	-1	151	152	153	429	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	430	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬248	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	219	-1	161	-1	-1	431	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬249	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬250	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬251	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	441	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬252	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	443	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬253	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	444	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬254	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	445	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬255	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	446	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬256	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	447	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬257	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	448	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬258	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	449	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬259	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	450	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬260	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	106	-1	-1	451	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬261	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	106	-1	-1	452	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬262	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	106	-1	-1	107	453	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬263	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	106	-1	-1	107	108	454	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬264	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	102	442	104	-1	105	106	-1	-1	107	108	109	455	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬265	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬266	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	456	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬267	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬268	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	457	-1	-1	-1	-1	-1	-1	98	99	123	-1	458	-1	101	459	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬269	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬270	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	460	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	279	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬271	-1	91	92	1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	461	118	119	2	120	3	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	126	105	106	-1	127	107	108	109	110	111	283	-1	-1	462	-1	130	-1	-1	-1	-1	8	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬272	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬273	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	276	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	463	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬274	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	464	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬275	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	465	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬276	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	98	99	466	-1	-1	-1	101	-1	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬277	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬278	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬279	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬280	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬281	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	33	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	467	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬282	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬283	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬284	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	468	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	279	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬285	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	469	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬286	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬287	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	470	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬288	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬289	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬290	-1	-1	-1	-1	-1	-1	-1	471	-1	-1	-1	-1	-1	210	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬291	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬292	-1	292	293	-1	294	295	472	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	473	-1	-1	-1	-1	302	-1	-1	-1	-1	304	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬293	-1	-1	-1	-1	-1	-1	-1	-1	-1	474	-1	475	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬294	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬295	-1	292	293	-1	294	295	472	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	476	-1	-1	-1	-1	302	-1	-1	-1	-1	304	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬296	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	477	-1	161	-1	-1	478	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬297	-1	292	293	-1	294	295	479	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	480	-1	-1	-1	-1	302	-1	-1	-1	-1	304	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬298	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬299	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	481	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬300	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬301	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	482	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬302	-1	484	-1	-1	-1	485	486	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬303	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬304	-1	292	293	-1	294	295	487	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	488	-1	-1	-1	-1	302	-1	-1	-1	489	304	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬305	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	490	-1	-1	-1	-1	-1	-1	491	492	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬306	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	493	494	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬307	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬308	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	495	-1	-1	-1	496	497	-1	-1	498	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬309	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	499	500	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬310	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	501	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬311	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	502	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	503	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬313	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬314	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	319	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬315	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬316	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	504	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬317	-1	-1	505	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬318	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬319	-1	-1	-1	-1	-1	-1	-1	506	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬320	-1	-1	-1	-1	-1	-1	-1	507	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬321	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	319	-1	161	-1	-1	508	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬322	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬323	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	509	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬324	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	510	-1	-1	-1	-1	-1	-1	-1	-1	
״̬325	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	511	-1	-1	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬326	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬327	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	512	-1	-1	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬328	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬329	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬330	-1	148	149	-1	151	152	153	513	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	514	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬331	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	515	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬332	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	319	-1	161	-1	-1	516	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬333	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬334	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬335	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	526	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬336	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	528	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬337	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	529	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬338	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	530	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬339	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	531	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬340	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	532	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬341	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	533	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬342	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	534	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬343	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	535	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬344	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	167	-1	-1	536	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬345	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	167	-1	-1	537	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬346	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	167	-1	-1	168	538	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬347	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	167	-1	-1	168	169	539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬348	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	163	527	165	-1	166	167	-1	-1	168	169	170	540	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬349	-1	-1	-1	-1	-1	-1	-1	541	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬350	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬351	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬352	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬353	-1	-1	-1	-1	-1	-1	-1	542	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬354	-1	-1	-1	-1	-1	-1	-1	544	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬355	-1	355	356	-1	357	358	545	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	546	-1	-1	-1	-1	363	-1	-1	-1	-1	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬356	-1	-1	-1	-1	-1	-1	-1	-1	-1	547	-1	548	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬357	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬358	-1	355	356	-1	357	358	545	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	549	-1	-1	-1	-1	363	-1	-1	-1	-1	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬359	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	550	-1	161	-1	-1	162	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬360	-1	355	356	-1	357	358	551	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	552	-1	-1	-1	-1	363	-1	-1	-1	-1	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬361	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬362	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬363	-1	553	-1	-1	-1	554	555	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬364	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬365	-1	355	356	-1	357	358	359	-1	-1	-1	-1	-1	-1	-1	360	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	361	362	-1	-1	-1	-1	363	-1	-1	-1	556	365	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬366	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬367	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬368	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	185	-1	-1	-1	-1	-1	-1	186	187	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬369	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	185	-1	-1	-1	-1	-1	-1	186	187	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬370	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬371	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬372	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬373	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬374	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	190	-1	-1	-1	191	192	-1	-1	193	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬375	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	190	-1	-1	-1	191	192	-1	-1	193	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬376	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	194	195	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬377	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	196	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬378	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	197	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬379	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬380	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬381	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	557	-1	-1	-1	-1	-1	-1	-1	-1	
״̬382	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	558	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬383	-1	48	49	-1	50	51	52	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	61	559	-1	-1	-1	63	-1	-1	-1	64	65	66	-1	67	68	-1	-1	69	70	71	72	73	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬384	-1	-1	-1	-1	-1	-1	76	560	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬385	-1	-1	-1	78	-1	-1	-1	561	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	80	-1	81	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	82	-1	-1	-1	-1	83	-1	-1	562	-1	85	-1	-1	-1	-1	-1	
״̬386	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬387	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	563	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬388	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬389	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬390	-1	-1	-1	-1	-1	-1	-1	564	-1	-1	-1	-1	-1	210	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬391	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	565	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬392	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬393	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬394	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	566	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬395	-1	-1	-1	-1	-1	-1	-1	567	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬396	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	401	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬397	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬398	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	568	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬399	-1	-1	569	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬400	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬401	-1	-1	-1	-1	-1	-1	-1	570	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬402	-1	-1	-1	-1	-1	-1	-1	571	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬403	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	401	-1	161	-1	-1	572	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬404	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬405	-1	223	224	-1	225	226	227	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	229	230	573	-1	-1	-1	232	-1	-1	-1	233	234	235	-1	236	237	-1	-1	238	239	240	241	242	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬406	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬407	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬408	-1	148	149	-1	151	152	153	574	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	575	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬409	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	401	-1	161	-1	-1	576	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬410	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬411	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬412	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	586	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬413	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	588	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬414	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	589	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬415	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	590	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬416	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	591	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬417	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	592	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬418	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	593	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬419	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	594	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬420	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	595	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬421	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	237	-1	-1	596	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬422	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	237	-1	-1	597	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬423	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	237	-1	-1	238	598	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬424	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	237	-1	-1	238	239	599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬425	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	233	587	235	-1	236	237	-1	-1	238	239	240	600	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬426	-1	223	224	-1	225	226	227	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	601	-1	-1	-1	-1	-1	-1	-1	229	230	602	-1	-1	-1	232	-1	-1	-1	233	234	235	-1	236	237	-1	-1	238	239	240	241	242	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬427	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬428	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬429	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬430	-1	-1	-1	-1	-1	-1	-1	603	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬431	-1	-1	-1	-1	-1	-1	-1	604	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬432	-1	432	433	-1	434	435	605	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	606	-1	-1	-1	-1	440	-1	-1	-1	-1	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬433	-1	-1	-1	-1	-1	-1	-1	-1	-1	607	-1	608	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬434	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬435	-1	432	433	-1	434	435	605	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	609	-1	-1	-1	-1	440	-1	-1	-1	-1	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬436	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	610	-1	161	-1	-1	220	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬437	-1	432	433	-1	434	435	611	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	612	-1	-1	-1	-1	440	-1	-1	-1	-1	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬438	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬439	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬440	-1	613	-1	-1	-1	614	615	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬441	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬442	-1	432	433	-1	434	435	436	-1	-1	-1	-1	-1	-1	-1	437	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	438	439	-1	-1	-1	-1	440	-1	-1	-1	616	442	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬443	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬444	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬445	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	251	-1	-1	-1	-1	-1	-1	252	253	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬446	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	251	-1	-1	-1	-1	-1	-1	252	253	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬447	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬448	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬449	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬450	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬451	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	256	-1	-1	-1	257	258	-1	-1	259	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬452	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	256	-1	-1	-1	257	258	-1	-1	259	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬453	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	260	261	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬454	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	262	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬455	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	263	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬456	-1	-1	-1	-1	-1	-1	-1	617	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬457	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬458	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	276	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	618	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬459	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	619	-1	-1	-1	-1	-1	-1	98	99	123	-1	620	-1	101	621	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬460	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬461	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬462	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	622	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	279	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬463	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬464	-1	-1	-1	-1	-1	-1	-1	623	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬465	-1	-1	-1	-1	-1	-1	-1	624	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬466	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬467	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬468	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬469	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬470	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬471	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬472	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	477	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬473	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬474	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	625	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬475	-1	-1	626	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬476	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬477	-1	-1	-1	-1	-1	-1	-1	627	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬478	-1	-1	-1	-1	-1	-1	-1	628	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬479	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	477	-1	161	-1	-1	629	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬480	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬481	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	630	-1	-1	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬482	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬483	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	631	-1	-1	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬484	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬485	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬486	-1	148	149	-1	151	152	153	632	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	633	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬487	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	477	-1	161	-1	-1	634	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬488	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬489	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬490	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	644	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬491	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	646	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬492	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	647	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬493	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	648	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬494	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	649	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬495	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	650	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬496	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	651	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬497	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	652	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬498	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	653	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬499	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	307	-1	-1	654	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬500	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	307	-1	-1	655	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬501	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	307	-1	-1	308	656	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬502	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	307	-1	-1	308	309	657	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬503	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	303	645	305	-1	306	307	-1	-1	308	309	310	658	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬504	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	659	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬505	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬506	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬507	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	660	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬508	-1	-1	-1	-1	-1	-1	-1	661	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬509	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	24	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	662	-1	-1	-1	-1	-1	-1	-1	-1	
״̬510	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	663	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬511	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬512	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬513	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬514	-1	-1	-1	-1	-1	-1	-1	664	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬515	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬516	-1	-1	-1	-1	-1	-1	-1	665	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬517	-1	517	518	-1	519	520	666	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	667	-1	-1	-1	-1	525	-1	-1	-1	-1	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬518	-1	-1	-1	-1	-1	-1	-1	-1	-1	668	-1	669	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬519	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬520	-1	517	518	-1	519	520	666	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	670	-1	-1	-1	-1	525	-1	-1	-1	-1	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬521	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	671	-1	161	-1	-1	320	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬522	-1	517	518	-1	519	520	672	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	673	-1	-1	-1	-1	525	-1	-1	-1	-1	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬523	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬524	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬525	-1	674	-1	-1	-1	675	676	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬526	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬527	-1	517	518	-1	519	520	521	-1	-1	-1	-1	-1	-1	-1	522	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	523	524	-1	-1	-1	-1	525	-1	-1	-1	677	527	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬528	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬529	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬530	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	335	-1	-1	-1	-1	-1	-1	336	337	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬531	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	335	-1	-1	-1	-1	-1	-1	336	337	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬532	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬533	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬534	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬535	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬536	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	340	-1	-1	-1	341	342	-1	-1	343	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬537	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	340	-1	-1	-1	341	342	-1	-1	343	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬538	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	344	345	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬539	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	346	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬540	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	347	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬541	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬542	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬543	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	678	-1	-1	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬544	-1	48	49	-1	50	51	182	-1	-1	-1	-1	-1	-1	-1	53	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	60	183	-1	-1	-1	-1	63	-1	-1	-1	679	65	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬545	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	550	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬546	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬547	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	680	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬548	-1	-1	681	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬549	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬550	-1	-1	-1	-1	-1	-1	-1	682	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬551	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	550	-1	161	-1	-1	683	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬552	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬553	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬554	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬555	-1	148	149	-1	151	152	153	684	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	685	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬556	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬557	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	686	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬558	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬559	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	687	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬560	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬561	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬562	-1	-1	-1	-1	-1	-1	-1	688	-1	-1	-1	-1	-1	210	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬563	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬564	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬565	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬566	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬567	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬568	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	689	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬569	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬570	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬571	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	690	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬572	-1	-1	-1	-1	-1	-1	-1	691	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬573	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬574	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬575	-1	-1	-1	-1	-1	-1	-1	692	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬576	-1	-1	-1	-1	-1	-1	-1	693	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬577	-1	577	578	-1	579	580	694	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	695	-1	-1	-1	-1	585	-1	-1	-1	-1	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬578	-1	-1	-1	-1	-1	-1	-1	-1	-1	696	-1	697	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬579	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬580	-1	577	578	-1	579	580	694	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	698	-1	-1	-1	-1	585	-1	-1	-1	-1	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬581	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	699	-1	161	-1	-1	402	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬582	-1	577	578	-1	579	580	700	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	701	-1	-1	-1	-1	585	-1	-1	-1	-1	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬583	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬584	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬585	-1	702	-1	-1	-1	703	704	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬586	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬587	-1	577	578	-1	579	580	581	-1	-1	-1	-1	-1	-1	-1	582	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	583	584	-1	-1	-1	-1	585	-1	-1	-1	705	587	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬588	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬589	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬590	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	412	-1	-1	-1	-1	-1	-1	413	414	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬591	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	412	-1	-1	-1	-1	-1	-1	413	414	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬592	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬593	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬594	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬595	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬596	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	417	-1	-1	-1	418	419	-1	-1	420	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬597	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	417	-1	-1	-1	418	419	-1	-1	420	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬598	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	421	422	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬599	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	423	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬600	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	424	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬601	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬602	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬603	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬604	-1	91	92	-1	93	94	248	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	98	249	-1	-1	-1	-1	101	-1	-1	-1	706	103	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬605	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	610	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬606	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬607	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	707	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬608	-1	-1	708	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬609	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬610	-1	-1	-1	-1	-1	-1	-1	709	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬611	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	610	-1	161	-1	-1	710	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬612	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬613	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬614	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬615	-1	148	149	-1	151	152	153	711	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	712	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬616	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬617	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	713	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬618	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬619	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬620	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	276	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	714	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬621	-1	148	149	-1	151	152	153	715	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	716	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬622	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬623	-1	91	92	-1	93	94	95	-1	717	-1	-1	-1	718	-1	96	54	55	56	57	719	58	-1	59	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	721	722	-1	723	-1	724	725	98	99	123	-1	726	-1	101	727	-1	-1	102	103	104	728	105	106	-1	729	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	730	-1	-1	-1	-1	-1	731	732	-1	-1	
״̬624	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	733	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬625	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	734	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬626	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬627	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬628	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	735	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬629	-1	-1	-1	-1	-1	-1	-1	736	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬630	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬631	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬632	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬633	-1	-1	-1	-1	-1	-1	-1	737	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬634	-1	-1	-1	-1	-1	-1	-1	738	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬635	-1	635	636	-1	637	638	739	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	740	-1	-1	-1	-1	643	-1	-1	-1	-1	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬636	-1	-1	-1	-1	-1	-1	-1	-1	-1	741	-1	742	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬637	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬638	-1	635	636	-1	637	638	739	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	743	-1	-1	-1	-1	643	-1	-1	-1	-1	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬639	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	744	-1	161	-1	-1	478	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬640	-1	635	636	-1	637	638	745	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	746	-1	-1	-1	-1	643	-1	-1	-1	-1	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬641	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬642	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬643	-1	747	-1	-1	-1	748	749	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬644	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬645	-1	635	636	-1	637	638	639	-1	-1	-1	-1	-1	-1	-1	640	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	641	642	-1	-1	-1	-1	643	-1	-1	-1	750	645	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬646	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬647	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬648	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	490	-1	-1	-1	-1	-1	-1	491	492	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬649	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	490	-1	-1	-1	-1	-1	-1	491	492	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬650	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬651	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬652	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬653	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬654	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	495	-1	-1	-1	496	497	-1	-1	498	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬655	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	495	-1	-1	-1	496	497	-1	-1	498	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬656	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	499	500	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬657	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	501	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬658	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	502	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬659	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬660	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬661	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬662	-1	-1	-1	21	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	751	-1	-1	22	-1	23	-1	-1	-1	-1	-1	-1	-1	47	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	25	-1	-1	-1	-1	26	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬663	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬664	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬665	-1	148	149	-1	151	152	332	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	333	-1	-1	-1	-1	161	-1	-1	-1	752	164	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬666	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	671	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬667	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬668	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	753	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬669	-1	-1	754	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬670	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬671	-1	-1	-1	-1	-1	-1	-1	755	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬672	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	671	-1	161	-1	-1	756	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬673	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬674	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬675	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬676	-1	148	149	-1	151	152	153	757	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	758	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬677	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬678	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬679	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬680	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	759	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬681	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬682	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬683	-1	-1	-1	-1	-1	-1	-1	760	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬684	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬685	-1	-1	-1	-1	-1	-1	-1	761	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬686	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬687	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬688	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬689	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬690	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬691	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬692	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬693	-1	223	224	-1	225	226	409	-1	-1	-1	-1	-1	-1	-1	228	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	229	410	-1	-1	-1	-1	232	-1	-1	-1	762	234	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬694	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	699	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬695	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬696	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	763	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬697	-1	-1	764	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬698	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬699	-1	-1	-1	-1	-1	-1	-1	765	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬700	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	699	-1	161	-1	-1	766	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬701	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬702	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬703	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬704	-1	148	149	-1	151	152	153	767	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	768	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬705	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬706	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬707	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	769	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬708	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬709	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬710	-1	-1	-1	-1	-1	-1	-1	770	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬711	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬712	-1	-1	-1	-1	-1	-1	-1	771	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬713	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬714	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬715	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	772	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬716	-1	-1	-1	-1	-1	-1	-1	773	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬717	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	774	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬718	-1	-1	-1	-1	-1	-1	775	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬719	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	776	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬720	-1	-1	-1	-1	-1	-1	777	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬721	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬722	-1	91	92	1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	778	118	119	2	120	3	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	126	105	106	-1	127	107	108	109	110	111	128	-1	-1	779	-1	130	-1	780	-1	-1	8	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬723	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	781	-1	-1	-1	-1	-1	-1	98	99	123	-1	782	-1	101	-1	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬724	-1	-1	-1	-1	-1	-1	783	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬725	-1	-1	-1	-1	-1	-1	784	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬726	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	276	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	785	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬727	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬728	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	786	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬729	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬730	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬731	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬732	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬733	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬734	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬735	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬736	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬737	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬738	-1	292	293	-1	294	295	487	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	488	-1	-1	-1	-1	302	-1	-1	-1	787	304	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬739	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	744	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬740	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬741	-1	292	293	-1	294	295	296	-1	-1	-1	-1	-1	-1	-1	297	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	298	299	300	-1	788	-1	302	-1	-1	-1	303	304	305	-1	306	307	-1	-1	308	309	310	311	312	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬742	-1	-1	789	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬743	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬744	-1	-1	-1	-1	-1	-1	-1	790	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬745	-1	148	149	150	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	155	-1	156	-1	-1	157	158	159	-1	744	-1	161	-1	-1	791	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	173	-1	-1	-1	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬746	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬747	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬748	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬749	-1	148	149	-1	151	152	153	792	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	352	-1	-1	-1	161	-1	793	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬750	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬751	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬752	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬753	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	794	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬754	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬755	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬756	-1	-1	-1	-1	-1	-1	-1	795	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬757	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬758	-1	-1	-1	-1	-1	-1	-1	796	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬759	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬760	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬761	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬762	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬763	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	797	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬764	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬765	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬766	-1	-1	-1	-1	-1	-1	-1	798	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬767	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬768	-1	-1	-1	-1	-1	-1	-1	799	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬769	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬770	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬771	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬772	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬773	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	800	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬774	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬775	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	801	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬776	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬777	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	457	-1	-1	-1	-1	-1	-1	98	99	123	-1	458	-1	101	802	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬778	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬779	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	803	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	279	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬780	-1	91	92	1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	804	118	119	2	120	3	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	126	105	106	-1	127	107	108	109	110	111	283	-1	-1	805	-1	130	-1	-1	-1	-1	8	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬781	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬782	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	276	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	806	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬783	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	807	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬784	-1	148	149	-1	151	152	153	-1	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	808	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬785	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬786	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	-1	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	809	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬787	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬788	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	810	-1	-1	483	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬789	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬790	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬791	-1	-1	-1	-1	-1	-1	-1	811	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬792	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬793	-1	-1	-1	-1	-1	-1	-1	812	-1	-1	-1	-1	-1	543	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬794	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬795	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬796	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬797	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬798	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬799	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬800	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬801	-1	-1	-1	-1	-1	-1	-1	813	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬802	-1	91	92	-1	93	94	95	-1	-1	-1	-1	-1	-1	-1	96	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	619	-1	-1	-1	-1	-1	-1	98	99	123	-1	620	-1	101	814	-1	-1	102	103	104	-1	105	106	-1	-1	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬803	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬804	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬805	-1	91	92	-1	93	94	95	-1	113	-1	-1	-1	114	-1	96	54	55	56	57	115	58	-1	59	-1	-1	-1	-1	-1	116	-1	-1	-1	-1	-1	-1	-1	815	118	119	-1	120	-1	121	122	98	99	123	-1	124	-1	101	125	-1	-1	102	103	104	279	105	106	-1	127	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	132	-1	-1	-1	-1	-1	133	134	-1	-1	
״̬806	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬807	-1	-1	-1	-1	-1	-1	-1	816	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬808	-1	-1	-1	-1	-1	-1	-1	817	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬809	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬810	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬811	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬812	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬813	-1	91	92	-1	93	94	95	-1	717	-1	-1	-1	718	-1	96	54	55	56	57	719	58	-1	59	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	721	722	-1	723	-1	724	725	98	99	123	-1	726	-1	101	727	-1	-1	102	103	104	818	105	106	-1	729	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	730	-1	-1	-1	-1	-1	731	732	-1	-1	
״̬814	-1	148	149	-1	151	152	153	819	-1	-1	-1	-1	-1	-1	154	54	55	56	57	-1	58	-1	59	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	157	158	159	-1	820	-1	161	-1	-1	-1	163	164	165	-1	166	167	-1	-1	168	169	170	171	172	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬815	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬816	-1	91	92	-1	93	94	95	-1	717	-1	-1	-1	718	-1	96	54	55	56	57	719	58	-1	59	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	721	722	-1	723	-1	724	725	98	99	123	-1	726	-1	101	727	-1	-1	102	103	104	821	105	106	-1	729	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	730	-1	-1	-1	-1	-1	731	732	-1	-1	
״̬817	-1	91	92	-1	93	94	95	-1	717	-1	-1	-1	718	-1	96	54	55	56	57	719	58	-1	59	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	721	722	-1	723	-1	724	725	98	99	123	-1	726	-1	101	727	-1	-1	102	103	104	822	105	106	-1	729	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	730	-1	-1	-1	-1	-1	731	732	-1	-1	
״̬818	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬819	-1	91	92	-1	93	94	95	-1	717	-1	-1	-1	718	-1	96	54	55	56	57	719	58	-1	59	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	721	722	-1	723	-1	724	725	98	99	123	-1	726	-1	101	727	-1	-1	102	103	104	823	105	106	-1	729	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	730	-1	-1	-1	-1	-1	731	732	-1	-1	
״̬820	-1	-1	-1	-1	-1	-1	-1	824	-1	-1	-1	-1	-1	327	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬821	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	825	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬822	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬823	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬824	-1	91	92	-1	93	94	95	-1	717	-1	-1	-1	718	-1	96	54	55	56	57	719	58	-1	59	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	721	722	-1	723	-1	724	725	98	99	123	-1	726	-1	101	727	-1	-1	102	103	104	826	105	106	-1	729	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	730	-1	-1	-1	-1	-1	731	732	-1	-1	
״̬825	-1	91	92	-1	93	94	95	-1	717	-1	-1	-1	718	-1	96	54	55	56	57	719	58	-1	59	-1	-1	-1	-1	-1	720	-1	-1	-1	-1	-1	-1	-1	-1	721	722	-1	723	-1	724	725	98	99	123	-1	726	-1	101	727	-1	-1	102	103	104	827	105	106	-1	729	107	108	109	110	111	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	730	-1	-1	-1	-1	-1	731	732	-1	-1	
״̬826	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
״̬827	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	

0	primary_expression -> IDENTIFIER 
1	unary_expression -> unary_operator cast_expression 
2	primary_expression -> CONSTANT 
3	primary_expression -> ( expression ) 
4	postfix_expression -> IDENTIFIER . IDENTIFIER 
5	unary_operator -> * 
6	postfix_expression -> postfix_expression INC_OP 
7	postfix_expression -> postfix_expression ( ) 
8	logical_and_expression -> logical_and_expression AND_OP exclusive_or_expression 
9	postfix_expression -> primary_expression 
10	postfix_expression -> IDENTIFIER [ expression ] 
11	declaration -> type_specifier ; 
12	direct_declarator -> direct_declarator ( ) 
13	unary_expression -> DEC_OP unary_expression 
14	postfix_expression -> postfix_expression ( argument_expression_list ) 
15	postfix_expression -> postfix_expression DEC_OP 
16	type_specifier -> INT 
17	argument_expression_list -> assignment_expression 
18	init_declarator -> declarator = initializer 
19	relational_expression -> relational_expression LE_OP shift_expression 
20	struct_declarator_list -> struct_declarator_list , declarator 
21	argument_expression_list -> argument_expression_list , assignment_expression 
22	exclusive_or_expression -> equality_expression 
23	unary_expression -> postfix_expression 
24	unary_operator -> - 
25	statement -> expression_statement 
26	unary_expression -> INC_OP unary_expression 
27	multiplicative_expression -> multiplicative_expression * cast_expression 
28	unary_expression -> SIZEOF unary_expression 
29	unary_expression -> SIZEOF ( type_name ) 
30	unary_operator -> & 
31	logical_or_expression -> logical_or_expression OR_OP logical_and_expression 
32	unary_operator -> + 
33	struct_or_union_specifier -> STRUCT IDENTIFIER { struct_declaration_list } 
34	statement -> selection_statement 
35	unary_operator -> ~ 
36	relational_expression -> relational_expression < shift_expression 
37	additive_expression -> additive_expression + multiplicative_expression 
38	unary_operator -> ! 
39	relational_expression -> shift_expression 
40	shift_expression -> additive_expression 
41	cast_expression -> unary_expression 
42	struct_or_union_specifier -> STRUCT IDENTIFIER 
43	cast_expression -> ( type_name ) cast_expression 
44	selection_statement -> IF ( expression ) statement 
45	multiplicative_expression -> cast_expression 
46	multiplicative_expression -> multiplicative_expression / cast_expression 
47	multiplicative_expression -> multiplicative_expression % cast_expression 
48	additive_expression -> multiplicative_expression 
49	init_declarator_list -> init_declarator 
50	additive_expression -> additive_expression - multiplicative_expression 
51	function_definition -> type_specifier declarator function_compound_statement 
52	relational_expression -> relational_expression > shift_expression 
53	direct_declarator -> IDENTIFIER [ assignment_expression ] 
54	equality_expression -> equality_expression EQ_OP relational_expression 
55	relational_expression -> relational_expression GE_OP shift_expression 
56	equality_expression -> relational_expression 
57	equality_expression -> equality_expression NE_OP relational_expression 
58	exclusive_or_expression -> exclusive_or_expression ^ equality_expression 
59	logical_and_expression -> exclusive_or_expression 
60	logical_or_expression -> logical_and_expression 
61	assignment_expression -> logical_or_expression 
62	assignment_expression -> unary_expression = assignment_expression 
63	expression -> assignment_expression 
64	expression -> expression , assignment_expression 
65	selection_statement -> SWITCH ( expression ) statement 
66	declaration -> type_specifier init_declarator_list ; 
67	init_declarator -> declarator 
68	init_declarator_list -> init_declarator_list , init_declarator 
69	type_specifier -> VOID 
70	type_specifier -> struct_or_union_specifier 
71	parameter_list -> parameter_list , parameter_declaration 
72	struct_or_union_specifier -> STRUCT { struct_declaration_list } 
73	struct_declaration_list -> struct_declaration 
74	struct_declaration_list -> struct_declaration_list struct_declaration 
75	struct_declaration -> type_specifier struct_declarator_list ; 
76	struct_declarator_list -> declarator 
77	declarator -> direct_declarator 
78	direct_declarator -> IDENTIFIER 
79	direct_declarator -> ( direct_declarator ) 
80	direct_declarator -> direct_declarator ( parameter_list ) 
81	parameter_list -> parameter_declaration 
82	parameter_declaration -> type_specifier declarator 
83	parameter_declaration -> type_specifier 
84	type_name -> type_specifier 
85	initializer -> assignment_expression 
86	initializer -> { initializer_list } 
87	initializer -> { initializer_list , } 
88	initializer_list -> assignment_expression 
89	initializer_list -> initializer_list , assignment_expression 
90	statement -> compound_statement 
91	statement -> iteration_statement 
92	statement -> jump_statement 
93	compound_statement -> { } 
94	compound_statement -> { statement_list } 
95	compound_statement -> { declaration_list } 
96	compound_statement -> { declaration_list statement_list } 
97	function_compound_statement -> { } 
98	function_compound_statement -> { statement_list } 
99	function_compound_statement -> { declaration_list } 
100	function_compound_statement -> { declaration_list statement_list } 
101	declaration_list -> declaration 
102	declaration_list -> declaration_list declaration 
103	statement_list -> statement 
104	statement_list -> statement_list statement 
105	expression_statement -> ; 
106	expression_statement -> expression ; 
107	selection_statement -> IF ( expression ) statement ELSE statement 
108	iteration_statement -> WHILE ( expression ) statement 
109	iteration_statement -> FOR ( expression_statement expression_statement ) statement 
110	iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 
111	jump_statement -> CONTINUE ; 
112	jump_statement -> BREAK ; 
113	jump_statement -> RETURN ; 
114	jump_statement -> RETURN expression ; 
115	translation_unit -> external_declaration 
116	translation_unit -> translation_unit external_declaration 
117	external_declaration -> function_definition 
118	external_declaration -> declaration 
119	argumented_translation_unit -> translation_unit 
