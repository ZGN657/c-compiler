83	64	661
0
argumented_translation_unit -> translation_unit 	0

1
type_specifier -> LONG 	1

2
type_specifier -> INT 	1

3
direct_declarator -> IDENTIFIER 	1

4
storage_class_specifier -> TYPEDEF 	1

5
direct_declarator -> ( declarator ) 	1

6
type_specifier -> DOUBLE 	1

7
type_specifier -> CHAR 	1

8
pointer -> * 	1
pointer -> * type_qualifier_list 	1
pointer -> * type_qualifier_list pointer 	1
pointer -> * pointer 	1

9
storage_class_specifier -> STATIC 	1

10
type_specifier -> SHORT 	1

11
storage_class_specifier -> EXTERN 	1

12
storage_class_specifier -> AUTO 	1

13
storage_class_specifier -> REGISTER 	1

14
type_specifier -> VOID 	1

15
type_specifier -> FLOAT 	1

16
type_specifier -> TYPE_NAME 	1

17
type_specifier -> SIGNED 	1

18
type_specifier -> UNSIGNED 	1

19
struct_or_union -> STRUCT 	1

20
struct_or_union -> UNION 	1

21
enum_specifier -> ENUM { enumerator_list } 	1
enum_specifier -> ENUM IDENTIFIER { enumerator_list } 	1
enum_specifier -> ENUM IDENTIFIER 	1

22
type_qualifier -> CONST 	1

23
type_qualifier -> VOLATILE 	1

24
struct_or_union_specifier -> struct_or_union { struct_declaration_list } 	1
struct_or_union_specifier -> struct_or_union IDENTIFIER 	1
struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } 	1

25
argumented_translation_unit -> translation_unit 	1
translation_unit -> translation_unit external_declaration 	1

26
declaration_specifiers -> storage_class_specifier 	1
declaration_specifiers -> storage_class_specifier declaration_specifiers 	1

27
direct_declarator -> direct_declarator ( ) 	1
declarator -> direct_declarator 	1
direct_declarator -> direct_declarator [ ] 	1
direct_declarator -> direct_declarator ( identifier_list ) 	1
direct_declarator -> direct_declarator ( parameter_type_list ) 	1
direct_declarator -> direct_declarator [ constant_expression ] 	1

28
external_declaration -> declaration 	1

29
external_declaration -> function_definition 	1

30
declaration -> declaration_specifiers ; 	1
function_definition -> declaration_specifiers declarator compound_statement 	1
declaration -> declaration_specifiers init_declarator_list ; 	1
function_definition -> declaration_specifiers declarator declaration_list compound_statement 	1

31
declaration_specifiers -> type_specifier 	1
declaration_specifiers -> type_specifier declaration_specifiers 	1

32
declaration_specifiers -> type_qualifier 	1
declaration_specifiers -> type_qualifier declaration_specifiers 	1

33
function_definition -> declarator compound_statement 	1
function_definition -> declarator declaration_list compound_statement 	1

34
type_specifier -> struct_or_union_specifier 	1

35
type_specifier -> enum_specifier 	1

36
declarator -> pointer direct_declarator 	1

37
translation_unit -> external_declaration 	1

38
direct_declarator -> ( declarator ) 	2

39
type_qualifier_list -> type_qualifier 	1

40
pointer -> * pointer 	2

41
pointer -> * type_qualifier_list 	2
type_qualifier_list -> type_qualifier_list type_qualifier 	1
pointer -> * type_qualifier_list pointer 	2

42
enum_specifier -> ENUM IDENTIFIER { enumerator_list } 	2
enum_specifier -> ENUM IDENTIFIER 	2

43
enum_specifier -> ENUM { enumerator_list } 	2

44
struct_or_union_specifier -> struct_or_union IDENTIFIER 	2
struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } 	2

45
struct_or_union_specifier -> struct_or_union { struct_declaration_list } 	2

46
translation_unit -> translation_unit external_declaration 	2

47
declaration_specifiers -> storage_class_specifier declaration_specifiers 	2

48
direct_declarator -> direct_declarator ( ) 	2
direct_declarator -> direct_declarator ( identifier_list ) 	2
direct_declarator -> direct_declarator ( parameter_type_list ) 	2

49
direct_declarator -> direct_declarator [ ] 	2
direct_declarator -> direct_declarator [ constant_expression ] 	2

50
declaration -> declaration_specifiers ; 	2

51
init_declarator_list -> init_declarator 	1

52
declaration -> declaration_specifiers init_declarator_list ; 	2
init_declarator_list -> init_declarator_list , init_declarator 	1

53
init_declarator -> declarator 	1
function_definition -> declaration_specifiers declarator compound_statement 	2
function_definition -> declaration_specifiers declarator declaration_list compound_statement 	2
init_declarator -> declarator = initializer 	1

54
declaration_specifiers -> type_specifier declaration_specifiers 	2

55
declaration_specifiers -> type_qualifier declaration_specifiers 	2

56
compound_statement -> { statement_list } 	1
compound_statement -> { declaration_list } 	1
compound_statement -> { } 	1
compound_statement -> { declaration_list statement_list } 	1

57
function_definition -> declarator compound_statement 	2

58
declaration_list -> declaration 	1

59
declaration -> declaration_specifiers init_declarator_list ; 	1
declaration -> declaration_specifiers ; 	1

60
function_definition -> declarator declaration_list compound_statement 	2
declaration_list -> declaration_list declaration 	1

61
declarator -> pointer direct_declarator 	2
direct_declarator -> direct_declarator ( parameter_type_list ) 	1
direct_declarator -> direct_declarator [ ] 	1
direct_declarator -> direct_declarator [ constant_expression ] 	1
direct_declarator -> direct_declarator ( identifier_list ) 	1
direct_declarator -> direct_declarator ( ) 	1

62
direct_declarator -> ( declarator ) 	3

63
type_qualifier_list -> type_qualifier_list type_qualifier 	2

64
pointer -> * type_qualifier_list pointer 	3

65
enum_specifier -> ENUM IDENTIFIER { enumerator_list } 	3

66
enumerator -> IDENTIFIER = constant_expression 	1
enumerator -> IDENTIFIER 	1

67
enumerator_list -> enumerator_list , enumerator 	1
enum_specifier -> ENUM { enumerator_list } 	3

68
enumerator_list -> enumerator 	1

69
struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } 	3

70
struct_declaration_list -> struct_declaration 	1

71
specifier_qualifier_list -> type_specifier specifier_qualifier_list 	1
specifier_qualifier_list -> type_specifier 	1

72
specifier_qualifier_list -> type_qualifier 	1
specifier_qualifier_list -> type_qualifier specifier_qualifier_list 	1

73
struct_or_union_specifier -> struct_or_union { struct_declaration_list } 	3
struct_declaration_list -> struct_declaration_list struct_declaration 	1

74
struct_declaration -> specifier_qualifier_list struct_declarator_list ; 	1

75
identifier_list -> IDENTIFIER 	1

76
direct_declarator -> direct_declarator ( ) 	3

77
parameter_declaration -> declaration_specifiers declarator 	1
parameter_declaration -> declaration_specifiers abstract_declarator 	1
parameter_declaration -> declaration_specifiers 	1

78
identifier_list -> identifier_list , IDENTIFIER 	1
direct_declarator -> direct_declarator ( identifier_list ) 	3

79
direct_declarator -> direct_declarator ( parameter_type_list ) 	3

80
parameter_type_list -> parameter_list 	1
parameter_type_list -> parameter_list , ELLIPSIS 	1
parameter_list -> parameter_list , parameter_declaration 	1

81
parameter_list -> parameter_declaration 	1

82
unary_expression -> DEC_OP unary_expression 	1

83
primary_expression -> IDENTIFIER 	1

84
primary_expression -> CONSTANT 	1

85
primary_expression -> STRING_LITERAL 	1

86
cast_expression -> ( type_name ) cast_expression 	1
primary_expression -> ( expression ) 	1

87
direct_declarator -> direct_declarator [ ] 	3

88
unary_expression -> INC_OP unary_expression 	1

89
unary_expression -> SIZEOF unary_expression 	1
unary_expression -> SIZEOF ( type_name ) 	1

90
unary_operator -> & 	1

91
unary_operator -> * 	1

92
unary_operator -> + 	1

93
unary_operator -> - 	1

94
unary_operator -> ~ 	1

95
unary_operator -> ! 	1

96
postfix_expression -> primary_expression 	1

97
cast_expression -> unary_expression 	1

98
postfix_expression -> postfix_expression ( ) 	1
postfix_expression -> postfix_expression . IDENTIFIER 	1
postfix_expression -> postfix_expression DEC_OP 	1
unary_expression -> postfix_expression 	1
postfix_expression -> postfix_expression ( argument_expression_list ) 	1
postfix_expression -> postfix_expression [ expression ] 	1
postfix_expression -> postfix_expression INC_OP 	1
postfix_expression -> postfix_expression PTR_OP IDENTIFIER 	1

99
multiplicative_expression -> cast_expression 	1

100
unary_expression -> unary_operator cast_expression 	1

101
multiplicative_expression -> multiplicative_expression / cast_expression 	1
additive_expression -> multiplicative_expression 	1
multiplicative_expression -> multiplicative_expression * cast_expression 	1
multiplicative_expression -> multiplicative_expression % cast_expression 	1

102
constant_expression -> conditional_expression 	1

103
shift_expression -> additive_expression 	1
additive_expression -> additive_expression + multiplicative_expression 	1
additive_expression -> additive_expression - multiplicative_expression 	1

104
direct_declarator -> direct_declarator [ constant_expression ] 	3

105
shift_expression -> shift_expression RIGHT_OP additive_expression 	1
relational_expression -> shift_expression 	1
shift_expression -> shift_expression LEFT_OP additive_expression 	1

106
equality_expression -> relational_expression 	1
relational_expression -> relational_expression < shift_expression 	1
relational_expression -> relational_expression > shift_expression 	1
relational_expression -> relational_expression LE_OP shift_expression 	1
relational_expression -> relational_expression GE_OP shift_expression 	1

107
equality_expression -> equality_expression NE_OP relational_expression 	1
and_expression -> equality_expression 	1
equality_expression -> equality_expression EQ_OP relational_expression 	1

108
and_expression -> and_expression & equality_expression 	1
exclusive_or_expression -> and_expression 	1

109
inclusive_or_expression -> exclusive_or_expression 	1
exclusive_or_expression -> exclusive_or_expression ^ and_expression 	1

110
logical_and_expression -> inclusive_or_expression 	1
inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression 	1

111
logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression 	1
logical_or_expression -> logical_and_expression 	1

112
conditional_expression -> logical_or_expression ? expression : conditional_expression 	1
conditional_expression -> logical_or_expression 	1
logical_or_expression -> logical_or_expression OR_OP logical_and_expression 	1

113
init_declarator_list -> init_declarator_list , init_declarator 	2

114
declaration -> declaration_specifiers init_declarator_list ; 	3

115
init_declarator -> declarator = initializer 	2

116
function_definition -> declaration_specifiers declarator compound_statement 	3

117
function_definition -> declaration_specifiers declarator declaration_list compound_statement 	3
declaration_list -> declaration_list declaration 	1

118
labeled_statement -> IDENTIFIER : statement 	1
primary_expression -> IDENTIFIER 	1

119
jump_statement -> CONTINUE ; 	1

120
compound_statement -> { } 	2

121
expression_statement -> ; 	1

122
selection_statement -> IF ( expression ) statement ELSE statement 	1
selection_statement -> IF ( expression ) statement 	1

123
labeled_statement -> CASE constant_expression : statement 	1

124
labeled_statement -> DEFAULT : statement 	1

125
selection_statement -> SWITCH ( expression ) statement 	1

126
iteration_statement -> WHILE ( expression ) statement 	1

127
iteration_statement -> DO statement WHILE ( expression ) ; 	1

128
iteration_statement -> FOR ( expression_statement expression_statement ) statement 	1
iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 	1

129
jump_statement -> GOTO IDENTIFIER ; 	1

130
jump_statement -> BREAK ; 	1

131
jump_statement -> RETURN ; 	1
jump_statement -> RETURN expression ; 	1

132
assignment_expression -> unary_expression assignment_operator assignment_expression 	1
cast_expression -> unary_expression 	1

133
expression -> assignment_expression 	1

134
expression_statement -> expression ; 	1
expression -> expression , assignment_expression 	1

135
statement -> expression_statement 	1

136
assignment_expression -> conditional_expression 	1

137
statement_list -> statement 	1

138
statement -> compound_statement 	1

139
compound_statement -> { statement_list } 	2
statement_list -> statement_list statement 	1

140
compound_statement -> { declaration_list } 	2
compound_statement -> { declaration_list statement_list } 	2
declaration_list -> declaration_list declaration 	1

141
statement -> jump_statement 	1

142
statement -> labeled_statement 	1

143
statement -> selection_statement 	1

144
statement -> iteration_statement 	1

145
init_declarator -> declarator 	1
init_declarator -> declarator = initializer 	1

146
function_definition -> declarator declaration_list compound_statement 	3

147
declaration_list -> declaration_list declaration 	2

148
enum_specifier -> ENUM IDENTIFIER { enumerator_list } 	4
enumerator_list -> enumerator_list , enumerator 	1

149
enumerator -> IDENTIFIER = constant_expression 	2

150
enumerator_list -> enumerator_list , enumerator 	2

151
enum_specifier -> ENUM { enumerator_list } 	4

152
struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } 	4
struct_declaration_list -> struct_declaration_list struct_declaration 	1

153
specifier_qualifier_list -> type_specifier specifier_qualifier_list 	2

154
specifier_qualifier_list -> type_qualifier specifier_qualifier_list 	2

155
struct_or_union_specifier -> struct_or_union { struct_declaration_list } 	4

156
struct_declaration_list -> struct_declaration_list struct_declaration 	2

157
struct_declarator -> : constant_expression 	1

158
struct_declarator_list -> struct_declarator 	1

159
struct_declaration -> specifier_qualifier_list struct_declarator_list ; 	2
struct_declarator_list -> struct_declarator_list , struct_declarator 	1

160
struct_declarator -> declarator : constant_expression 	1
struct_declarator -> declarator 	1

161
direct_declarator -> ( declarator ) 	1
direct_abstract_declarator -> ( ) 	1
direct_abstract_declarator -> ( parameter_type_list ) 	1
direct_abstract_declarator -> ( abstract_declarator ) 	1

162
direct_abstract_declarator -> [ ] 	1
direct_abstract_declarator -> [ constant_expression ] 	1

163
parameter_declaration -> declaration_specifiers declarator 	2

164
abstract_declarator -> direct_abstract_declarator 	1
direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] 	1
direct_abstract_declarator -> direct_abstract_declarator [ ] 	1
direct_abstract_declarator -> direct_abstract_declarator ( ) 	1
direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) 	1

165
declarator -> pointer direct_declarator 	1
abstract_declarator -> pointer 	1
abstract_declarator -> pointer direct_abstract_declarator 	1

166
parameter_declaration -> declaration_specifiers abstract_declarator 	2

167
direct_declarator -> direct_declarator ( identifier_list ) 	4

168
identifier_list -> identifier_list , IDENTIFIER 	2

169
direct_declarator -> direct_declarator ( parameter_type_list ) 	4

170
parameter_type_list -> parameter_list , ELLIPSIS 	2
parameter_list -> parameter_list , parameter_declaration 	2

171
primary_expression -> ( expression ) 	1

172
unary_expression -> DEC_OP unary_expression 	2

173
primary_expression -> ( expression ) 	2
expression -> expression , assignment_expression 	1

174
cast_expression -> ( type_name ) cast_expression 	2

175
type_name -> specifier_qualifier_list 	1
type_name -> specifier_qualifier_list abstract_declarator 	1

176
unary_expression -> INC_OP unary_expression 	2

177
primary_expression -> ( expression ) 	1
unary_expression -> SIZEOF ( type_name ) 	2

178
unary_expression -> SIZEOF unary_expression 	2

179
postfix_expression -> postfix_expression DEC_OP 	2

180
postfix_expression -> postfix_expression PTR_OP IDENTIFIER 	2

181
postfix_expression -> postfix_expression ( ) 	2
postfix_expression -> postfix_expression ( argument_expression_list ) 	2

182
postfix_expression -> postfix_expression [ expression ] 	2

183
postfix_expression -> postfix_expression . IDENTIFIER 	2

184
postfix_expression -> postfix_expression INC_OP 	2

185
unary_expression -> unary_operator cast_expression 	2

186
multiplicative_expression -> multiplicative_expression * cast_expression 	2

187
multiplicative_expression -> multiplicative_expression / cast_expression 	2

188
multiplicative_expression -> multiplicative_expression % cast_expression 	2

189
additive_expression -> additive_expression + multiplicative_expression 	2

190
additive_expression -> additive_expression - multiplicative_expression 	2

191
direct_declarator -> direct_declarator [ constant_expression ] 	4

192
shift_expression -> shift_expression LEFT_OP additive_expression 	2

193
shift_expression -> shift_expression RIGHT_OP additive_expression 	2

194
relational_expression -> relational_expression > shift_expression 	2

195
relational_expression -> relational_expression < shift_expression 	2

196
relational_expression -> relational_expression LE_OP shift_expression 	2

197
relational_expression -> relational_expression GE_OP shift_expression 	2

198
equality_expression -> equality_expression EQ_OP relational_expression 	2

199
equality_expression -> equality_expression NE_OP relational_expression 	2

200
and_expression -> and_expression & equality_expression 	2

201
exclusive_or_expression -> exclusive_or_expression ^ and_expression 	2

202
inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression 	2

203
logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression 	2

204
conditional_expression -> logical_or_expression ? expression : conditional_expression 	2

205
logical_or_expression -> logical_or_expression OR_OP logical_and_expression 	2

206
init_declarator_list -> init_declarator_list , init_declarator 	3

207
initializer -> { initializer_list } 	1
initializer -> { initializer_list , } 	1

208
initializer -> assignment_expression 	1

209
init_declarator -> declarator = initializer 	3

210
function_definition -> declaration_specifiers declarator declaration_list compound_statement 	4

211
labeled_statement -> IDENTIFIER : statement 	2

212
jump_statement -> CONTINUE ; 	2

213
selection_statement -> IF ( expression ) statement ELSE statement 	2
selection_statement -> IF ( expression ) statement 	2

214
labeled_statement -> CASE constant_expression : statement 	2

215
labeled_statement -> DEFAULT : statement 	2

216
selection_statement -> SWITCH ( expression ) statement 	2

217
iteration_statement -> WHILE ( expression ) statement 	2

218
iteration_statement -> DO statement WHILE ( expression ) ; 	2

219
iteration_statement -> FOR ( expression_statement expression_statement ) statement 	2
iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 	2

220
jump_statement -> GOTO IDENTIFIER ; 	2

221
jump_statement -> BREAK ; 	2

222
jump_statement -> RETURN ; 	2

223
expression -> expression , assignment_expression 	1
jump_statement -> RETURN expression ; 	2

224
assignment_operator -> LEFT_ASSIGN 	1

225
assignment_operator -> MOD_ASSIGN 	1

226
assignment_operator -> MUL_ASSIGN 	1

227
assignment_operator -> ADD_ASSIGN 	1

228
assignment_operator -> = 	1

229
assignment_operator -> DIV_ASSIGN 	1

230
assignment_operator -> SUB_ASSIGN 	1

231
assignment_operator -> RIGHT_ASSIGN 	1

232
assignment_operator -> AND_ASSIGN 	1

233
assignment_operator -> XOR_ASSIGN 	1

234
assignment_operator -> OR_ASSIGN 	1

235
assignment_expression -> unary_expression assignment_operator assignment_expression 	2

236
expression -> expression , assignment_expression 	2

237
expression_statement -> expression ; 	2

238
compound_statement -> { statement_list } 	3

239
statement_list -> statement_list statement 	2

240
compound_statement -> { declaration_list } 	3

241
compound_statement -> { declaration_list statement_list } 	3
statement_list -> statement_list statement 	1

242
enum_specifier -> ENUM IDENTIFIER { enumerator_list } 	5

243
enumerator -> IDENTIFIER = constant_expression 	3

244
enumerator_list -> enumerator_list , enumerator 	3

245
struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } 	5

246
struct_declarator -> : constant_expression 	2

247
struct_declarator_list -> struct_declarator_list , struct_declarator 	2

248
struct_declaration -> specifier_qualifier_list struct_declarator_list ; 	3

249
struct_declarator -> declarator : constant_expression 	2

250
direct_abstract_declarator -> ( ) 	2

251
direct_abstract_declarator -> ( parameter_type_list ) 	2

252
direct_abstract_declarator -> ( abstract_declarator ) 	2

253
direct_abstract_declarator -> [ ] 	2

254
direct_abstract_declarator -> [ constant_expression ] 	2

255
direct_abstract_declarator -> direct_abstract_declarator ( ) 	2
direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) 	2

256
direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] 	2
direct_abstract_declarator -> direct_abstract_declarator [ ] 	2

257
direct_abstract_declarator -> direct_abstract_declarator [ ] 	1
abstract_declarator -> pointer direct_abstract_declarator 	2
direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] 	1
direct_abstract_declarator -> direct_abstract_declarator ( ) 	1
direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) 	1

258
identifier_list -> identifier_list , IDENTIFIER 	3

259
parameter_type_list -> parameter_list , ELLIPSIS 	3

260
parameter_list -> parameter_list , parameter_declaration 	3

261
primary_expression -> ( expression ) 	3

262
cast_expression -> ( type_name ) cast_expression 	3

263
direct_abstract_declarator -> ( ) 	1
direct_abstract_declarator -> ( parameter_type_list ) 	1
direct_abstract_declarator -> ( abstract_declarator ) 	1

264
abstract_declarator -> pointer direct_abstract_declarator 	1
abstract_declarator -> pointer 	1

265
type_name -> specifier_qualifier_list abstract_declarator 	2

266
unary_expression -> SIZEOF ( type_name ) 	3

267
postfix_expression -> postfix_expression PTR_OP IDENTIFIER 	3

268
postfix_expression -> postfix_expression ( ) 	3

269
argument_expression_list -> assignment_expression 	1

270
postfix_expression -> postfix_expression ( argument_expression_list ) 	3
argument_expression_list -> argument_expression_list , assignment_expression 	1

271
postfix_expression -> postfix_expression [ expression ] 	3
expression -> expression , assignment_expression 	1

272
postfix_expression -> postfix_expression . IDENTIFIER 	3

273
multiplicative_expression -> multiplicative_expression * cast_expression 	3

274
multiplicative_expression -> multiplicative_expression / cast_expression 	3

275
multiplicative_expression -> multiplicative_expression % cast_expression 	3

276
additive_expression -> additive_expression + multiplicative_expression 	3
multiplicative_expression -> multiplicative_expression * cast_expression 	1
multiplicative_expression -> multiplicative_expression / cast_expression 	1
multiplicative_expression -> multiplicative_expression % cast_expression 	1

277
additive_expression -> additive_expression - multiplicative_expression 	3
multiplicative_expression -> multiplicative_expression * cast_expression 	1
multiplicative_expression -> multiplicative_expression / cast_expression 	1
multiplicative_expression -> multiplicative_expression % cast_expression 	1

278
shift_expression -> shift_expression LEFT_OP additive_expression 	3
additive_expression -> additive_expression - multiplicative_expression 	1
additive_expression -> additive_expression + multiplicative_expression 	1

279
shift_expression -> shift_expression RIGHT_OP additive_expression 	3
additive_expression -> additive_expression + multiplicative_expression 	1
additive_expression -> additive_expression - multiplicative_expression 	1

280
shift_expression -> shift_expression RIGHT_OP additive_expression 	1
relational_expression -> relational_expression > shift_expression 	3
shift_expression -> shift_expression LEFT_OP additive_expression 	1

281
relational_expression -> relational_expression < shift_expression 	3
shift_expression -> shift_expression LEFT_OP additive_expression 	1
shift_expression -> shift_expression RIGHT_OP additive_expression 	1

282
relational_expression -> relational_expression LE_OP shift_expression 	3
shift_expression -> shift_expression LEFT_OP additive_expression 	1
shift_expression -> shift_expression RIGHT_OP additive_expression 	1

283
relational_expression -> relational_expression GE_OP shift_expression 	3
shift_expression -> shift_expression LEFT_OP additive_expression 	1
shift_expression -> shift_expression RIGHT_OP additive_expression 	1

284
equality_expression -> equality_expression EQ_OP relational_expression 	3
relational_expression -> relational_expression < shift_expression 	1
relational_expression -> relational_expression > shift_expression 	1
relational_expression -> relational_expression LE_OP shift_expression 	1
relational_expression -> relational_expression GE_OP shift_expression 	1

285
equality_expression -> equality_expression NE_OP relational_expression 	3
relational_expression -> relational_expression > shift_expression 	1
relational_expression -> relational_expression < shift_expression 	1
relational_expression -> relational_expression LE_OP shift_expression 	1
relational_expression -> relational_expression GE_OP shift_expression 	1

286
and_expression -> and_expression & equality_expression 	3
equality_expression -> equality_expression EQ_OP relational_expression 	1
equality_expression -> equality_expression NE_OP relational_expression 	1

287
exclusive_or_expression -> exclusive_or_expression ^ and_expression 	3
and_expression -> and_expression & equality_expression 	1

288
inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression 	3
exclusive_or_expression -> exclusive_or_expression ^ and_expression 	1

289
logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression 	3
inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression 	1

290
conditional_expression -> logical_or_expression ? expression : conditional_expression 	3
expression -> expression , assignment_expression 	1

291
logical_or_expression -> logical_or_expression OR_OP logical_and_expression 	3
logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression 	1

292
initializer_list -> initializer 	1

293
initializer -> { initializer_list } 	2
initializer -> { initializer_list , } 	2
initializer_list -> initializer_list , initializer 	1

294
labeled_statement -> IDENTIFIER : statement 	3

295
selection_statement -> IF ( expression ) statement ELSE statement 	3
selection_statement -> IF ( expression ) statement 	3
expression -> expression , assignment_expression 	1

296
labeled_statement -> CASE constant_expression : statement 	3

297
labeled_statement -> DEFAULT : statement 	3

298
selection_statement -> SWITCH ( expression ) statement 	3
expression -> expression , assignment_expression 	1

299
iteration_statement -> WHILE ( expression ) statement 	3
expression -> expression , assignment_expression 	1

300
iteration_statement -> DO statement WHILE ( expression ) ; 	3

301
iteration_statement -> FOR ( expression_statement expression_statement ) statement 	3
iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 	3

302
jump_statement -> GOTO IDENTIFIER ; 	3

303
jump_statement -> RETURN expression ; 	3

304
assignment_expression -> unary_expression assignment_operator assignment_expression 	3

305
expression -> expression , assignment_expression 	3

306
compound_statement -> { declaration_list statement_list } 	4

307
struct_declarator_list -> struct_declarator_list , struct_declarator 	3

308
struct_declarator -> declarator : constant_expression 	3

309
direct_abstract_declarator -> ( parameter_type_list ) 	3

310
direct_abstract_declarator -> ( abstract_declarator ) 	3

311
direct_abstract_declarator -> [ constant_expression ] 	3

312
direct_abstract_declarator -> direct_abstract_declarator ( ) 	3

313
direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) 	3

314
direct_abstract_declarator -> direct_abstract_declarator [ ] 	3

315
direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] 	3

316
cast_expression -> ( type_name ) cast_expression 	4

317
unary_expression -> SIZEOF ( type_name ) 	4

318
postfix_expression -> postfix_expression ( argument_expression_list ) 	4

319
argument_expression_list -> argument_expression_list , assignment_expression 	2

320
postfix_expression -> postfix_expression [ expression ] 	4

321
conditional_expression -> logical_or_expression ? expression : conditional_expression 	4

322
initializer -> { initializer_list , } 	3
initializer_list -> initializer_list , initializer 	2

323
initializer -> { initializer_list } 	3

324
selection_statement -> IF ( expression ) statement ELSE statement 	4
selection_statement -> IF ( expression ) statement 	4

325
labeled_statement -> CASE constant_expression : statement 	4

326
selection_statement -> SWITCH ( expression ) statement 	4

327
iteration_statement -> WHILE ( expression ) statement 	4

328
iteration_statement -> DO statement WHILE ( expression ) ; 	4

329
iteration_statement -> FOR ( expression_statement expression_statement ) statement 	4
iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 	4

330
direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) 	4

331
direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] 	4

332
argument_expression_list -> argument_expression_list , assignment_expression 	3

333
conditional_expression -> logical_or_expression ? expression : conditional_expression 	5

334
initializer -> { initializer_list , } 	4

335
initializer_list -> initializer_list , initializer 	3

336
selection_statement -> IF ( expression ) statement ELSE statement 	5
selection_statement -> IF ( expression ) statement 	5

337
selection_statement -> SWITCH ( expression ) statement 	5

338
iteration_statement -> WHILE ( expression ) statement 	5

339
expression -> expression , assignment_expression 	1
iteration_statement -> DO statement WHILE ( expression ) ; 	5

340
iteration_statement -> FOR ( expression_statement expression_statement ) statement 	5

341
iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 	5
expression -> expression , assignment_expression 	1

342
selection_statement -> IF ( expression ) statement ELSE statement 	6

343
iteration_statement -> DO statement WHILE ( expression ) ; 	6

344
iteration_statement -> FOR ( expression_statement expression_statement ) statement 	6

345
iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 	6

346
selection_statement -> IF ( expression ) statement ELSE statement 	7

347
iteration_statement -> DO statement WHILE ( expression ) ; 	7

348
iteration_statement -> FOR ( expression_statement expression_statement expression ) statement 	7

