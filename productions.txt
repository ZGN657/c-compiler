primary_expression
IDENTIFIER
CONSTANT
( expression )
;;

postfix_expression
primary_expression
IDENTIFIER [ expression ]
postfix_expression ( )
postfix_expression ( argument_expression_list )
IDENTIFIER . IDENTIFIER
postfix_expression INC_OP
postfix_expression DEC_OP
;;

argument_expression_list
assignment_expression
argument_expression_list , assignment_expression
;;

unary_expression
postfix_expression
INC_OP unary_expression
DEC_OP unary_expression
unary_operator cast_expression
SIZEOF unary_expression
SIZEOF ( type_name )
;;

unary_operator
&
*
+
-
~
!
;;

cast_expression
unary_expression
( type_name ) cast_expression
;;

multiplicative_expression
cast_expression
multiplicative_expression * cast_expression
multiplicative_expression / cast_expression
multiplicative_expression % cast_expression
;;

additive_expression
multiplicative_expression
additive_expression + multiplicative_expression
additive_expression - multiplicative_expression
;;

shift_expression
additive_expression
;;

relational_expression
shift_expression
relational_expression < shift_expression
relational_expression > shift_expression
relational_expression LE_OP shift_expression
relational_expression GE_OP shift_expression
;;

equality_expression
relational_expression
equality_expression EQ_OP relational_expression
equality_expression NE_OP relational_expression
;;

exclusive_or_expression
equality_expression
exclusive_or_expression ^ equality_expression
;;

logical_and_expression
exclusive_or_expression
logical_and_expression AND_OP exclusive_or_expression
;;

logical_or_expression
logical_and_expression
logical_or_expression OR_OP logical_and_expression
;;

assignment_expression
logical_or_expression
unary_expression = assignment_expression
;;

expression
assignment_expression
expression , assignment_expression
;;

declaration
type_specifier ;
type_specifier init_declarator_list ;
;;

init_declarator_list
init_declarator
init_declarator_list , init_declarator
;;

init_declarator
declarator
declarator = initializer
;;

type_specifier
VOID
INT
struct_or_union_specifier
;;

struct_or_union_specifier
STRUCT IDENTIFIER { struct_declaration_list }
STRUCT { struct_declaration_list }
STRUCT IDENTIFIER
;;

struct_declaration_list
struct_declaration
struct_declaration_list struct_declaration
;;

struct_declaration
type_specifier struct_declarator_list ;
;;

struct_declarator_list
declarator
struct_declarator_list , declarator
;;

declarator
direct_declarator
;;

direct_declarator
IDENTIFIER
( direct_declarator )
IDENTIFIER [ assignment_expression ]
direct_declarator ( parameter_list )
direct_declarator ( )
;;

parameter_list
parameter_declaration
parameter_list , parameter_declaration
;;

parameter_declaration
type_specifier declarator
type_specifier
;;

type_name
type_specifier
;;

initializer
assignment_expression
{ initializer_list }
{ initializer_list , }
;;

initializer_list
assignment_expression
initializer_list , assignment_expression
;;

statement
compound_statement
expression_statement
selection_statement
iteration_statement
jump_statement
;;


compound_statement
{ }
{ statement_list }
{ declaration_list }
{ declaration_list statement_list }
;;

function_compound_statement
{ }
{ statement_list }
{ declaration_list }
{ declaration_list statement_list }
;;

declaration_list
declaration
declaration_list declaration
;;

statement_list
statement
statement_list statement
;;

expression_statement
;
expression ;
;;

selection_statement
IF ( expression ) statement
IF ( expression ) statement ELSE statement
SWITCH ( expression ) statement
;;

iteration_statement
WHILE ( expression ) statement
FOR ( expression_statement expression_statement ) statement
FOR ( expression_statement expression_statement expression ) statement
;;

jump_statement
CONTINUE ;
BREAK ;
RETURN ;
RETURN expression ;
;;

translation_unit
external_declaration
translation_unit external_declaration
;;

external_declaration
function_definition
declaration
;;

function_definition
type_specifier direct_declarator function_compound_statement
;;

argumented_translation_unit
translation_unit
;;